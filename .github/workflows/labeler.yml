name: "Issue Labeler"
on:
  workflow_dispatch: ~
  issues:
    types: [opened]
  pull_request_target:
    types: [opened]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:

    - name: Add agent-java label
      uses: AlexanderWert/issue-labeler@32be4a3c3d8f009c2741af471994337c34b4cb6f  # v2.3
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        configuration-path: .github/java-label.yml
        enable-versioned-regex: 0

    - name: Get token
      id: get_token
      uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
      with:
        app_id: ${{ secrets.OBS_AUTOMATION_APP_ID }}
        private_key: ${{ secrets.OBS_AUTOMATION_APP_PEM }}
        permissions: >-
          {
            "members": "read",
            "organization_projects": "write",
            "issues": "read"
          }

    - name: Check team membership for user
      uses: elastic/get-user-teams-membership@1.1.0
      id: checkUserMember
      with:
        username: ${{ github.actor }}
        team: 'apm'
        usernamesToExclude: |
          apmmachine
          dependabot
          dependabot[bot]
        GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}

    - name: Show team membership
      run: |
        echo "::debug::isTeamMember: ${{ steps.checkUserMember.outputs.isTeamMember }}"
        echo "::debug::isExcluded: ${{ steps.checkUserMember.outputs.isExcluded }}"

    - name: Add community and triage labels
      if: steps.checkUserMember.outputs.isTeamMember != 'true' && steps.checkUserMember.outputs.isExcluded != 'true'
      uses: AlexanderWert/issue-labeler@32be4a3c3d8f009c2741af471994337c34b4cb6f  # v2.3
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        configuration-path: .github/community-label.yml
        enable-versioned-regex: 0

    - name: Assign new internal pull requests to project
      # TODO: enable condition before merging this
      #if: (steps.checkUserMember.outputs.isTeamMember == 'true' || steps.checkUserMember.outputs.isExcluded == 'true') && github.event_name == 'pull_request'
      id: add-to-project
      # TODO: switch to elastic version before merging this
      uses: SylvainJuge/oblt-actions/github/project-add@gh-project
      with:
        github-token: ${{ steps.get_token.outputs.token }}
        project-id: 1829
        # TODO: switch to real PR URL before merging this
        # item-url: "https://github.com/elastic/apm-agent-java/pull/${{ github.event.pull_request.number }}"
        item-url: "https://github.com/elastic/apm-agent-java/pull/4307"

    - name: set status in project
      # TODO: add same condition as when adding to project
      uses: SylvainJuge/oblt-actions/github/project-field-set@gh-project
      with:
        github-token: ${{ steps.get_token.outputs.token }}
        project-id: ${{ steps.add-to-project.outputs.project-id }}
        item-id: ${{ steps.add-to-project.outputs.item-id }}
        field-name: 'Status'
        field-value: 'In Progress'

    - name: Assign new internal pull requests to project in current iteration
      if: (steps.checkUserMember.outputs.isTeamMember == 'true' || steps.checkUserMember.outputs.isExcluded == 'true') && github.event_name == 'pull_request'
      run: |
        project_id=$(gh api graphql -f query='query($project_number:Int!){ organization(login:"elastic"){ projectV2(number:$project_number) { id } } }' -F project_number=${PROJECT_NUMBER_ID} --jq '.data.organization.projectV2.id' )
        item_id=$(gh project item-add ${PROJECT_NUMBER_ID} --url ${PULL_REQUEST_URL} --owner elastic --format json --jq .id)

        status_field_json=$(gh api graphql -f query='query($project_id:ID!){ node(id:$project_id){ ... on ProjectV2 { fields(first:20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }' --jq '.data.node.fields.nodes[]|select(.name=="Status")' -F project_id=${project_id})
        status_field_id=$( echo "$status_field_json" | jq -r '.id' )
        status_field_value_id=$( echo "$status_field_json" | jq -r ".options[]|select(.name==\"${STATUS}\")|.id" )
        gh project item-edit --id "${item_id}" --project-id "${project_id}" --field-id "${status_field_id}" --single-select-option-id "${status_field_value_id}"

        agent_field_json=$(gh api graphql -f query='query($project_id:ID!){ node(id:$project_id){ ... on ProjectV2 { fields(first:20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }' --jq '.data.node.fields.nodes[]|select(.name=="Agent")' -F project_id=${project_id})
        agent_field_id=$(echo "$agent_field_json" | jq -r '.id' )
        agent_field_value_id=$(echo "$agent_field_json" | jq -r ".options[]|select(.name==\"${AGENT}\")|.id" )
        gh project item-edit --id "${item_id}" --project-id "${project_id}" --field-id "${agent_field_id}" --single-select-option-id "${agent_field_value_id}"

        iteration_field_json=$(gh api graphql -f query='query($project_id:ID!){ node(id:$project_id) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2IterationField { id name configuration { iterations { startDate id } } } } } } } }' --jq '.data.node.fields.nodes[] | select( .name == "Iteration" )' -F project_id=${project_id})
        iteration_field_id=$(echo "$iteration_field_json" | jq -r '.id' )
        iteration_field_value_id=$(echo "$iteration_field_json" | jq -r 'last(.configuration.iterations[]|select(.startDate<=(now|strftime("%Y-%m-%d"))))|.id')
        gh project item-edit --id "${item_id}" --project-id "${project_id}" --field-id "${iteration_field_id}" --iteration-id "${iteration_field_value_id}"
      env:
        GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
        PROJECT_NUMBER_ID: '1829'
        PULL_REQUEST_URL: "https://github.com/elastic/apm-agent-java/pull/${{ github.event.pull_request.number }}"
        AGENT: 'java'
        STATUS: 'In Progress'
