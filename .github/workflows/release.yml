---
# Releases the agent
name: release

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag ref to run the workflow on'
        required: true
        default: "main"
      version:
        description: 'The version to release (e.g. 1.2.3). This workflow will automatically perform the required version bumps'
        required: true
      skip_preparation:
        description: |
          If enabled, the version bump, release notes update and tag creation will be skipped.
          Select this option if those tasks have already been done in a previous run.
        type: boolean
        required: true
        default: false
      skip_maven_deploy:
        description: |
          If enabled, the deployment to maven central will be skipped.
          Select this if the deployment job for this release failed in a previous version but the release was actually published.
          Check manually on maven central beforehand!
        type: boolean
        required: true
        default: false
      dry_run:
        description: If set, run a dry-run release
        default: false
        type: boolean

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}

env:
  RELEASE_VERSION: ${{ inputs.version }}
  RELEASE_VERSION_TAG: v${{ inputs.version }}

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
      - name: Validate tag does not exist on current commit
        uses: ./.github/workflows/validate-tag
        with:
          tag: ${{ env.RELEASE_VERSION_TAG }}
      - name: Validate tag match current version
        run: |
          if [ "$(./mvnw -q help:evaluate -Dexpression=project.version -DforceStdout)" != "${{ env.RELEASE_VERSION }}" ]; then
            echo "Tag should match pom.xml project.version"
            exit 1
          fi
      - name: Validate version is a release version
        run: |
          if [[ "$(./mvnw -q help:evaluate -Dexpression=project.version -DforceStdout)" =~ "-SNAPSHOT" ]]; then
            echo "This is a snapshot version"
            exit 1
          fi

  maven-central-deploy:
    name: "Deploy to Maven Central (Buildkite)"
    if: ${{ ! inputs.skip_maven_deploy && ( inputs.skip_preparation || success() ) }}
    runs-on: ubuntu-latest
    needs:
      - validate-tag
    steps:
      - id: buildkite
        continue-on-error: true
        name: Run Deploy
        uses: elastic/apm-pipeline-library/.github/actions/buildkite@current
        with:
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          pipeline: apm-agent-java-release
          pipelineCommit: ${{ env.RELEASE_VERSION }}
          waitFor: true
          printBuildLogs: false
          buildEnvVars: |
            dry_run=${{ inputs.dry_run || 'false' }}

  await-maven-central-artifact:
    name: "Wait for artifacts to be available on maven central"
    runs-on: ubuntu-latest
    needs:
      - validate-tag
    steps:
      - uses: elastic/apm-pipeline-library/.github/actions/await-maven-artifact@current
        with:
          groupid: 'co.elastic.apm'
          artifactid: 'elastic-apm-agent'
          version: ${{ env.RELEASE_VERSION }}

  update-major-branch:
    name: "Update Major Branch"
    runs-on: ubuntu-latest
    needs:
      - await-maven-central-artifact
    permissions:
      contents: write
    steps:
      - uses: elastic/apm-pipeline-library/.github/actions/github-token@current
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
      - uses: elastic/apm-pipeline-library/.github/actions/setup-git@current
        with:
          username: ${{ env.GIT_USER }}
          email: ${{ env.GIT_EMAIL }}
          token: ${{ env.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          token: ${{ env.GITHUB_TOKEN }}
      - name: Update major branch
        if: ${{ ! inputs.dry_run }}
        run: .ci/release/update-major-branch.sh ${{ env.RELEASE_VERSION }}

  build-and-push-docker-images:
    name: "Build and push docker images"
    runs-on: ubuntu-latest
    needs:
      - await-maven-central-artifact
    env:
      SONATYPE_FALLBACK: 1
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0 # Load entire history as it is required for the push-script
      - uses: elastic/apm-pipeline-library/.github/actions/docker-login@current
        with:
          registry: docker.elastic.co
          secret: secret/apm-team/ci/docker-registry/prod
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
      - name: "Build docker image"
        shell: bash
        run: ./scripts/docker-release/build_docker.sh
      - name: "Push docker image"
        if: ${{ ! inputs.dry_run }}
        shell: bash
        run: ./scripts/docker-release/push_docker.sh

  publish-aws-lambda:
    name: "Publish AWS Lambda"
    runs-on: ubuntu-latest
    needs:
      - await-maven-central-artifact
    outputs:
      arn_content: ${{ steps.arn_output.outputs.arn_content }}
    env:
      # Random region. This needs to be set in GH Actions or the usage of aws-cli will fail.
      # The default region does not matter, since we are publishing in all regions.
      AWS_DEFAULT_REGION: eu-west-1
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Build Lambda-layer zip using agent from maven-central
        uses: ./.github/workflows/maven-goal
        with:
          command: ./mvnw dependency:purge-local-repository package -pl apm-agent-lambda-layer
      - uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/observability-team/ci/service-account/apm-aws-lambda access_key_id | AWS_ACCESS_KEY_ID ;
            secret/observability-team/ci/service-account/apm-aws-lambda secret_access_key | AWS_SECRET_ACCESS_KEY
      - name: Publish
        if: ${{ ! inputs.dry_run }}
        run: |
          # Convert v1.2.3 to ver-1-2-3
          VERSION=${RELEASE_VERSION/v/ver-}
          VERSION=${VERSION//./-}
          
          ELASTIC_LAYER_NAME="elastic-apm-java-${VERSION}" .ci/publish-aws.sh
      - uses: actions/upload-artifact@v4
        if: ${{ ! inputs.dry_run }}
        with:
          name: arn-file
          path: .ci/.arn-file.md
      - name: Add ARN file to output
        if: ${{ ! inputs.dry_run }}
        id: arn_output
        run: |
          echo 'arn_content<<ARN_CONTENT_EOF' >> $GITHUB_OUTPUT
          cat .ci/.arn-file.md >> $GITHUB_OUTPUT
          echo 'ARN_CONTENT_EOF' >> $GITHUB_OUTPUT

  create-github-release:
    name: "Create GitHub Release"
    needs:
      - publish-aws-lambda
      - update-major-branch
    runs-on: ubuntu-latest
    if: ${{ ! inputs.dry_run }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Await release-notes published
        shell: bash
        timeout-minutes: 120
        run: |
          until .ci/release/wait_release_notes_published.sh ${{ env.RELEASE_VERSION }}
          do
            echo "Release notes not published yet. Sleeping 30 seconds, retrying afterwards"
            sleep 30s
          done
      - name: Compute major.x branch
        id: get_dotx_branch
        run: echo "dotx_branch=$(echo '${{ env.RELEASE_VERSION }}' | sed -E 's/\..+/.x/')" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ env.RELEASE_VERSION }} \
            --title="Release ${{ env.RELEASE_VERSION }}" \
            --notes="[Release Notes for ${{ env.RELEASE_VERSION }}](https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-${{ steps.get_dotx_branch.outputs.dotx_branch }}.html#release-notes-${{ env.RELEASE_VERSION }})
            ${{ needs.publish-aws-lambda.outputs.arn_content }}"

  post-release:
    name: "Bump versions and create PR"
    needs:
      - await-maven-central-artifact
    uses: ./.github/workflows/pre-post-release.yml
    permissions:
      contents: write
    if: inputs.dry_run == false
    with:
      ref: ${{ inputs.ref }}
      version: ${{ env.RELEASE_VERSION }}
      phase: 'post'
    secrets: inherit

  notify:
    if: ${{ always() && ! inputs.dry_run }}
    needs:
      - maven-central-deploy
      - await-maven-central-artifact
      - update-major-branch
      - build-and-push-docker-images
      - publish-aws-lambda
      - post-release
      - create-github-release
    runs-on: ubuntu-latest
    steps:
      - id: check
        uses: elastic/apm-pipeline-library/.github/actions/check-dependent-jobs@current
        with:
          needs: ${{ toJSON(needs) }}
      - uses: elastic/apm-pipeline-library/.github/actions/notify-build-status@current
        with:
          status: ${{ steps.check.outputs.status }}
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          slackChannel: "#apm-agent-java"
