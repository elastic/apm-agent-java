---
# Releases the agent
# Renaming this file will break the AWS authentication.
# Contact the observablt-robots team if you need to rename this file.
name: 'release-step-3'

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag ref to run the workflow on'
        required: true
        default: "main"
      version:
        description: 'The version to release (e.g. 1.2.3). This workflow will automatically perform the required post-release version bumps'
        required: true
        default: "1.52.2"
      skip_preparation:
        description: |
          If enabled, the version bump, release notes update and tag creation will be skipped.
          Select this option if those tasks have already been done in a previous run.
        type: boolean
        required: true
        default: true
      skip_maven_deploy:
        description: |
          If enabled, the deployment to maven central will be skipped.
          Select this if the deployment job for this release failed in a previous version but the release was actually published.
          Check manually on maven central beforehand!
        type: boolean
        required: true
        default: true
      dry_run:
        description: If set, run a dry-run release
        default: false
        type: boolean

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}

env:
  RELEASE_VERSION: ${{ inputs.version }}
  RELEASE_VERSION_TAG: v${{ inputs.version }}

jobs:
  build-and-push-docker-images:
    name: "Build and push docker images"
    runs-on: ubuntu-latest
    env:
      SONATYPE_FALLBACK: 1
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0 # Load entire history as it is required for the push-script

      - name: Log in to the Elastic Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ secrets.ELASTIC_DOCKER_REGISTRY }}
          username: ${{ secrets.ELASTIC_DOCKER_USERNAME }}
          password: ${{ secrets.ELASTIC_DOCKER_PASSWORD }}

      - name: "Build docker image"
        shell: bash
        run: ./scripts/docker-release/build_docker.sh "${{ env.RELEASE_VERSION }}"
      - name: "Push docker image"
        if: ${{ ! inputs.dry_run }}
        shell: bash
        run: ./scripts/docker-release/push_docker.sh "${{ env.RELEASE_VERSION }}"

  publish-aws-lambda:
    name: "Publish AWS Lambda"
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      arn_content: ${{ steps.arn_output.outputs.arn_content }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Build Lambda-layer zip using agent from maven-central
        uses: ./.github/workflows/maven-goal
        with:
          command: ./mvnw dependency:purge-local-repository package -pl apm-agent-lambda-layer
      - uses: elastic/oblt-actions/aws/auth@v1
        with:
          aws-account-id: '267093732750'
      - name: Publish
        if: ${{ ! inputs.dry_run }}
        run: |
          # Convert v1.2.3 to ver-1-2-3
          VERSION=${RELEASE_VERSION_TAG/v/ver-}
          VERSION=${VERSION//./-}
          
          ELASTIC_LAYER_NAME="elastic-apm-java-${VERSION}" .ci/publish-aws.sh
      - uses: actions/upload-artifact@v4
        if: ${{ ! inputs.dry_run }}
        with:
          name: arn-file
          path: .ci/.arn-file.md
      - name: Add ARN file to output
        if: ${{ ! inputs.dry_run }}
        id: arn_output
        run: |
          echo 'arn_content<<ARN_CONTENT_EOF' >> $GITHUB_OUTPUT
          cat .ci/.arn-file.md >> $GITHUB_OUTPUT
          echo 'ARN_CONTENT_EOF' >> $GITHUB_OUTPUT

  create-github-release:
    name: "Create GitHub Release"
    needs:
      - publish-aws-lambda
    runs-on: ubuntu-latest
    if: ${{ ! inputs.dry_run }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Await release-notes published
        shell: bash
        timeout-minutes: 120
        run: |
          until .ci/release/wait_release_notes_published.sh ${{ env.RELEASE_VERSION }}
          do
            echo "Release notes not published yet. Sleeping 30 seconds, retrying afterwards"
            sleep 30s
          done
      - name: Compute major.x branch
        id: get_dotx_branch
        run: echo "dotx_branch=$(echo '${{ env.RELEASE_VERSION }}' | sed -E 's/\..+/.x/')" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ env.RELEASE_VERSION_TAG }} \
            --title="Release ${{ env.RELEASE_VERSION }}" \
            --notes="[Release Notes for ${{ env.RELEASE_VERSION }}](https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-${{ steps.get_dotx_branch.outputs.dotx_branch }}.html#release-notes-${{ env.RELEASE_VERSION }})
            ${{ needs.publish-aws-lambda.outputs.arn_content }}"

  notify:
    if: ${{ always() && ! inputs.dry_run }}
    needs:
      - build-and-push-docker-images
      - publish-aws-lambda
      - create-github-release
    runs-on: ubuntu-latest
    steps:
      - id: check
        uses: elastic/oblt-actions/check-dependent-jobs@v1
        with:
          jobs: ${{ toJSON(needs) }}
      - uses: elastic/oblt-actions/slack/notify-result@v1
        with:
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: "#apm-agent-java"
          status: ${{ steps.check.outputs.status }}
