---
name: snapshot

on:
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      dry_run:
        description: If set, run a dry-run snapshot
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      is-snapshot: ${{ steps.validate-step.outputs.is-snapshot }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate version is a snapshot version
        id: validate-step
        run: |
          output=false
          if [[ "$(./mvnw -q help:evaluate -Dexpression=project.version -DforceStdout)" =~ "-SNAPSHOT" ]]; then
            echo "This is a snapshot version"
            output=true
          fi
          echo "is-snapshot=${output}" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - validate
    permissions:
      attestations: write
      contents: write
      id-token: write
    env:
      TARBALL_FILE: artifacts.tar
    if: ${{ contains(needs.validate.outputs.is-snapshot, 'true') }}
    steps:
      - id: buildkite
        name: Run Deploy
        uses: elastic/apm-pipeline-library/.github/actions/buildkite@current
        with:
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          pipeline: apm-agent-java-snapshot
          pipelineBranch: ${{ github.ref_name }}
          artifactName: snapshots
          artifactPath: ${{ env.TARBALL_FILE }}
          waitFor: true
          printBuildLogs: false
          buildEnvVars: |
            dry_run=${{ inputs.dry_run || 'false' }}
            TARBALL_FILE=${{ env.TARBALL_FILE }}

      - uses: actions/download-artifact@v3
        with:
          name: snapshots

      - name: untar the buildkite tarball
        run: tar xvf ${{ env.TARBALL_FILE }}

      - name: generate build provenance
        uses: actions/attest-build-provenance@951c0c5f8e375ad4efad33405ab77f7ded2358e4  # v1.1.1
        with:
          subject-path: "${{ github.workspace }}/**/target/*.jar"

      - uses: actions/upload-artifact@v4
        with:
          name: elastic-apm-agent
          path: ./elastic-apm-agent/target/elastic-apm-agent-*.jar

  build-and-push-docker-images:
    name: "Build and push docker images"
    runs-on: ubuntu-latest
    needs:
      - deploy
      - validate
    if: ${{ contains(needs.validate.outputs.is-snapshot, 'true') }}
    env:
      DOCKER_IMAGE_NAME: docker.elastic.co/observability/apm-agent-java
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: elastic-apm-agent
          path: elastic-apm-agent/target

      - uses: elastic/apm-pipeline-library/.github/actions/docker-login@current
        with:
          registry: docker.elastic.co
          secret: secret/apm-team/ci/docker-registry/prod
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}

      - name: Extract metadata (tags, labels)
        id: docker-meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81  # v5.5.1
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,prefix=test-,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        id: push
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0  # v5.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          build-args: |
            STANDALONE_FILE=elastic-apm-agent/target/elastic-apm-agent-*.jar
            HANDLER_FILE=apm-agent-lambda-layer/src/main/assembly/elastic-apm-handler

      - name: generate build provenance (containers)
        uses: github-early-access/generate-build-provenance@main
        with:
          subject-name: "${{ env.DOCKER_IMAGE_NAME }}"
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  notify:
    if: ${{ failure() && ! inputs.dry_run }}
    needs:
      - deploy
      - build-and-push-docker-images
    runs-on: ubuntu-latest
    steps:
      - id: check
        uses: elastic/apm-pipeline-library/.github/actions/check-dependent-jobs@current
        with:
          needs: ${{ toJSON(needs) }}
      - uses: elastic/apm-pipeline-library/.github/actions/notify-build-status@current
        with:
          status: ${{ steps.check.outputs.status }}
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          slackChannel: "#apm-agent-java"
