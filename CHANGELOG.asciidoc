ifdef::env-github[]
NOTE: Release notes are best read in our documentation at
https://www.elastic.co/guide/en/apm/agent/java/current/release-notes.html[elastic.co]
endif::[]

////
[[release-notes-x.x.x]]
==== x.x.x - YYYY/MM/DD

[float]
===== Breaking changes

[float]
===== Features
* Cool new feature: {pull}2526[#2526]

[float]
===== Bug fixes
////

=== Unreleased

[[release-notes-1.24.1]]
==== 1.24.1 - YYYY/MM/DD

[float]
===== Features
* Support for inheritance of public API annotations {pull}1805[#1805]
* JDBC instrumentation sets context.db.instance {pull}1820[#1820]

[float]
===== Bug fixes
* Fix NPE with `null` binary header values + properly serialize them - {pull}1842[#1842]

[[release-notes-1.x]]
=== Java Agent version 1.x

[[release-notes-1.24.0]]
==== 1.24.0 - 2021/05/31

[float]
===== Features
* Basic support for Apache Struts 2 {pull}1763[#1763]
* Extending the <<config-log-ecs-reformatting>> config option to enable the overriding of logs with ECS-reformatted
events. With the new `OVERRIDE` option, non-file logs can be ECS-reformatted automatically as well - {pull}1793[#1793]
* Instrumentation for Vert.x Web {pull}1697[#1697]
* Changed log level of vm arguments to debug
* Giving precedence for the W3C `tracecontext` header over the `elastic-apm-traceparent` header - {pull}1821[#1821]
* Add instrumentation for Webflux - {pull}1305[#1305]

[float]
===== Bug fixes
* Fix another error related to instrumentation plugins loading on Windows - {pull}1785[#1785]
* Load Spring AMQP plugin- {pull}1784[#1784]
* Avoid `IllegalStateException` when multiple `tracestate` headers are used - {pull}1808[#1808]
* Ensure CLI attach avoids `sudo` only when required and avoid blocking - {pull}1819[#1819]
* Avoid sending metric-sets without samples, so to adhere to the intake API - {pull}1826[#1826]
* Fixing our type-pool cache, so that it can't cause OOM (softly-referenced), and it gets cleared when not used for
a while - {pull}1828[#1828]

[float]
===== Refactors
* Remove single-package limitation for embedded plugins - {pull}1780[#1780]

[[release-notes-1.23.0]]
==== 1.23.0 - 2021/04/22

[float]
===== Breaking changes
* There are breaking changes in the <<setup-attach-cli,attacher cli>>.
  See the Features section for more information.

[float]
===== Features
* Overhaul of the <<setup-attach-cli,attacher cli>> application that allows to attach the agent to running JVMs - {pull}1667[#1667]
** The artifact of the standalone cli application is now called `apm-agent-attach-cli`. The attacher API is still called `apm-agent-attach`.
** There is also a slim version of the cli application that does not bundle the Java agent.
It requires the `--agent-jar` option to be set.
** Improved logging +
The application uses {ecs-logging-java-ref}/intro.html[Java ECS logging] to emit JSON logs.
The log level can be configured with the `--log-level` option.
By default, the program is logging to the console but using the `--log-file` option, it can also log to a file.
** Attach to JVMs running under a different user (unix only) +
The JVM requires the attacher to be running under the same user as the target VM (the attachee).
The `apm-agent-attach-standalone.jar` can now be run with a user that has permissions to switch to the user that runs the target VM.
On Windows, the attacher can still only attach to JVMs that are running with under the same user.
** New include/exclude discovery rules +
*** `--include-all`: Attach to all discovered JVMs. If no matchers are provided, it will not attach to any JVMs.
*** `--include-user`/`--exclude-user`: Attach to all JVMs of a given operating system user.
*** `--include-main`/`--exclude-main`: Attach to all JVMs that whose main class/jar name, or system properties match the provided regex.
*** `--include-vmargs`/`--exclude-vmargs`: Attach to all JVMs that whose main class/jar name, or system properties match the provided regex.
** Removal of options +
*** The deprecated `--arg` option has been removed.
*** The `-i`/`--include`, `-e`/`exclude` options have been removed in favor of the `--<include|exclude>-<main|vmargs>` options.
*** The `-p`/`--pid` options have been removed in favor of the `--include-pid` option.
** Changed behavior of  the `-l`/`--list` option +
The option now only lists JVMs that match the include/exclude discovery rules.
Thus, it can be used to do a dry-run of the matchers without actually performing an attachment.
It even works in combination with `--continuous` now.
By default, the VM arguments are not printed, but only when the `-a`/`--list-vmargs` option is set.
** Remove dependency on `jps` +
Even when matching on the main class name or on system properties,
** Checks the Java version before attaching to avoid attachment on unsupported JVMs.
* Cassandra instrumentation - {pull}1712[#1712]
* Log correlation supports JBoss Logging - {pull}1737[#1737]
* Update Byte-buddy to `1.11.0` - {pull}1769[#1769]
* Support for user.domain {pull}1756[#1756]
* JAX-RS supports javax.ws.rs.PATCH
* Enabling build and unit tests on Windows - {pull}1671[#1671]

[float]
===== Bug fixes
* Fixed log correlation for log4j2 - {pull}1720[#1720]
* Fix apm-log4j1-plugin and apm-log4j2-plugin dependency on slf4j - {pull}1723[#1723]
* Avoid systematic `MessageNotWriteableException` error logging, now only visible in `debug` - {pull}1715[#1715] and {pull}1730[#1730]
* Fix rounded number format for non-english locales - {pull}1728[#1728]
* Fix `NullPointerException` on legacy Apache client instrumentation when host is `null` - {pull}1746[#1746]
* Apply consistent proxy class exclusion heuristic - {pull}1738[#1738]
* Fix micrometer serialization error - {pull}1741[#1741]
* Optimize & avoid `ensureInstrumented` deadlock by skipping stack-frame computation for Java7+ bytecode - {pull}1758[#1758]
* Fix instrumentation plugins loading on Windows - {pull}1671[#1671]

[float]
===== Refactors
* Migrate some plugins to indy dispatcher {pull}1369[#1369] {pull}1410[#1410] {pull}1374[#1374]

[[release-notes-1.22.0]]
==== 1.22.0 - 2021/03/24

[float]
===== Breaking changes
* Dots in metric names of Micrometer metrics get replaced with underscores to avoid mapping conflicts.
De-dotting be disabled via <<config-dedot-custom-metrics, `dedot_custom_metrics`>>. - {pull}1700[#1700]

[float]
===== Features
* Introducing a new mechanism to ease the development of community instrumentation plugins. See <<config-plugins-dir>> for
more details. This configuration was already added in 1.18.0, but more extensive and continuous integration testing
allows us to expose it now. It is still marked as "experimental" though, meaning that future changes in the mechanism
may break early contributed plugins. However, we highly encourage our community to try it out and we will do our best
to assist with such efforts.
* Deprecating `ignore_user_agents` in favour of `transaction_ignore_user_agents`, maintaining the same functionality -
{pull}1644[#1644]
* Update existing Hibernate Search 6 instrumentation to the final relase
* The <<config-use-path-as-transaction-name, `use_path_as_transaction_name`>> option is now dynamic
* Flushing internal and micrometer metrics before the agent shuts down - {pull}1658[#1658]
* Support for OkHttp 4.4+ -  {pull}1672[#1672]
* Adding capability to automatically create ECS-JSON-formatted version of the original application log files, through
the <<config-log-ecs-reformatting>> config option. This allows effortless ingestion of logs to Elasticsearch without
any further configuration. Supports log4j1, log4j2 and Logback. {pull}1261[#1261]
* Add support to Spring AMQP - {pull}1657[#1657]
* Adds the ability to automatically configure usage of the OpenTracing bridge in systems using ServiceLoader - {pull}1708[#1708]
* Update to async-profiler 1.8.5 - includes a fix to a Java 7 crash and enhanced safe mode to better deal with
corrupted stack frames.
* Add a warning on startup when `-Xverify:none` or `-noverify` flags are set as this can lead to crashes that are very
difficult to debug - {pull}1593[#1593]. In an upcoming version, the agent will not start when these flags are set,
unless the system property `elastic.apm.disable_bootstrap_checks` is set to true.

[float]
===== Bug fixes
* fix sample rate rounded to zero when lower than precision - {pull}1655[#1655]
* fixed a couple of bugs with the external plugin mechanism (not documented until now) - {pull}1660[#1660]
* Fix runtime attach conflict with multiple users - {pull}1704[#1704]

[[release-notes-1.21.0]]
==== 1.21.0 - 2021/02/09

[float]
===== Breaking changes
* Following PR {pull}1650[#1650], there are two slight changes with the <<config-server-url>> and <<config-server-urls>>
configuration options:
    1.  So far, setting `server_urls` with an empty string would allow the agent to work normally, apart from any action
        that requires communication with the APM Server, including the attempt to fetch a central configuration.
        Starting in this agent version, setting `server_urls` to empty string doesn't have any special meaning, it is
        the default expected configuration, where `server_url` will be used instead. In order to achieve the same
        behaviour, use the new <<config-disable-send>> configuration.
    2.  Up to this version, `server_url` was used as an alias to `server_urls`, meaning that one could potentially set
        the `server_url` config with a comma-separated list of multiple APM Server addresses, and that would have been a
        valid configuration. Starting in this agent version, `server_url` is a separate configuration, and it only accepts
        Strings that represent a single valid URL. Specifically, empty strings and commas are invalid.

[float]
===== Features
* Add cloud provider metadata to reported events, see
https://github.com/elastic/apm/blob/master/specs/agents/metadata.md#cloud-provider-metadata[spec] for details.
By default, the agent will try to automatically detect the cloud provider on startup, but this can be
configured through the <<config-cloud-provider, `cloud_provider`>> config option - {pull}1599[#1599]
* Add span & transaction `outcome` field to improve error rate calculations - {pull}1613[#1613]

[float]
===== Bug fixes
* Fixing crashes observed in Java 7 at sporadic timing by applying a few seconds delay on bootstrap - {pull}1594[#1594]
* Fallback to using "TLS" `SSLContext` when "SSL" is not available - {pull}1633[#1633]
* Fixing agent startup failure with `NullPointerException` thrown by Byte-buddy's `MultipleParentClassLoader` - {pull}1647[#1647]
* Fix cached type resolution triggering `ClassCastException` - {pull}1649[#1649]

[[release-notes-1.20.0]]
==== 1.20.0 - 2021/01/07

[float]
===== Breaking changes
* The following public API types were `public` so far and became package-private: `NoopScope`, `ScopeImpl` and `AbstractSpanImpl`.
  If your code is using them, you will need to change that when upgrading to this version.
  Related PR: {pull}1532[#1532]

[float]
===== Features
* Add support for RabbitMQ clients - {pull}1328[#1328]

[float]
===== Bug fixes
* Fix small memory allocation regression introduced with tracestate header {pull}1508[#1508]
* Fix `NullPointerException` from `WeakConcurrentMap.put` through the Elasticsearch client instrumentation - {pull}1531[#1531]
* Sending `transaction_id` and `parent_id` only for events that contain a valid `trace_id` as well - {pull}1537[#1537]
* Fix `ClassNotFoundError` with old versions of Spring resttemplate {pull}1524[#1524]
* Fix Micrometer-driven metrics validation errors by the APM Server when sending with illegal values - {pull}1559[#1559]
* Serialize all stack trace frames when setting `stack_trace_limit=-1` instead of none - {pull}1571[#1571]
* Fix `UnsupportedOperationException` when calling `ServletContext.getClassLoader()` - {pull}1576[#1576]
* Fix improper request body capturing - {pull}1579[#1579]
* Avoid `NullPointerException` due to null return values instrumentation advices - {pull}1601[#1601]
* Update async-profiler to 1.8.3 {pull}1602[1602]
* Use null-safe data structures to avoid `NullPointerException` {pull}1597[1597]
* Fix memory leak in sampling profiler mechanism - {pull}1592[#1592]

[float]
===== Refactors
* Migrate some plugins to indy dispatcher {pull}1405[#1405] {pull}1394[#1394]

[[release-notes-1.19.0]]
==== 1.19.0 - 2020/11/10

[float]
===== Features
* The agent version now includes a git hash if it's a snapshot version.
  This makes it easier to differ distinct snapshot builds of the same version.
  Example: `1.18.1-SNAPSHOT.4655910`
* Add support for sampling weight with propagation in `tracestate` W3C header {pull}1384[#1384]
* Adding two more valid options to the `log_level` config: `WARNING` (equivalent to `WARN`) and `CRITICAL`
  (will be treated as `ERROR`) - {pull}1431[1431]
* Add the ability to disable Servlet-related spans for `INCLUDE`, `FORWARD` and `ERROR` dispatches (without affecting
  basic Servlet capturing) by adding `servlet-api-dispatch` to <<config-disable-instrumentations>> - {pull}1448[1448]
* Add Sampling Profiler support for AArch64 architectures - {pull}1443[1443]
* Support proper transaction naming when using Spring's `ServletWrappingController` - {pull}1461[#1461]
* Update async-profiler to 1.8.2 {pull}1471[1471]
* Update existing Hibernate Search 6 instrumentation to work with the latest CR1 release
* Deprecating the `addLabel` public API in favor of `setLabel` (still supporting `addLabel`) - {pull}1449[#1449]

[float]
===== Bug fixes
* Fix `HttpUrlConnection` instrumentation issue (affecting distributed tracing as well) when using HTTPS without using
  `java.net.HttpURLConnection#disconnect` - {pull}1447[1447]
* Fixes class loading issue that can occur when deploying multiple applications to the same application server - {pull}1458[#1458]
* Fix ability to disable agent on startup wasn't working for runtime attach {pull}1444[1444]
* Avoid `UnsupportedOperationException` on some spring application startup {pull}1464[1464]
* Fix ignored runtime attach `config_file` {pull}1469[1469]
* Fix `IllegalAccessError: Module 'java.base' no access to: package 'java.lang'...` in J9 VMs of Java version >= 9 -
  {pull}1468[#1468]
* Fix JVM version parsing on HP-UX {pull}1477[#1477]
* Fix Spring-JMS transactions lifecycle management when using multiple concurrent consumers - {pull}1496[#1496]

[float]
===== Refactors
* Migrate some plugins to indy dispatcher {pull}1404[1404] {pull}1411[1411]
* Replace System Rules with System Lambda {pull}1434[#1434]

[[release-notes-1.18.1]]
==== 1.18.1 - 2020/10/06

[float]
===== Refactors
* Migrate some plugins to indy dispatcher {pull}1362[1362] {pull}1366[1366] {pull}1363[1363] {pull}1383[1383] {pull}1368[1368] {pull}1364[1364] {pull}1365[1365] {pull}1367[1367] {pull}1371[1371]

[float]
===== Bug fixes
* Fix instrumentation error for HttpClient - {pull}1402[#1402]
* Eliminate `unsupported class version error` messages related to loading the Java 11 HttpClient plugin in pre-Java-11 JVMs {pull}1397[1397]
* Fix rejected metric events by APM Server with response code 400 due to data validation error - sanitizing Micrometer
metricset tag keys - {pull}1413[1413]
* Fix invalid micrometer metrics with non-numeric values {pull}1419[1419]
* Fix `NoClassDefFoundError` with JDBC instrumentation plugin {pull}1409[1409]
* Apply `disable_metrics` config to Micrometer metrics - {pull}1421[1421]
* Remove cgroup `inactive_file.bytes` metric according to spec {pull}1422[1422]

[[release-notes-1.18.0]]
==== 1.18.0 - 2020/09/08

[float]
===== Features
* Deprecating `ignore_urls` config in favour of <<config-transaction-ignore-urls, `transaction_ignore_urls`>> to align
  with other agents, while still allowing the old config name for backward compatibility - {pull}1315[#1315]
* Enabling instrumentation of classes compiled with Java 1.4. This is reverting the restriction of instrumenting only
  bytecode of Java 1.5 or higher ({pull}320[#320]), which was added due to potential `VerifyError`. Such errors should be
  avoided now by the usage of `TypeConstantAdjustment` - {pull}1317[#1317]
* Enabling agent to work without attempting any communication with APM server, by allowing setting `server_urls` with
  an empty string - {pull}1295[#1295]
* Add <<metrics-micrometer, micrometer support>> - {pull}1303[#1303]
* Add `profiling_inferred_spans_lib_directory` option to override the default temp directory used for exporting the async-profiler library.
  This is useful for server-hardened environments where `/tmp` is often configured with `noexec`, leading to `java.lang.UnsatisfiedLinkError` errors - {pull}1350[#1350]
* Create spans for Servlet dispatches to FORWARD, INCLUDE and ERROR - {pull}1212[#1212]
* Support JDK 11 HTTPClient - {pull}1307[#1307]
* Lazily create profiler temporary files {pull}1360[#1360]
* Convert the followings to Indy Plugins (see details in <<release-notes-1.18.0.rc1, 1.18.0-rc1 relase notes>>): gRPC,
  AsyncHttpClient, Apache HttpClient
* The agent now collects cgroup memory metrics (see details in <<metrics-cgroup,Metrics page>>)
* Update async-profiler to 1.8.1 {pull}1382[#1382]
* Runtime attach install option is promoted to 'beta' status (was experimental).

[float]
===== Bug fixes
* Fixes a `NoClassDefFoundError` in the JMS instrumentation of `MessageListener` - {pull}1287[#1287]
* Fix `/ by zero` error message when setting `server_urls` with an empty string - {pull}1295[#1295]
* Fix `ClassNotFoundException` or `ClassCastException` in some cases where special log4j configurations are used - {pull}1322[#1322]
* Fix `NumberFormatException` when using early access Java version - {pull}1325[#1325]
* Fix `service_name` config being ignored when set to the same auto-discovered default value - {pull}1324[#1324]
* Fix service name error when updating a web app on a Servlet container - {pull}1326[#1326]
* Fix remote attach 'jps' executable not found when 'java' binary is symlinked ot a JRE - {pull}1352[#1352]

[[release-notes-1.18.0.rc1]]
==== 1.18.0.RC1 - 2020/07/22

This release candidate adds some highly anticipated features:
It’s now possible to attach the agent at runtime in more cases than before.
Most notably, it enables runtime attachment on JBoss, WildFly, Glassfish/Payara,
and other OSGi runtimes such as Atlassian Jira and Confluence.

To make this and other significant features, such as https://github.com/elastic/apm-agent-java/issues/937[external plugins], possible,
we have implemented major changes to the architecture of the agent.
The agent now relies on the `invokedynamic` bytecode instruction to make plugin development easier, safer, and more efficient.
As early versions of Java 7 and Java 8 have unreliable support for invokedynamic,
we now require a minimum update level of 60 for Java 7 (7u60+) in addition to the existing minimum update level of 40 for Java 8 (8u40+).

We’re looking for users who would like to try this out to give feedback.
If we see that the `invokedynamic`-based approach (https://github.com/elastic/apm-agent-java/pull/1230[indy plugins]) works well, we can continue and migrate the rest of the plugins.
After the migration has completed, we can move forward with external plugins and remove the experimental label from runtime attachment.

If all works like in our testing, you would not see `NoClassDefFoundError` s anymore when, for example, trying to attach the agent at runtime to an OSGi container or a JBoss server.
Also, non-standard OSGi containers, such as Atlassian Jira and other technologies with restrictive class loading policies, such as MuleSoft ESB, will benefit from this change.

In the worst case, there might be JVM crashes due to `invokedynamic`-related JVM bugs.
However, we already disable the agent when attached to JVM versions that are known to be problematic.
Another potentially problematic area is that we now dynamically raise the bytecode version of instrumented classes to be at least bytecode version 51 (Java 7).
This is needed in order to be able to use the `invokedynamic` instruction.
This requires re-computation of stack map frames which makes instrumentation a bit slower.
We don't anticipate notable slowdowns unless you extensively (over-)use <<config-trace-methods, `trace_methods`>>.

[float]
===== Breaking changes
* Early Java 7 versions, prior to update 60, are not supported anymore.
  When trying to attach to a non-supported version, the agent will disable itself and not apply any instrumentations.

[float]
===== Features
* Experimental support for runtime attachment now also for OSGi containers, JBoss, and WildFly
* New mitigation of OSGi bootdelegation errors (`NoClassDefFoundError`).
  You can remove any `org.osgi.framework.bootdelegation` related configuration.
  This release also removes the configuration option `boot_delegation_packages`.
* Overhaul of the `ExecutorService` instrumentation that avoids `ClassCastException` issues - {pull}1206[#1206]
* Support for `ForkJoinPool` and `ScheduledExecutorService` (see <<supported-async-frameworks>>)
* Support for `ExecutorService#invokeAny` and `ExecutorService#invokeAll`
* Added support for `java.util.TimerTask` - {pull}1235[#1235]
* Add capturing of request body in Elasticsearch queries: `_msearch`, `_count`, `_msearch/template`, `_search/template`, `_rollup_search` - {pull}1222[#1222]
* Add <<config-enabled,`enabled`>> flag
* Add experimental support for Scala Futures
* The agent now collects heap memory pools metrics - {pull}1228[#1228]

[float]
===== Bug fixes
* Fixes error capturing for log4j2 loggers. Version 1.17.0 introduced a regression.
* Fixes `NullPointerException` related to JAX-RS and Quartz instrumentation - {pull}1249[#1249]
* Expanding k8s pod ID discovery to some formerly non-supported environments
* When `recording` is set to `false`, the agent will not send captured errors anymore.
* Fixes NPE in Dubbo instrumentation that occurs when the application is acting both as a provider and as a consumer - {pull}1260[#1260]
* Adding a delay by default what attaching the agent to Tomcat using the premain route to work around the JUL
  deadlock issue - {pull}1262[#1262]
* Fixes missing `jboss.as:*` MBeans on JBoss - {pull}1257[#1257]


[[release-notes-1.17.0]]
==== 1.17.0 - 2020/06/17

[float]
===== Features
* Log files are now rotated after they reach <<config-log-file-size>>.
There will always be one history file `${log_file}.1`.
* Add <<config-log-format-sout>> and <<config-log-format-file>> with the options `PLAIN_TEXT` and `JSON`.
The latter uses https://github.com/elastic/ecs-logging-java[ecs-logging-java] to format the logs.
* Exposing <<config-classes-excluded-from-instrumentation>> config - {pull}1187[#1187]
* Add support for naming transactions based on Grails controllers. Supports Grails 3+ - {pull}1171[#1171]
* Add support for the Apache/Alibaba Dubbo RPC framework
* Async Profiler version upgraded to 1.7.1, with a new debugging flag for the stack frame recovery mechanism - {pull}1173[#1173]

[float]
===== Bug fixes
* Fixes `IndexOutOfBoundsException` that can occur when profiler-inferred spans are enabled.
  This also makes the profiler more resilient by just removing the call tree related to the exception (which might be in an invalid state)
  as opposed to stopping the profiler when an exception occurs.
* Fix `NumberFormatException` when parsing Ingres/Actian JDBC connection strings - {pull}1198[#1198]
* Prevent agent from overriding JVM configured truststore when not using HTTPS for communication with APM server - {pull}1203[#1203]
* Fix `java.lang.IllegalStateException` with `jps` JVM when using continuous runtime attach - {pull}1205[1205]
* Fix agent trying to load log4j2 plugins from application - {pull}1214[1214]
* Fix memory leak in gRPC instrumentation plugin - {pull}1196[1196]
* Fix HTTPS connection failures when agent is configured to use HTTPS to communicate with APM server {pull}1209[1209]

[[release-notes-1.16.0]]
==== 1.16.0 - 2020/05/13

[float]
===== Features

* The log correlation feature now adds `error.id` to the MDC. See <<supported-logging-frameworks>> for details. - {pull}1050[#1050]
* Deprecating the `incubating` tag in favour of the `experimental` tag. This is not a breaking change, so former
<<config-disable-instrumentations,`disable_instrumentation`>> configuration containing the `incubating` tag will still be respected - {pull}1123[#1123]
* Add a `--without-emulated-attach` option for runtime attachment to allow disabling this feature as a workaround.
* Add workaround for JDK bug JDK-8236039 with TLS 1.3 {pull}1149[#1149]
* Add log level `OFF` to silence agent logging
* Adds <<config-span-min-duration,`span_min_duration`>> option to exclude fast executing spans.
  When set together with one of the more specific thresholds - `trace_methods_duration_threshold` or `profiling_inferred_spans_min_duration`,
  the higher threshold will determine which spans will be discarded.
* Automatically instrument quartz jobs from the quartz-jobs artifact {pull}1170[#1170]
* Perform re-parenting of regular spans to be a child of profiler-inferred spans. Requires APM Server and Kibana 7.8.0. {pull}1117[#1117]
* Upgrade Async Profiler version to 1.7.0

[float]
===== Bug fixes

* When Servlet-related Exceptions are handled through exception handlers that return a 200 status code, agent shouldn't override with 500 - {pull}1103[#1103]
* Exclude Quartz 1 from instrumentation to avoid
  `IncompatibleClassChangeError: Found class org.quartz.JobExecutionContext, but interface was expected` - {pull}1108[#1108]
* Fix breakdown metrics span sub-types {pull}1113[#1113]
* Fix flaky gRPC server instrumentation {pull}1122[#1122]
* Fix side effect of calling `Statement.getUpdateCount` more than once {pull}1139[#1139]
* Stop capturing JDBC affected rows count using `Statement.getUpdateCount` to prevent unreliable side-effects {pull}1147[#1147]
* Fix OpenTracing error tag handling (set transaction error result when tag value is `true`) {pull}1159[#1159]
* Due to a bug in the build we didn't include the gRPC plugin in the build so far
* `java.lang.ClassNotFoundException: Unable to load class 'jdk.internal...'` is thrown when tracing specific versions of Atlassian systems {pull}1168[#1168]
* Make sure spans are kept active during `AsyncHandler` methods in the `AsyncHttpClient`
* CPU and memory metrics are sometimes not reported properly when using IBM J9 {pull}1148[#1148]
* `NullPointerException` thrown by the agent on WebLogic {pull}1142[#1142]

[[release-notes-1.15.0]]
==== 1.15.0 - 2020/03/27

[float]
===== Breaking changes

* Ordering of configuration sources has slightly changed, please review <<configuration>>:
** `elasticapm.properties` file now has higher priority over java system properties and environment variables, +
This change allows to change dynamic options values at runtime by editing file, previously values set in java properties
or environment variables could not be overridden, even if they were dynamic.
* Renamed some configuration options related to the experimental profiler-inferred spans feature ({pull}1084[#1084]):
** `profiling_spans_enabled` -> `profiling_inferred_spans_enabled`
** `profiling_sampling_interval` -> `profiling_inferred_spans_sampling_interval`
** `profiling_spans_min_duration` -> `profiling_inferred_spans_min_duration`
** `profiling_included_classes` -> `profiling_inferred_spans_included_classes`
** `profiling_excluded_classes` -> `profiling_inferred_spans_excluded_classes`
** Removed `profiling_interval` and `profiling_duration` (both are fixed to 5s now)

[float]
===== Features

* Gracefully abort agent init when running on a known Java 8 buggy JVM {pull}1075[#1075].
* Add support for <<supported-databases, Redis Redisson client>>
* Makes <<config-instrument>>, <<config-trace-methods>>, and <<config-disable-instrumentations>> dynamic.
Note that changing these values at runtime can slow down the application temporarily.
* Do not instrument Servlet API before 3.0 {pull}1077[#1077]
* Add support for API keys for apm backend authentication {pull}1083[#1083]
* Add support for <<supported-rpc-frameworks, gRPC>> client & server instrumentation {pull}1019[#1019]
* Deprecating `active` configuration option in favor of `recording`.
  Setting `active` still works as it's now an alias for `recording`.

[float]
===== Bug fixes

* When JAX-RS-annotated method delegates to another JAX-RS-annotated method, transaction name should include method A - {pull}1062[#1062]
* Fixed bug that prevented an APM Error from being created when calling `org.slf4j.Logger#error` - {pull}1049[#1049]
* Wrong address in JDBC spans for Oracle, MySQL and MariaDB when multiple hosts are configured - {pull}1082[#1082]
* Document and re-order configuration priorities {pull}1087[#1087]
* Improve heuristic for `service_name` when not set through config {pull}1097[#1097]


[[release-notes-1.14.0]]
==== 1.14.0 - 2020/03/04

[float]
===== Features

* Support for the official https://www.w3.org/TR/trace-context[W3C] `traceparent` and `tracestate` headers. +
  The agent now accepts both the `elastic-apm-traceparent` and the official `traceparent` header.
By default, it sends both headers on outgoing requests, unless <<config-use-elastic-traceparent-header, `use_elastic_traceparent_header`>> is set to false.
* Creating spans for slow methods with the help of the sampling profiler https://github.com/jvm-profiling-tools/async-profiler[async-profiler].
This is a low-overhead way of seeing which methods make your transactions slow and a replacement for the `trace_methods` configuration option.
See <<supported-java-methods>> for more details
* Adding a Circuit Breaker to pause the agent when stress is detected on the system and resume when the stress is relieved.
See <<circuit-breaker>> and {pull}1040[#1040] for more info.
* `Span#captureException` and `Transaction#captureException` in public API return reported error id - {pull}1015[#1015]

[float]
===== Bug fixes

* java.lang.IllegalStateException: Cannot resolve type description for <com.another.commercial.apm.agent.Class> - {pull}1037[#1037]
* properly handle `java.sql.SQLException` for unsupported JDBC features {pull}[#1035] https://github.com/elastic/apm-agent-java/issues/1025[#1025]

[[release-notes-1.13.0]]
==== 1.13.0 - 2020/02/11

[float]
===== Features

* Add support for <<supported-databases, Redis Lettuce client>>
* Add `context.message.age.ms` field for JMS message receiving spans and transactions - {pull}970[#970]
* Instrument log4j2 Logger#error(String, Throwable) ({pull}919[#919]) Automatically captures exceptions when calling `logger.error("message", exception)`
* Add instrumentation for external process execution through `java.lang.Process` and Apache `commons-exec` - {pull}903[#903]
* Add `destination` fields to exit span contexts - {pull}976[#976]
* Removed `context.message.topic.name` field - {pull}993[#993]
* Add support for Kafka clients - {pull}981[#981]
* Add support for binary `traceparent` header format (see the https://github.com/elastic/apm/blob/master/docs/agent-development.md#Binary-Fields[spec]
for more details) - {pull}1009[#1009]
* Add support for log correlation for log4j and log4j2, even when not used in combination with slf4j.
  See <<supported-logging-frameworks>> for details.

[float]
===== Bug Fixes

* Fix parsing value of `trace_methods` configuration property {pull}930[#930]
* Workaround for `java.util.logging` deadlock {pull}965[#965]
* JMS should propagate traceparent header when transactions are not sampled {pull}999[#999]
* Spans are not closed if JDBC implementation does not support `getUpdateCount` {pull}1008[#1008]

[[release-notes-1.12.0]]
==== 1.12.0 - 2019/11/21

[float]
===== Features
* JMS Enhancements {pull}911[#911]:
** Add special handling for temporary queues/topics
** Capture message bodies of text Messages
*** Rely on the existing `ELASTIC_APM_CAPTURE_BODY` agent config option (off by default).
*** Send as `context.message.body`
*** Limit size to 10000 characters. If longer than this size, trim to 9999 and append with ellipsis
** Introduce the `ignore_message_queues` configuration to disable instrumentation (message tagging) for specific 
      queues/topics as suggested in {pull}710[#710]
** Capture predefined message headers and all properties
*** Rely on the existing `ELASTIC_APM_CAPTURE_HEADERS` agent config option.
*** Send as `context.message.headers`
*** Sanitize sensitive headers/properties based on the `sanitize_field_names` config option
* Added support for the MongoDB sync driver. See https://www.elastic.co/guide/en/apm/agent/java/master/supported-technologies-details.html#supported-databases[supported data stores].

[float]
===== Bug Fixes
* JDBC regression- `PreparedStatement#executeUpdate()` and `PreparedStatement#executeLargeUpdate()` are not traced {pull}918[#918]
* When systemd cgroup driver is used, the discovered Kubernetes pod UID contains "_" instead of "-" {pull}920[#920]
* DB2 jcc4 driver is not traced properly {pull}926[#926]

[[release-notes-1.11.0]]
==== 1.11.0 - 2019/10/31

[float]
===== Features
* Add the ability to configure a unique name for a JVM within a service through the
https://www.elastic.co/guide/en/apm/agent/java/master/config-core.html#config-service-node-name[`service_node_name`]
config option]
* Add ability to ignore some exceptions to be reported as errors https://www.elastic.co/guide/en/apm/agent/java/master/config-core.html#config-ignore-exceptions[ignore_exceptions]
* Applying new logic for JMS `javax.jms.MessageConsumer#receive` so that, instead of the transaction created for the 
   polling method itself (ie from `receive` start to end), the agent will create a transaction attempting to capture 
   the code executed during actual message handling.
   This logic is suitable for environments where polling APIs are invoked within dedicated polling threads.
   This polling transaction creation strategy can be reversed through a configuration option (`message_polling_transaction_strategy`) 
   that is not exposed in the properties file by default.  
* Send IP obtained through `javax.servlet.ServletRequest#getRemoteAddr()` in `context.request.socket.remote_address` 
   instead of parsing from headers {pull}889[#889]
* Added `ElasticApmAttacher.attach(String propertiesLocation)` to specify a custom properties location
* Logs message when `transaction_max_spans` has been exceeded {pull}849[#849]
* Report the number of affected rows by a SQL statement (UPDATE,DELETE,INSERT) in 'affected_rows' span attribute {pull}707[#707]
* Add https://www.elastic.co/guide/en/apm/agent/java/master/public-api.html#api-traced[`@Traced`] annotation which either creates a span or a transaction, depending on the context
* Report JMS destination as a span/transaction context field {pull}906[#906]
* Added https://www.elastic.co/guide/en/apm/agent/java/master/config-jmx.html#config-capture-jmx-metrics[`capture_jmx_metrics`] configuration option

[float]
===== Bug Fixes
* JMS creates polling transactions even when the API invocations return without a message
* Support registering MBeans which are added after agent startup

[[release-notes-1.10.0]]
==== 1.10.0 - 2019/09/30

[float]
===== Features
* Add ability to manually specify reported https://www.elastic.co/guide/en/apm/agent/java/master/config-core.html#config-hostname[hostname]
* Add support for https://www.elastic.co/guide/en/apm/agent/java/master/supported-technologies-details.html#supported-databases[Redis Jedis client]
* Add support for identifying target JVM to attach apm agent to using JVM property. See also the documentation of the <<setup-attach-cli-usage-options, `--include` and `--exclude` flags>>
* Added https://www.elastic.co/guide/en/apm/agent/java/master/config-jmx.html#config-capture-jmx-metrics[`capture_jmx_metrics`] configuration option
* Improve servlet error capture {pull}812[#812]
  Among others, now also takes Spring MVC `@ExceptionHandler`s into account 
* Instrument Logger#error(String, Throwable) {pull}821[#821]
  Automatically captures exceptions when calling `logger.error("message", exception)`
* Easier log correlation with https://github.com/elastic/java-ecs-logging. See https://www.elastic.co/guide/en/apm/agent/java/master/log-correlation.html[docs].
* Avoid creating a temp agent file for each attachment {pull}859[#859]
* Instrument `View#render` instead of `DispatcherServlet#render` {pull}829[#829]
  This makes the transaction breakdown graph more useful. Instead of `dispatcher-servlet`, the graph now shows a type which is based on the view name, for example, `FreeMarker` or `Thymeleaf`.

[float]
===== Bug Fixes
* Error in log when setting https://www.elastic.co/guide/en/apm/agent/java/current/config-reporter.html#config-server-urls[server_urls] 
 to an empty string - `co.elastic.apm.agent.configuration.ApmServerConfigurationSource - Expected previousException not to be null`
* Avoid terminating the TCP connection to APM Server when polling for configuration updates {pull}823[#823]
 
[[release-notes-1.9.0]]
==== 1.9.0 - 2019/08/22

[float]
===== Features
* Upgrading supported OpenTracing version from 0.31 to 0.33
* Added annotation and meta-annotation matching support for `trace_methods`, for example:
** `public @java.inject.* org.example.*` (for annotation)
** `public @@javax.enterprise.context.NormalScope org.example.*` (for meta-annotation)
* The runtime attachment now also works when the `tools.jar` or the `jdk.attach` module is not available.
This means you don't need a full JDK installation - the JRE is sufficient.
This makes the runtime attachment work in more environments such as minimal Docker containers.
Note that the runtime attachment currently does not work for OSGi containers like those used in many application servers such as JBoss and WildFly.
See the https://www.elastic.co/guide/en/apm/agent/java/master/setup-attach-cli.html[documentation] for more information.
* Support for Hibernate Search

[float]
===== Bug Fixes
* A warning in logs saying APM server is not available when using 1.8 with APM server 6.x.
Due to that, agent 1.8.0 will silently ignore non-string labels, even if used with APM server of versions 6.7.x or 6.8.x that support such.
If APM server version is <6.7 or 7.0+, this should have no effect. Otherwise, upgrade the Java agent to 1.9.0+.
* `ApacheHttpAsyncClientInstrumentation` matching increases startup time considerably
* Log correlation feature is active when `active==false`
* Tomcat's memory leak prevention mechanism is causing a... memory leak. JDBC statement map is leaking in Tomcat if the application that first used it is undeployed/redeployed.
See https://discuss.elastic.co/t/elastic-apm-agent-jdbchelper-seems-to-use-a-lot-of-memory/195295[this related discussion].

[float]
==== Breaking Changes
* The `apm-agent-attach.jar` is not executable anymore.
Use `apm-agent-attach-standalone.jar` instead. 

[[release-notes-1.8.0]]
==== 1.8.0 - 2019/07/30

[float]
===== Features
* Added support for tracking https://www.elastic.co/guide/en/kibana/7.3/transactions.html[time spent by span type].
   Can be disabled by setting https://www.elastic.co/guide/en/apm/agent/java/current/config-core.html#config-breakdown-metrics[`breakdown_metrics`] to `false`. 
* Added support for https://www.elastic.co/guide/en/kibana/7.3/agent-configuration.html[central configuration].
   Can be disabled by setting https://www.elastic.co/guide/en/apm/agent/java/current/config-core.html#config-central-config[`central_config`] to `false`.
* Added support for Spring's JMS flavor - instrumenting `org.springframework.jms.listener.SessionAwareMessageListener`
* Added support to legacy ApacheHttpClient APIs (which adds support to Axis2 configured to use ApacheHttpClient)
* Added support for setting https://www.elastic.co/guide/en/apm/agent/java/1.x/config-reporter.html#config-server-urls[`server_urls`] dynamically via properties file {pull}723[#723]
* Added https://www.elastic.co/guide/en/apm/agent/java/current/config-core.html#config-config-file[`config_file`] option 
* Added option to use `@javax.ws.rs.Path` value as transaction name https://www.elastic.co/guide/en/apm/agent/java/current/config-jax-rs.html#config-use-jaxrs-path-as-transaction-name[`use_jaxrs_path_as_transaction_name`]
* Instrument quartz jobs https://www.elastic.co/guide/en/apm/agent/java/current/supported-technologies-details.html#supported-scheduling-frameworks[docs]
* SQL parsing improvements {pull}696[#696]
* Introduce priorities for transaction name {pull}748[#748].
   Now uses the path as transaction name if https://www.elastic.co/guide/en/apm/agent/java/current/config-http.html#config-use-path-as-transaction-name[`use_path_as_transaction_name`] is set to `true`
   rather than `ServletClass#doGet`.
   But if a name can be determined from a high level framework,
   like Spring MVC, that takes precedence.
   User-supplied names from the API always take precedence over any others.
* Use JSP path name as transaction name as opposed to the generated servlet class name {pull}751[#751]

[float]
===== Bug Fixes
* Some JMS Consumers and Producers are filtered due to class name filtering in instrumentation matching
* Jetty: When no display name is set and context path is "/" transaction service names will now correctly fall back to configured values
* JDBC's `executeBatch` is not traced
* Drops non-String labels when connected to APM Server < 6.7 to avoid validation errors {pull}687[#687]
* Parsing container ID in cloud foundry garden {pull}695[#695]
* Automatic instrumentation should not override manual results {pull}752[#752]

[float]
===== Breaking changes
* The log correlation feature does not add `span.id` to the MDC anymore but only `trace.id` and `transaction.id` {pull}742[#742].

[[release-notes-1.7.0]]
==== 1.7.0 - 2019/06/13

[float]
===== Features
* Added the `trace_methods_duration_threshold` config option. When using the `trace_methods` config option with wild cards,
this enables considerable reduction of overhead by limiting the number of spans captured and reported
(see more details in config documentation).
NOTE: Using wildcards is still not the recommended approach for the `trace_methods` feature.
* Add `Transaction#addCustomContext(String key, String|Number|boolean value)` to public API
* Added support for AsyncHttpClient 2.x
* Added https://www.elastic.co/guide/en/apm/agent/java/current/config-core.html#config-global-labels[`global_labels`] configuration option.
This requires APM Server 7.2+.
* Added basic support for JMS- distributed tracing for basic scenarios of `send`, `receive`, `receiveNoWait` and `onMessage`.
Both Queues and Topics are supported.
Async `send` APIs are not supported in this version. 
NOTE: This feature is currently marked as "experimental" and is disabled by default. In order to enable,
it is required to set the
https://www.elastic.co/guide/en/apm/agent/java/1.x/config-core.html#config-disable-instrumentations[`disable_instrumentations`] 
configuration property to an empty string.
* Improved OSGi support: added a configuration option for `bootdelegation` packages {pull}641[#641]
* Better span names for SQL spans. For example, `SELECT FROM user` instead of just `SELECT` {pull}633[#633]

[float]
===== Bug Fixes
* ClassCastException related to async instrumentation of Pilotfish Executor causing thread hang (applied workaround)
* NullPointerException when computing Servlet transaction name with null HTTP method name
* FileNotFoundException when trying to find implementation version of jar with encoded URL
* NullPointerException when closing Apache AsyncHttpClient request producer
* Fixes loading of `elasticapm.properties` for Spring Boot applications
* Fix startup error on WebLogic 12.2.1.2.0 {pull}649[#649]
* Disable metrics reporting and APM Server health check when active=false {pull}653[#653]

[[release-notes-1.6.1]]
==== 1.6.1 - 2019/04/26

[float]
===== Bug Fixes
* Fixes transaction name for non-sampled transactions https://github.com/elastic/apm-agent-java/issues/581[#581]
* Makes log_file option work again https://github.com/elastic/apm-agent-java/issues/594[#594]
* Async context propagation fixes
** Fixing some async mechanisms lifecycle issues https://github.com/elastic/apm-agent-java/issues/605[#605]
** Fixes exceptions when using WildFly managed executor services https://github.com/elastic/apm-agent-java/issues/589[#589]
** Exclude glassfish Executor which does not permit wrapped runnables https://github.com/elastic/apm-agent-java/issues/596[#596]
** Exclude DumbExecutor https://github.com/elastic/apm-agent-java/issues/598[#598]
* Fixes Manifest version reading error to support `jar:file` protocol https://github.com/elastic/apm-agent-java/issues/601[#601]
* Fixes transaction name for non-sampled transactions https://github.com/elastic/apm-agent-java/issues/597[#597]
* Fixes potential classloader deadlock by preloading `FileSystems.getDefault()` https://github.com/elastic/apm-agent-java/issues/603[#603]

[[release-notes-1.6.0]]
==== 1.6.0 - 2019/04/16

[float]
===== Related Announcements
* Java APM Agent became part of the Cloud Foundry Java Buildpack as of https://github.com/cloudfoundry/java-buildpack/releases/tag/v4.19[Release v4.19]
 
[float]
===== Features
* Support Apache HttpAsyncClient - span creation and cross-service trace context propagation
* Added the `jvm.thread.count` metric, indicating the number of live threads in the JVM (daemon and non-daemon) 
* Added support for WebLogic
* Added support for Spring `@Scheduled` and EJB `@Schedule` annotations - https://github.com/elastic/apm-agent-java/pull/569[#569]

[float]
===== Bug Fixes
* Avoid that the agent blocks server shutdown in case the APM Server is not available - https://github.com/elastic/apm-agent-java/pull/554[#554]
* Public API annotations improper retention prevents it from being used with Groovy - https://github.com/elastic/apm-agent-java/pull/567[#567]
* Eliminate side effects of class loading related to Instrumentation matching mechanism

[[release-notes-1.5.0]]
==== 1.5.0 - 2019/03/26

[float]
===== Potentially breaking changes
* If you didn't explicitly set the https://www.elastic.co/guide/en/apm/agent/java/master/config-core.html#config-service-name[`service_name`]
previously and you are dealing with a servlet-based application (including Spring Boot),
your `service_name` will change.
See the documentation for https://www.elastic.co/guide/en/apm/agent/java/master/config-core.html#config-service-name[`service_name`]
and the corresponding section in _Features_ for more information.
Note: this requires APM Server 7.0+. If using previous versions, nothing will change.

[float]
===== Features
* Added property `"allow_path_on_hierarchy"` to JAX-RS plugin, to lookup inherited usage of `@path`
* Support for number and boolean labels in the public API {pull}497[497].
This change also renames `tag` to `label` on the API level to be compliant with the https://github.com/elastic/ecs#-base-fields[Elastic Common Schema (ECS)].
The `addTag(String, String)` method is still supported but deprecated in favor of `addLabel(String, String)`.
As of version 7.x of the stack, labels will be stored under `labels` in Elasticsearch.
Previously, they were stored under `context.tags`.
* Support async queries made by Elasticsearch REST client 
* Added `setStartTimestamp(long epochMicros)` and `end(long epochMicros)` API methods to `Span` and `Transaction`,
allowing to set custom start and end timestamps.
* Auto-detection of the `service_name` based on the `<display-name>` element of the `web.xml` with a fallback to the servlet context path.
If you are using a spring-based application, the agent will use the setting for `spring.application.name` for its `service_name`.
See the documentation for https://www.elastic.co/guide/en/apm/agent/java/master/config-core.html#config-service-name[`service_name`]
for more information.
Note: this requires APM Server 7.0+. If using previous versions, nothing will change.
* Previously, enabling https://www.elastic.co/guide/en/apm/agent/java/master/config-core.html#config-capture-body[`capture_body`] could only capture form parameters.
Now it supports all UTF-8 encoded plain-text content types.
The option https://www.elastic.co/guide/en/apm/agent/java/master/config-http.html#config-capture-body-content-types[`capture_body_content_types`]
controls which `Content-Type`s should be captured.
* Support async calls made by OkHttp client (`Call#enqueue`)
* Added support for providing config options on agent attach.
** CLI example: `--config server_urls=http://localhost:8200,http://localhost:8201`
** API example: `ElasticApmAttacher.attach(Map.of("server_urls", "http://localhost:8200,http://localhost:8201"));`

[float]
===== Bug Fixes
* Logging integration through MDC is not working properly - https://github.com/elastic/apm-agent-java/issues/499[#499]
* ClassCastException with adoptopenjdk/openjdk11-openj9 - https://github.com/elastic/apm-agent-java/issues/505[#505]
* Span count limitation is not working properly - reported https://discuss.elastic.co/t/kibana-apm-not-showing-spans-which-are-visible-in-discover-too-many-spans/171690[in our forum]
* Java agent causes Exceptions in Alfresco cluster environment due to failure in the instrumentation of Hazelcast `Executor`s - reported https://discuss.elastic.co/t/cant-run-apm-java-agent-in-alfresco-cluster-environment/172962[in our forum]

[[release-notes-1.4.0]]
==== 1.4.0 - 2019/02/14

[float]
===== Features
* Added support for sync calls of OkHttp client
* Added support for context propagation for `java.util.concurrent.ExecutorService`s
* The `trace_methods` configuration now allows to omit the method matcher.
   Example: `com.example.*` traces all classes and methods within the `com.example` package and sub-packages.
* Added support for JSF. Tested on WildFly, WebSphere Liberty and Payara with embedded JSF implementation and on Tomcat and Jetty with
 MyFaces 2.2 and 2.3
* Introduces a new configuration option `disable_metrics` which disables the collection of metrics via a wildcard expression.
* Support for HttpUrlConnection
* Adds `subtype` and `action` to spans. This replaces former typing mechanism where type, subtype and action were all set through
   the type in an hierarchical dotted-syntax. In order to support existing API usages, dotted types are parsed into subtype and action, 
   however `Span.createSpan` and `Span.setType` are deprecated starting this version. Instead, type-less spans can be created using the new 
   `Span.startSpan` API and typed spans can be created using the new `Span.startSpan(String type, String subtype, String action)` API
* Support for JBoss EAP 6.4, 7.0, 7.1 and 7.2
* Improved startup times
* Support for SOAP (JAX-WS).
   SOAP client create spans and propagate context.
   Transactions are created for `@WebService` classes and `@WebMethod` methods.  

[float]
===== Bug Fixes
* Fixes a failure in BitBucket when agent deployed https://github.com/elastic/apm-agent-java/issues/349[#349]
* Fixes increased CPU consumption https://github.com/elastic/apm-agent-java/issues/453[#453] and https://github.com/elastic/apm-agent-java/issues/443[#443]
* Fixed some OpenTracing bridge functionalities that were not working when auto-instrumentation is disabled
* Fixed an error occurring when ending an OpenTracing span before deactivating
* Sending proper `null` for metrics that have a NaN value
* Fixes JVM crash with Java 7 https://github.com/elastic/apm-agent-java/issues/458[#458]
* Fixes an application deployment failure when using EclipseLink and `trace_methods` configuration https://github.com/elastic/apm-agent-java/issues/474[#474]

[[release-notes-1.3.0]]
==== 1.3.0 - 2019/01/10

[float]
===== Features
* The agent now collects system and JVM metrics https://github.com/elastic/apm-agent-java/pull/360[#360]
* Add API methods `ElasticApm#startTransactionWithRemoteParent` and `Span#injectTraceHeaders` to allow for manual context propagation https://github.com/elastic/apm-agent-java/pull/396[#396].
* Added `trace_methods` configuration option which lets you define which methods in your project or 3rd party libraries should be traced.
   To create spans for all `public` methods of classes whose name ends in `Service` which are in a sub-package of `org.example.services` use this matcher:
   `public org.example.services.*.*Service#*` https://github.com/elastic/apm-agent-java/pull/398[#398]
* Added span for `DispatcherServlet#render` https://github.com/elastic/apm-agent-java/pull/409[#409].
* Flush reporter on shutdown to make sure all recorded Spans are sent to the server before the program exits https://github.com/elastic/apm-agent-java/pull/397[#397]
* Adds Kubernetes https://github.com/elastic/apm-agent-java/issues/383[#383] and Docker metadata to, enabling correlation with the Kibana Infra UI.
* Improved error handling of the Servlet Async API https://github.com/elastic/apm-agent-java/issues/399[#399]
* Support async API’s used with AsyncContext.start https://github.com/elastic/apm-agent-java/issues/388[#388]

[float]
===== Bug Fixes
* Fixing a potential memory leak when there is no connection with APM server
* Fixes NoSuchMethodError CharBuffer.flip() which occurs when using the Elasticsearch RestClient and Java 7 or 8 https://github.com/elastic/apm-agent-java/pull/401[#401]

 
[[release-notes-1.2.0]]
==== 1.2.0 - 2018/12/19

[float]
===== Features
* Added `capture_headers` configuration option.
   Set to `false` to disable capturing request and response headers.
   This will reduce the allocation rate of the agent and can save you network bandwidth and disk space.
* Makes the API methods `addTag`, `setName`, `setType`, `setUser` and `setResult` fluent, so that calls can be chained. 

[float]
===== Bug Fixes
* Catch all errors thrown within agent injected code
* Enable public APIs and OpenTracing bridge to work properly in OSGi systems, fixes https://github.com/elastic/apm-agent-java/issues/362[this WildFly issue]
* Remove module-info.java to enable agent working on early Tomcat 8.5 versions
* Fix https://github.com/elastic/apm-agent-java/issues/371[async Servlet API issue]

[[release-notes-1.1.0]]
==== 1.1.0 - 2018/11/28

[float]
===== Features
* Some memory allocation improvements
* Enabling bootdelegation for agent classes in Atlassian OSGI systems

[float]
===== Bug Fixes
* Update dsl-json which fixes a memory leak.
 See https://github.com/ngs-doo/dsl-json/pull/102[ngs-doo/dsl-json#102] for details. 
* Avoid `VerifyError`s by non instrumenting classes compiled for Java 4 or earlier
* Enable APM Server URL configuration with path (fixes #339)
* Reverse `system.hostname` and `system.platform` order sent to APM server

[[release-notes-1.0.1]]
==== 1.0.1 - 2018/11/15

[float]
===== Bug Fixes
* Fixes NoSuchMethodError CharBuffer.flip() which occurs when using the Elasticsearch RestClient and Java 7 or 8 {pull}313[#313]

[[release-notes-1.0.0]]
==== 1.0.0 - 2018/11/14

[float]
===== Breaking changes
* Remove intake v1 support. This version requires APM Server 6.5.0+ which supports the intake api v2.
   Until the time the APM Server 6.5.0 is officially released,
   you can test with docker by pulling the APM Server image via
   `docker pull docker.elastic.co/apm/apm-server:6.5.0-SNAPSHOT`. 

[float]
===== Features
* Adds `@CaptureTransaction` and `@CaptureSpan` annotations which let you declaratively add custom transactions and spans.
   Note that it is required to configure the `application_packages` for this to work.
   See the https://www.elastic.co/guide/en/apm/agent/java/master/public-api.html#api-annotation[documentation] for more information.
* The public API now supports to activate a span on the current thread.
   This makes the span available via `ElasticApm#currentSpan()`
   Refer to the https://www.elastic.co/guide/en/apm/agent/java/master/public-api.html#api-span-activate[documentation] for more details.
* Capturing of Elasticsearch RestClient 5.0.2+ calls.
   Currently, the `*Async` methods are not supported, only their synchronous counterparts.
* Added API methods to enable correlating the spans created from the JavaScrip Real User Monitoring agent with the Java agent transaction.
   More information can be found in the https://www.elastic.co/guide/en/apm/agent/java/master/public-api.html#api-ensure-parent-id[documentation].
* Added `Transaction.isSampled()` and `Span.isSampled()` methods to the public API
* Added `Transaction#setResult` to the public API {pull}293[#293]

[float]
===== Bug Fixes
* Fix for situations where status code is reported as `200`, even though it actually was `500` {pull}225[#225]
* Capturing the username now properly works when using Spring security {pull}183[#183]

[[release-notes-1.0.0.rc1]]
==== 1.0.0.RC1 - 2018/11/06

[float]
===== Breaking changes
* Remove intake v1 support. This version requires APM Server 6.5.0+ which supports the intake api v2.
   Until the time the APM Server 6.5.0 is officially released,
   you can test with docker by pulling the APM Server image via
   `docker pull docker.elastic.co/apm/apm-server:6.5.0-SNAPSHOT`.
* Wildcard patterns are case insensitive by default. Prepend `(?-i)` to make the matching case sensitive.

[float]
===== Features
* Support for Distributed Tracing
* Adds `@CaptureTransaction` and `@CaptureSpan` annotations which let you declaratively add custom transactions and spans.
   Note that it is required to configure the `application_packages` for this to work.
   See the https://www.elastic.co/guide/en/apm/agent/java/master/public-api.html#api-annotation[documentation] for more information.
* The public API now supports to activate a span on the current thread.
   This makes the span available via `ElasticApm#currentSpan()`
   Refer to the https://www.elastic.co/guide/en/apm/agent/java/master/public-api.html#api-span-activate[documentation] for more details.
* Capturing of Elasticsearch RestClient 5.0.2+ calls.
   Currently, the `*Async` methods are not supported, only their synchronous counterparts.
* Added API methods to enable correlating the spans created from the JavaScrip Real User Monitoring agent with the Java agent transaction.
   More information can be found in the https://www.elastic.co/guide/en/apm/agent/java/master/public-api.html#api-ensure-parent-id[documentation].
* Microsecond accurate timestamps {pull}261[#261]
* Support for JAX-RS annotations.
Transactions are named based on your resources (`ResourceClass#resourceMethod`).

[float]
===== Bug Fixes
* Fix for situations where status code is reported as `200`, even though it actually was `500` {pull}225[#225]

[[release-notes-0.8.x]]
=== Java Agent version 0.8.x

[[release-notes-0.8.0]]
==== 0.8.0

[float]
===== Breaking changes
* Wildcard patterns are case insensitive by default. Prepend `(?-i)` to make the matching case sensitive.

[float]
===== Features
* Wildcard patterns are now not limited to only one wildcard in the middle and can be arbitrarily complex now.
   Example: `*foo*bar*baz`.
* Support for JAX-RS annotations.
   Transactions are named based on your resources (`ResourceClass#resourceMethod`).

[[release-notes-0.7.x]]
=== Java Agent version 0.7.x

[[release-notes-0.7.1]]
==== 0.7.1 - 2018/10/24

[float]
===== Bug Fixes
* Avoid recycling transactions twice {pull}178[#178]

[[release-notes-0.7.0]]
==== 0.7.0 - 2018/09/12

[float]
===== Breaking changes
* Removed `ElasticApm.startSpan`. Spans can now only be created from their transactions via `Transaction#createSpan`.
* `ElasticApm.startTransaction` and `Transaction#createSpan` don't activate the transaction and spans
   and are thus not available via `ElasticApm.activeTransaction` and `ElasticApm.activeSpan`.

[float]
===== Features
* Public API
** Add `Span#captureException` and `Transaction#captureException` to public API.
      `ElasticApm.captureException` is deprecated now. Use `ElasticApm.currentSpan().captureException(exception)` instead.
** Added `Transaction.getId` and `Span.getId` methods 
* Added support for async servlet requests
* Added support for Payara/Glassfish
* Incubating support for Apache HttpClient
* Support for Spring RestTemplate
* Added configuration options `use_path_as_transaction_name` and `url_groups`,
   which allow to use the URL path as the transaction name.
   As that could contain path parameters, like `/user/$userId` however,
   You can set the `url_groups` option to define a wildcard pattern, like `/user/*`,
   to group those paths together.
   This is especially helpful when using an unsupported Servlet API-based framework. 
* Support duration suffixes (`ms`, `s` and `m`) for duration configuration options.
   Not using the duration suffix logs out a deprecation warning and will not be supported in future versions.
* Add ability to add multiple APM server URLs, which enables client-side load balancing.
   The configuration option `server_url` has been renamed to `server_urls` to reflect this change.
   However, `server_url` still works for backwards compatibility.
* The configuration option `service_name` is now optional.
   It defaults to the main class name,
   the name of the executed jar file (removing the version number),
   or the application server name (for example `tomcat-application`).
   In a lot of cases,
   you will still want to set the `service_name` explicitly.
   But it helps getting started and seeing data easier,
   as there are no required configuration options anymore.
   In the future we will most likely determine more useful application names for Servlet API-based applications.
