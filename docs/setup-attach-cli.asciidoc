[[setup-attach-cli]]
=== Automatic setup with `apm-agent-attach-standalone.jar`

NOTE: This installation method is in beta.

The `apm-agent-attach-standalone.jar` is a small Java program which attaches the Elastic APM Java agent to a specific JVM or to all JVMs of the same host it runs on.

This installation method does not require you to alter the configuration of your application server and can be used to conveniently instrument all JVMs on a particular host.

[float]
[[setup-attach-cli-supported-environments]]
==== Supported environments

On Unix operating systems, such as Linux and macOS, the attachment to HotSpot-based JVMs (like OpenJDK and Oracle JDK) and to OpenJ9 JVMs is supported.
The user that runs the attacher has to be the same as the one that runs the target JVM or has to have permissions to switch to that user.

On Windows, only HotSpot-based JVMs are supported.
The user that runs the attacher has to be the same as the one that runs the target JVM.

The target VM does not have to be the same as the one that starts the attacher.
That means it is possible to run the attacher with Java 7 and attach the agent to an application that runs under Java 11.
However, the type of the VM has to be the same:
It's not possible to attach to a J9 VM from a HotSpot-based VM and vice-versa.

[float]
[[setup-attach-cli-caveats]]
==== Caveats

The approach to mitigate `NoClassDefFoundError` s when used in OSGi containers (which includes most application servers) is experimental.
Versions prior to 1.18.0 don't support OSGi containers.

[float]
[[setup-attach-cli-download]]
==== Download

You can download the attach program from maven central:
link:https://search.maven.org/search?q=g:co.elastic.apm%20AND%20a:apm-agent-attach[maven central]

NOTE: As of version 1.9.0, you will have to download the `standalone` jar instead of the normal jar distribution.

[float]
[[setup-attach-cli-usage]]
==== Usage

Attaches the Elastic APM Java agent to a JVM with a specific PID or runs continuously and attaches to all running and starting JVMs which match the filters.
By default, this program will not attach the agent to any JVM.
An attachment is performed for a given JVM if any of the provided conditions are met.

Conditions can be added by using one of the following options: `--include-all`, `--include-cmd`, `--exclude-cmd`, `--include-user`, `--exclude-user`, `--include-pid`.
You have to specify at least one `--include-*` rule.

[source,bash]
----
java -jar apm-agent-attach-standalone.jar [--include-cmd <include_pattern>...]
       [--exclude-cmd <exclude_pattern>...] [--continuous]
       [--config <agent_config>... | --args-provider <args_provider_script>]
----

Example: The following command attaches the agent to all JVMs whose main class contains `MyApplication` or which are started from a jar file named `my-application.jar`.
It also makes the attacher run continuously so that it attaches the agent on starting JVMs which match the include pattern.
Additionally, it applies some <<configuration,configuration options>>.

[source,bash]
----
java -jar apm-agent-attach-standalone.jar \
    --include-cmd 'MyApplication' 'my-application.jar' \
    --continuous \
    --config service_name=my-cool-service \
    --config server_url=http://localhost:8200
----

[float]
[[setup-attach-cli-usage-list]]
===== List running JVMs

Lists all currently running JVMs, including their PID and their main class name or the path to their jar file.

[source,bash]
----
java -jar apm-agent-attach-standalone.jar --list
----

[float]
[[setup-attach-cli-usage-options]]
===== Options

*-l, --list*::
+
--
Lists all running JVMs.
Provides an output similar to `jps -l`.
--

*-v*::
+
--
When listing running JVMs, include the arguments passed to the JVM.
Provides an output similar to `jps -lv`.

NOTE: The JVM arguments may contain sensitive information, such as passwords provided via system properties.
--

*-c, --continuous*::
+
--
If provided, this program continuously runs and attaches to all running and starting JVMs which match the `--exclude` and `--include` filters.

NOTE: This option cannot be used in conjunction with `--pid`
--

*--include-all*::
+
--
Includes all JVMs for attachment.
--

*--include-user*::
+
--
Includes all JVMs for attachment that are running under the given operating system user.
Make sure that the user this program is running under is either the same user or has permissions to switch to this user.
--

*--exclude-user*::
+
--
Includes all JVMs for attachment that are not running under the given operating system user.
--

*--include-pid --pid <pid>*::
+
--
PID of the JVM to attach. If not provided, attaches to all currently running JVMs which match the --exclude and --include filters.
--

*--exclude-cmd <exclude_pattern>...*::
+
--
A list of regular expressions of fully qualified main class names or paths to JARs of applications or any JVM system property of the java process the java agent should not be attached to.
(Matches the output of `jps -lv`)
--

*--include-cmd <include_pattern>...*::
+
--
A list of regular expressions of fully qualified main class names or paths to JARs of applications or any JVM system property of the java process the java agent should be attached to.
(Matches the output of `jps -lv`)
--

*-a, --args <agent_arguments>*::
+
--
Deprecated in favor of --config.

If set, the arguments are used to configure the agent on the attached JVM (agentArguments of agentmain).

The syntax of the arguments is `key1=value1;key2=value1,value2`.
See <<configuration>> for all available configuration options.

NOTE: This option cannot be used in conjunction with `--args-provider`
--

*-C --config <key=value>...*::
+
--
This repeatable option sets one agent configuration option.

Example: `--config server_url=http://localhost:8200`
--

*-A, --args-provider <args_provider_script>*::
+
--
The name of a program which is called when a new JVM starts up.
The program gets the pid and the main class name or path to the JAR file as an argument
and returns an arg string which is used to configure the agent on the attached JVM (agentArguments of agentmain).
When returning a non-zero status code from this program, the agent will not be attached to the starting JVM.

The syntax of the arguments is `key1=value1;key2=value1,value2`.
See <<configuration>> for all available configuration options.

NOTE: This option cannot be used in conjunction with `--pid` and `--config`
--

*-w, --without-emulated-attach*::
+
--
Disables the emulated attach feature provided by Byte Buddy, this should be used as a workaround on some JDK/JREs
when runtime attachment fails.
--

*-g, --log-level <off|fatal|error|warn|info|debug|trace|all>*::
+
--
Sets the log level.
The logs are sent to stdout with an ECS JSON format.
--



[float]
[[setup-attach-cli-docker]]
==== Docker

Use this script to automatically attach to all docker containers running on a host.
This script does not return but continuously listens for starting containers which it also attaches to.

NOTE: This script is experimental and might not work with all containers.
Especially the `jq --raw-output .[0].Config.Cmd[0]) == java` might vary.

[source,bash]
.attach.sh
----
#!/usr/bin/env bash
set -ex

attach () {
    # only attempt attachment if this looks like a java container
    if [[ $(docker inspect ${container_id} | jq --raw-output .[0].Config.Cmd[0]) == java ]]
    then
        echo attaching to $(docker ps --no-trunc | grep ${container_id})
        docker cp ./apm-agent-attach-*-standalone.jar ${container_id}:/apm-agent-attach-standalone.jar
        docker exec ${container_id} java -jar /apm-agent-attach-standalone.jar --config
    fi
}

# attach to running containers
for container_id in $(docker ps --quiet --no-trunc) ; do
    attach
done

# listen for starting containers and attach to those
docker events --filter 'event=start' --format '{{.ID}}' |
while IFS= read -r container_id
do
    attach
done
----

[float]
[[setup-attach-cli-troubleshooting]]
==== Troubleshooting

If you get a message like `no main manifest attribute, in apm-agent-attach.jar`,
you are using the wrong artifact.
Use the one which ends in `-standalone.jar`.
