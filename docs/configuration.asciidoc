////
This file is auto generated

Please only make changes in configuration.asciidoc.ftl
////
[[configuration]]
== Configuration
To adapt the Elastic APM agent to your needs,
you can configure it using different configuration sources,
which have different naming conventions for the property key.
The first configuration sources override the configuration values of over the latter sources.

[arabic]
. {kibana-ref}/agent-configuration.html[Central configuration]
. Java system properties +
  All configuration keys are prefixed with `elastic.apm.`
. Environment variables +
  All configuration keys are in uppercase and prefixed with `ELASTIC_APM_`
. `elasticapm.properties` file +
  You can place a `elasticapm.properties` in the same directory the agent jar resides in.
  To customize the location, set the <<config-config-file>> option.
  No prefix is required for the configuration keys.

Configuration options marked with Dynamic true can be changed at runtime via configuration sources which support dynamic reloading.
{kibana-ref}/agent-configuration.html[Central configuration] and the `elasticapm.properties` file are such sources.
Java system properties can be dynamic as well by being set from within the application.

In order to get started with Elastic APM,
the most important configuration options are <<config-service-name>>,
<<config-server-urls>> and <<config-application-packages>>.
So a minimal version of a configuration might look like this:

[source,bash]
.System properties
----
-Delastic.apm.service_name=my-cool-service
-Delastic.apm.application_packages=org.example,org.another.example
-Delastic.apm.server_urls=http://localhost:8200
----

[source,properties]
.elasticapm.properties
----
service_name=my-cool-service
application_packages=org.example,org.another.example
server_urls=http://localhost:8200
----

[source,bash]
.Environment variables
----
ELASTIC_APM_SERVICE_NAME=my-cool-service
ELASTIC_APM_APPLICATION_PACKAGES=org.example,org.another.example
ELASTIC_APM_SERVER_URLS=http://localhost:8200
----

[float]
=== Option reference

This is a list of all configuration options grouped by their category.
Click on a key to get more information.

* <<config-core>>
** <<config-active>>
** <<config-instrument>>
** <<config-service-name>>
** <<config-service-node-name>>
** <<config-service-version>>
** <<config-hostname>>
** <<config-environment>>
** <<config-transaction-sample-rate>>
** <<config-transaction-max-spans>>
** <<config-sanitize-field-names>>
** <<config-disable-instrumentations>>
** <<config-unnest-exceptions>>
** <<config-ignore-exceptions>>
** <<config-global-labels>>
** <<config-trace-methods>>
** <<config-trace-methods-duration-threshold>>
** <<config-boot-delegation-packages>>
** <<config-central-config>>
** <<config-breakdown-metrics>>
** <<config-config-file>>
* <<config-http>>
** <<config-capture-body>>
** <<config-capture-body-content-types>>
** <<config-capture-headers>>
** <<config-ignore-urls>>
** <<config-ignore-user-agents>>
** <<config-use-path-as-transaction-name>>
** <<config-url-groups>>
* <<config-jax-rs>>
** <<config-enable-jaxrs-annotation-inheritance>>
** <<config-use-jaxrs-path-as-transaction-name>>
* <<config-jmx>>
** <<config-capture-jmx-metrics>>
* <<config-logging>>
** <<config-log-level>>
** <<config-log-file>>
** <<config-enable-log-correlation>>
* <<config-reporter>>
** <<config-secret-token>>
** <<config-server-urls>>
** <<config-server-timeout>>
** <<config-verify-server-cert>>
** <<config-max-queue-size>>
** <<config-include-process-args>>
** <<config-api-request-time>>
** <<config-api-request-size>>
** <<config-metrics-interval>>
** <<config-disable-metrics>>
* <<config-stacktrace>>
** <<config-application-packages>>
** <<config-stack-trace-limit>>
** <<config-span-frames-min-duration>>

[[config-core]]
=== Core configuration options
[float]
[[config-active]]
==== `active`

A boolean specifying if the agent should be active or not.
When active, the agent instruments incoming HTTP requests, tracks errors and collects and sends metrics.
When inactive, the agent works as a noop, not collecting data and not communicating with the APM sever.
As this is a reversible switch, agent threads are not being killed when inactivated, but they will be 
mostly idle in this state, so the overhead should be negligible.

You can use this setting to dynamically disable Elastic APM at runtime.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.active` | `active` | `ELASTIC_APM_ACTIVE`
|============

[float]
[[config-instrument]]
==== `instrument`

A boolean specifying if the agent should instrument the application to collect performance metrics for the app. When set to false, Elastic APM will not affect your application at all.

NOTE: Both active and instrument needs to be true for instrumentation to be running.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.instrument` | `instrument` | `ELASTIC_APM_INSTRUMENT`
|============

[float]
[[config-service-name]]
==== `service_name`

This is used to keep all the errors and transactions of your service together
and is the primary filter in the Elastic APM user interface.

The service name must conform to this regular expression: `^[a-zA-Z0-9 _-]+$`.
In less regexy terms:
Your service name must only contain characters from the ASCII alphabet, numbers, dashes, underscores and spaces.

NOTE: When relying on auto-discovery of the service name in Servlet environments (including Spring Boot),
there is currently a caveat related to metrics.
The consequence is that the 'Metrics' tab of a service does not show process-global metrics like CPU utilization.
The reason is that metrics are reported with the detected default service name for the JVM,
for example `tomcat-application`.
That is because there may be multiple web applications deployed to a single JVM/servlet container.
However, you can view those metrics by selecting the `tomcat-application` service name, for example.
Future versions of the Elastic APM stack will have better support for that scenario.
A workaround is to explicitly set the `service_name` which means all applications deployed to the same servlet container will have the same name
or to disable the corresponding `*-service-name` detecting instrumentations via <<config-disable-instrumentations>>.

NOTE: Service name auto discovery mechanisms require APM Server 7.0+.


[options="header"]
|============
| Default                          | Type                | Dynamic
| For Spring-based application, uses the `spring.application.name` property, if set.
For Servlet-based applications, uses the `display-name` of the `web.xml`, if available.
Falls back to the servlet context path the application is mapped to (unless mapped to the root context).
Falls back to the name of the main class or jar file.
If the service name is set explicitly, it overrides all of the above.
 | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.service_name` | `service_name` | `ELASTIC_APM_SERVICE_NAME`
|============

[float]
[[config-service-node-name]]
==== `service_node_name` (added[1.11.0])

If set, this name is used to distinguish between different nodes of a service, 
therefore it should be unique for each JVM within a service. 
If not set, data aggregations will be done based on a container ID (where valid) or on the reported 
hostname (automatically discovered or manually configured through <<config-hostname, `hostname`>>). 

NOTE: JVM metrics views rely on aggregations that are based on the service node name. 
If you have multiple JVMs installed on the same host reporting data for the same service name, 
you must set a unique node name for each in order to view metrics at the JVM level.

NOTE: Metrics views can utilize this configuration since APM Server 7.5


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.service_node_name` | `service_node_name` | `ELASTIC_APM_SERVICE_NODE_NAME`
|============

[float]
[[config-service-version]]
==== `service_version`

A version string for the currently deployed version of the service. If you donâ€™t version your deployments, the recommended value for this field is the commit identifier of the deployed revision, e.g. the output of git rev-parse HEAD.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.service_version` | `service_version` | `ELASTIC_APM_SERVICE_VERSION`
|============

[float]
[[config-hostname]]
==== `hostname` (added[1.10.0])

Allows for the reported hostname to be manually specified. If unset the hostname will be looked up.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.hostname` | `hostname` | `ELASTIC_APM_HOSTNAME`
|============

[float]
[[config-environment]]
==== `environment`

The name of the environment this service is deployed in, e.g. "production" or "staging".

Environments allow you to easily filter data on a global level in the APM UI.
It's important to be consistent when naming environments across agents.
See {kibana-ref}/filters.html#environment-selector[environment selector] in the Kibana UI for more information.

NOTE: This feature is fully supported in the APM UI in Kibana versions >= 7.2.
You must use the query bar to filter for a specific environment in versions prior to 7.2.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.environment` | `environment` | `ELASTIC_APM_ENVIRONMENT`
|============

[float]
[[config-transaction-sample-rate]]
==== `transaction_sample_rate` (performance)

By default, the agent will sample every transaction (e.g. request to your service). To reduce overhead and storage requirements, you can set the sample rate to a value between 0.0 and 1.0. We still record overall time and the result for unsampled transactions, but no context information, labels, or spans.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `1.0` | Double | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.transaction_sample_rate` | `transaction_sample_rate` | `ELASTIC_APM_TRANSACTION_SAMPLE_RATE`
|============

[float]
[[config-transaction-max-spans]]
==== `transaction_max_spans` (performance)

Limits the amount of spans that are recorded per transaction.

This is helpful in cases where a transaction creates a very high amount of spans (e.g. thousands of SQL queries).

Setting an upper limit will prevent overloading the agent and the APM server with too much work for such edge cases.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `500` | Integer | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.transaction_max_spans` | `transaction_max_spans` | `ELASTIC_APM_TRANSACTION_MAX_SPANS`
|============

[float]
[[config-sanitize-field-names]]
==== `sanitize_field_names` (security)

Sometimes it is necessary to sanitize the data sent to Elastic APM,
e.g. remove sensitive data.

Configure a list of wildcard patterns of field names which should be sanitized.
These apply for example to HTTP headers and `application/x-www-form-urlencoded` data.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

NOTE: Data in the query string is considered non-sensitive,
as sensitive information should not be sent in the query string.
See https://www.owasp.org/index.php/Information_exposure_through_query_strings_in_url for more information

NOTE: Review the data captured by Elastic APM carefully to make sure it does not capture sensitive information.
If you do find sensitive data in the Elasticsearch index,
you should add an additional entry to this list (make sure to also include the default entries).


[options="header"]
|============
| Default                          | Type                | Dynamic
| `password, passwd, pwd, secret, *key, *token*, *session*, *credit*, *card*, authorization, set-cookie` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.sanitize_field_names` | `sanitize_field_names` | `ELASTIC_APM_SANITIZE_FIELD_NAMES`
|============

[float]
[[config-disable-instrumentations]]
==== `disable_instrumentations`

A list of instrumentations which should be disabled.
Valid options are `annotations`, `apache-httpclient`, `asynchttpclient`, `concurrent`, `elasticsearch-restclient`, `exception-handler`, `executor`, `hibernate-search`, `http-client`, `incubating`, `jax-rs`, `jax-ws`, `jdbc`, `jedis`, `jms`, `jsf`, `logging`, `mule`, `okhttp`, `opentracing`, `public-api`, `quartz`, `redis`, `render`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `urlconnection`.
If you want to try out incubating features,
set the value to an empty string.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `incubating` | Collection | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.disable_instrumentations` | `disable_instrumentations` | `ELASTIC_APM_DISABLE_INSTRUMENTATIONS`
|============

[float]
[[config-unnest-exceptions]]
==== `unnest_exceptions`

When reporting exceptions,
un-nests the exceptions matching the wildcard pattern.
This can come in handy for Spring's `org.springframework.web.util.NestedServletException`,
for example.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `(?-i)*Nested*Exception` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.unnest_exceptions` | `unnest_exceptions` | `ELASTIC_APM_UNNEST_EXCEPTIONS`
|============

[float]
[[config-ignore-exceptions]]
==== `ignore_exceptions` (added[1.11.0])

A list of exceptions that should be ignored and not reported as errors.
This allows to ignore exceptions thrown in regular control flow that are not actual errors

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

Examples:

 - `com.mycompany.ExceptionToIgnore`: using fully qualified name
 - `*ExceptionToIgnore`: using wildcard to avoid package name
 - `*exceptiontoignore`: case-insensitive by default

NOTE: Exception inheritance is not supported, thus you have to explicitly list all the thrown exception types


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.ignore_exceptions` | `ignore_exceptions` | `ELASTIC_APM_IGNORE_EXCEPTIONS`
|============

[float]
[[config-global-labels]]
==== `global_labels` (added[1.7.0, Requires APM Server 7.2+])

Labels added to all events, with the format `key=value[,key=value[,...]]`.
Any labels set by application via the API will override global labels with the same keys.

NOTE: This feature requires APM Server 7.2+


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | Map | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.global_labels` | `global_labels` | `ELASTIC_APM_GLOBAL_LABELS`
|============

[float]
[[config-trace-methods]]
==== `trace_methods` (added[1.3.0,Enhancements in 1.4.0, 1.7.0 and 1.9.0])

A list of methods for with to create a transaction or span.

The syntax is `modifier @fully.qualified.annotation.Name fully.qualified.class.Name#methodName(fully.qualified.parameter.Type)`.
You can use wildcards for the class name, the annotation name, the method name and the parameter types.
The `*` wildcard matches zero or more characters.
That means that a wildcard in a package name also matches sub-packages
Specifying an annotation is optional.
When matching for annotations, only classes that are annotated with the specified annotation are considered.
You can also match for meta-annotations by specifying the annotation with an @@ prefix. This will match classes that are annotated with an annotation that is itself annotated with the given meta-annotation.
Specifying the parameter types is optional.
The `modifier` can be omitted or one of `public`, `protected`, `private` or `*`.

A few examples:

 - `org.example.*` added[1.4.0,Omitting the method is possible since 1.4.0]
 - `org.example.*#*` (before 1.4.0, you need to specify a method matcher)
 - `org.example.MyClass#myMethod`
 - `org.example.MyClass#myMethod()`
 - `org.example.MyClass#myMethod(java.lang.String)`
 - `org.example.MyClass#myMe*od(java.lang.String, int)`
 - `private org.example.MyClass#myMe*od(java.lang.String, *)`
 - `* org.example.MyClas*#myMe*od(*.String, int[])`
 - `public org.example.services.*Service#*`
 - `public @java.inject.ApplicationScoped org.example.*`
 - `public @java.inject.* org.example.*`
 - `public @@javax.enterprise.context.NormalScope org.example.*`

NOTE: Only use wildcards if necessary.
The more methods you match the more overhead will be caused by the agent.
Also note that there is a maximum amount of spans per transaction (see <<config-transaction-max-spans, `transaction_max_spans`>>).

NOTE: The agent will create stack traces for spans which took longer than
<<config-span-frames-min-duration, `span_frames_min_duration`>>.
When tracing a large number of methods (for example by using wildcards),
this may lead to high overhead.
Consider increasing the threshold or disabling stack trace collection altogether.

Common configurations:

Trace all public methods in CDI-Annotated beans:

----
public @@javax.enterprise.context.NormalScope your.application.package.*
public @@javax.inject.Scope your.application.package.*
----



[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.trace_methods` | `trace_methods` | `ELASTIC_APM_TRACE_METHODS`
|============

[float]
[[config-trace-methods-duration-threshold]]
==== `trace_methods_duration_threshold` (added[1.7.0])

If <<config-trace-methods, `trace_methods`>> config option is set, provides a threshold to limit spans based on 
duration. When set to a value greater than 0, spans representing methods traced based on `trace_methods` will be discarded by default.
Such methods will be traced and reported if one of the following applies:
 - This method's duration crossed the configured threshold.
 - This method ended with Exception.
 - A method executed as part of the execution of this method crossed the threshold or ended with Exception.
 - A "forcibly-traced method" (e.g. DB queries, HTTP exits, custom) was executed during the execution of this method.
Set to 0 to disable.

NOTE: Transaction are never discarded, regardless of their duration. This configuration affects only spans.
In order not to break span references, all spans leading to an async operations are never discarded, regardless 
of their duration.


Supports the duration suffixes `ms`, `s` and `m`.
Example: `0ms`.
The default unit for this option is `ms`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `0ms` | TimeDuration | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.trace_methods_duration_threshold` | `trace_methods_duration_threshold` | `ELASTIC_APM_TRACE_METHODS_DURATION_THRESHOLD`
|============

[float]
[[config-boot-delegation-packages]]
==== `boot_delegation_packages` (added[1.7.0])

A comma-separated list of packages to be appended to the boot delegation system property. 
If set with an empty string, nothing will be appended to the boot delegation system property.
Values to set in known environments:

Nexus:

----
boot_delegation_packages=com.sun.*, javax.transaction, javax.transaction.*, javax.xml.crypto, javax.xml.crypto.*, sun.*,co.elastic.apm.agent.*
----

Pentaho and RedHat JBoss Fuse:

----
boot_delegation_packages=org.apache.karaf.jaas.boot, org.apache.karaf.jaas.boot.principal, org.apache.karaf.management.boot, sun.*, com.sun.*, javax.transaction, javax.transaction.*, javax.xml.crypto, javax.xml.crypto.*, org.apache.xerces.jaxp.datatype, org.apache.xerces.stax, org.apache.xerces.parsers, org.apache.xerces.jaxp, org.apache.xerces.jaxp.validation, org.apache.xerces.dom, co.elastic.apm.agent.*
----



[options="header"]
|============
| Default                          | Type                | Dynamic
| `co.elastic.apm.agent.*` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.boot_delegation_packages` | `boot_delegation_packages` | `ELASTIC_APM_BOOT_DELEGATION_PACKAGES`
|============

[float]
[[config-central-config]]
==== `central_config` (added[1.8.0])

When enabled, the agent will make periodic requests to the APM Server to fetch updated configuration.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.central_config` | `central_config` | `ELASTIC_APM_CENTRAL_CONFIG`
|============

[float]
[[config-breakdown-metrics]]
==== `breakdown_metrics` (added[1.8.0])

Disables the collection of breakdown metrics (`span.self_time`)


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.breakdown_metrics` | `breakdown_metrics` | `ELASTIC_APM_BREAKDOWN_METRICS`
|============

[float]
[[config-config-file]]
==== `config_file` (added[1.8.0])

Sets the path of the agent config file.
The special value `_AGENT_HOME_` is a placeholder for the folder the elastic-apm-agent.jar is in.
The location can either be in the classpath of the application (when using the attacher API) or on the file system.
NOTE: this option can only be set via system properties, environment variables or the attacher options.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `_AGENT_HOME_/elasticapm.properties` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.config_file` | `config_file` | `ELASTIC_APM_CONFIG_FILE`
|============

[[config-http]]
=== HTTP configuration options
[float]
[[config-capture-body]]
==== `capture_body` (performance)

For transactions that are HTTP requests, the Java agent can optionally capture the request body (e.g. POST variables).

If the request has a body and this setting is disabled, the body will be shown as [REDACTED].

This option is case-insensitive.

NOTE: Currently, only UTF-8 encoded plain text content types are supported.
The option <<config-capture-body-content-types>> determines which content types are captured.

WARNING: Request bodies often contain sensitive values like passwords, credit card numbers etc.
If your service handles data like this, we advise to only enable this feature with care.
Turning on body capturing can also significantly increase the overhead in terms of heap usage,
network utilisation and Elasticsearch index size.

Valid options: `off`, `errors`, `transactions`, `all`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `OFF` | EventType | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_body` | `capture_body` | `ELASTIC_APM_CAPTURE_BODY`
|============

[float]
[[config-capture-body-content-types]]
==== `capture_body_content_types` (added[1.5.0] performance)

Configures which content types should be recorded.

The defaults end with a wildcard so that content types like `text/plain; charset=utf-8` are captured as well.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `application/x-www-form-urlencoded*, text/*, application/json*, application/xml*` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_body_content_types` | `capture_body_content_types` | `ELASTIC_APM_CAPTURE_BODY_CONTENT_TYPES`
|============

[float]
[[config-capture-headers]]
==== `capture_headers` (performance)

If set to `true`,
the agent will capture request and response headers, including cookies.

NOTE: Setting this to `false` reduces network bandwidth, disk space and object allocations.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_headers` | `capture_headers` | `ELASTIC_APM_CAPTURE_HEADERS`
|============

[float]
[[config-ignore-urls]]
==== `ignore_urls`

Used to restrict requests to certain URLs from being instrumented.

This property should be set to an array containing one or more strings.
When an incoming HTTP request is detected, its URL will be tested against each element in this list.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

NOTE: All errors that are captured during a request to an ignored URL are still sent to the APM Server regardless of this setting.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `/VAADIN/*, /heartbeat*, /favicon.ico, *.js, *.css, *.jpg, *.jpeg, *.png, *.gif, *.webp, *.svg, *.woff, *.woff2` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.ignore_urls` | `ignore_urls` | `ELASTIC_APM_IGNORE_URLS`
|============

[float]
[[config-ignore-user-agents]]
==== `ignore_user_agents`

Used to restrict requests from certain User-Agents from being instrumented.

When an incoming HTTP request is detected,
the User-Agent from the request headers will be tested against each element in this list.
Example: `curl/*`, `*pingdom*`

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

NOTE: All errors that are captured during a request by an ignored user agent are still sent to the APM Server regardless of this setting.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.ignore_user_agents` | `ignore_user_agents` | `ELASTIC_APM_IGNORE_USER_AGENTS`
|============

[float]
[[config-use-path-as-transaction-name]]
==== `use_path_as_transaction_name` (experimental)

If set to `true`,
transaction names of unsupported Servlet API-based frameworks will be in the form of `$method $path` instead of just `$method`.

WARNING: If your URLs contain path parameters like `/user/$userId`,
you should be very careful when enabling this flag,
as it can lead to an explosion of transaction groups.
Take a look at the `url_groups` option on how to mitigate this problem by grouping URLs together.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.use_path_as_transaction_name` | `use_path_as_transaction_name` | `ELASTIC_APM_USE_PATH_AS_TRANSACTION_NAME`
|============

[float]
[[config-url-groups]]
==== `url_groups`

This option is only considered, when `use_path_as_transaction_name` is active.

With this option, you can group several URL paths together by using a wildcard expression like `/user/*`.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.url_groups` | `url_groups` | `ELASTIC_APM_URL_GROUPS`
|============

[[config-jax-rs]]
=== JAX-RS configuration options
[float]
[[config-enable-jaxrs-annotation-inheritance]]
==== `enable_jaxrs_annotation_inheritance` (performance)

By default, the agent will scan for @Path annotations on the whole class hierarchy, recognizing a class as a JAX-RS resource if the class or any of its superclasses/interfaces has a class level @Path annotation.
If your application does not use @Path annotation inheritance, set this property to 'false' to only scan for direct @Path annotations. This can improve the startup time of the agent.



[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.enable_jaxrs_annotation_inheritance` | `enable_jaxrs_annotation_inheritance` | `ELASTIC_APM_ENABLE_JAXRS_ANNOTATION_INHERITANCE`
|============

[float]
[[config-use-jaxrs-path-as-transaction-name]]
==== `use_jaxrs_path_as_transaction_name` (added[1.8.0])

By default, the agent will use `ClassName#methodName` for the transaction name of JAX-RS requests.
If you want to use the URI template from the `@Path` annotation, set the value to `true`.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.use_jaxrs_path_as_transaction_name` | `use_jaxrs_path_as_transaction_name` | `ELASTIC_APM_USE_JAXRS_PATH_AS_TRANSACTION_NAME`
|============

[[config-jmx]]
=== JMX configuration options
[float]
[[config-capture-jmx-metrics]]
==== `capture_jmx_metrics` (added[1.10.0])

Report metrics from JMX to the APM Server

Can contain multiple comma separated JMX metric definitions:

----
object_name[<JMX object name pattern>] attribute[<JMX attribute>:metric_name=<optional metric name>]
----

* `object_name`:
+
For more information about the JMX object name pattern syntax,
see the https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName` Javadocs].
* `attribute`:
+
The name of the JMX attribute.
The JMX value has to be either a `Number` or a composite where the composite items are numbers.
This element can be defined multiple times.
An attribute can contain optional properties.
The syntax for that is the same as for https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName`].
+
** `metric_name`:
+
A property within `attribute`.
This is the name under which the metric will be stored.
Setting this is optional and will be the same as the `attribute` if not set.
Note that all JMX metric names will be prefixed with `jvm.jmx.` by the agent.

The agent creates `labels` for each link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html#getKeyPropertyList()[JMX key property] such as `type` and `name`.

The link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[JMX object name pattern] supports wildcards.
In this example, the agent will create a metricset for each memory pool `name` (such as `G1 Old Generation` and `G1 Young Generation`)

----
object_name[java.lang:type=GarbageCollector,name=*] attribute[CollectionCount:metric_name=collection_count] attribute[CollectionTime]
----

The resulting documents in Elasticsearch look similar to these (metadata omitted for brevity):

[source,json]
----
{
  "@timestamp": "2019-08-20T16:51:07.512Z",
  "jvm": {
    "jmx": {
      "collection_count": 0,
      "CollectionTime":   0
    }
  },
  "labels": {
    "type": "GarbageCollector",
    "name": "G1 Old Generation"
  }
}
----

[source,json]
----
{
  "@timestamp": "2019-08-20T16:51:07.512Z",
  "jvm": {
    "jmx": {
      "collection_count": 2,
      "CollectionTime":  11
    }
  },
  "labels": {
    "type": "GarbageCollector",
    "name": "G1 Young Generation"
  }
}
----


The agent also supports composite values for the attribute value.
In this example, `HeapMemoryUsage` is a composite value, consisting of `committed`, `init`, `used` and `max`.
----
object_name[java.lang:type=Memory] attribute[HeapMemoryUsage:metric_name=heap] 
----

The resulting documents in Elasticsearch look similar to this:

[source,json]
----
{
  "@timestamp": "2019-08-20T16:51:07.512Z",
  "jvm": {
    "jmx": {
      "heap": {
        "max":      4294967296,
        "init":      268435456,
        "committed": 268435456,
        "used":       22404496
      }
    }
  },
  "labels": {
    "type": "Memory"
  }
}
----



[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_jmx_metrics` | `capture_jmx_metrics` | `ELASTIC_APM_CAPTURE_JMX_METRICS`
|============

[[config-logging]]
=== Logging configuration options
[float]
[[config-log-level]]
==== `log_level`

Sets the logging level for the agent.

This option is case-insensitive.

Valid options: `ERROR`, `WARN`, `INFO`, `DEBUG`, `TRACE`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `INFO` | Level | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_level` | `log_level` | `ELASTIC_APM_LOG_LEVEL`
|============

[float]
[[config-log-file]]
==== `log_file`

Sets the path of the agent logs.
The special value `_AGENT_HOME_` is a placeholder for the folder the elastic-apm-agent.jar is in.
Example: `_AGENT_HOME_/logs/elastic-apm.log`

When set to the special value 'System.out',
the logs are sent to standard out.

NOTE: When logging to a file,
it's content is deleted when the application starts.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `System.out` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_file` | `log_file` | `ELASTIC_APM_LOG_FILE`
|============

[float]
[[config-enable-log-correlation]]
==== `enable_log_correlation`

A boolean specifying if the agent should integrate into SLF4J's https://www.slf4j.org/api/org/slf4j/MDC.html[MDC] to enable trace-log correlation.
If set to `true`, the agent will set the `trace.id` and `transaction.id` for the currently active spans and transactions to the MDC.
See <<log-correlation>> for more details.

NOTE: While it's allowed to enable this setting at runtime, you can't disable it without a restart.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.enable_log_correlation` | `enable_log_correlation` | `ELASTIC_APM_ENABLE_LOG_CORRELATION`
|============

[[config-reporter]]
=== Reporter configuration options
[float]
[[config-secret-token]]
==== `secret_token`

This string is used to ensure that only your agents can send data to your APM server.

Both the agents and the APM server have to be configured with the same secret token.
Use if APM Server requires a token.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.secret_token` | `secret_token` | `ELASTIC_APM_SECRET_TOKEN`
|============

[float]
[[config-server-urls]]
==== `server_urls`

The URLs must be fully qualified, including protocol (http or https) and port.

Fails over to the next APM Server URL in the event of connection errors.
Achieves load-balancing by shuffling the list of configured URLs.
When multiple agents are active, they'll tend towards spreading evenly across the set of servers due to randomization.

If outgoing HTTP traffic has to go through a proxy,you can use the Java system properties `http.proxyHost` and `http.proxyPort` to set that up.
See also [Java's proxy documentation](https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html) for more information.

NOTE: This configuration can only be reloaded dynamically as of 1.8.0


[options="header"]
|============
| Default                          | Type                | Dynamic
| `http://localhost:8200` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.server_urls` | `server_urls` | `ELASTIC_APM_SERVER_URLS`
|============

[float]
[[config-server-timeout]]
==== `server_timeout`

If a request to the APM server takes longer than the configured timeout,
the request is cancelled and the event (exception or transaction) is discarded.
Set to 0 to disable timeouts.

WARNING: If timeouts are disabled or set to a high value, your app could experience memory issues if the APM server times out.

Supports the duration suffixes `ms`, `s` and `m`.
Example: `5s`.
The default unit for this option is `s`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `5s` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.server_timeout` | `server_timeout` | `ELASTIC_APM_SERVER_TIMEOUT`
|============

[float]
[[config-verify-server-cert]]
==== `verify_server_cert`

By default, the agent verifies the SSL certificate if you use an HTTPS connection to the APM server.

Verification can be disabled by changing this setting to false.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.verify_server_cert` | `verify_server_cert` | `ELASTIC_APM_VERIFY_SERVER_CERT`
|============

[float]
[[config-max-queue-size]]
==== `max_queue_size`

The maximum size of buffered events.

Events like transactions and spans are buffered when the agent can't keep up with sending them to the APM Server or if the APM server is down.

If the queue is full, events are rejected which means you will lose transactions and spans in that case.
This guards the application from crashing in case the APM server is unavailable for a longer period of time.

A lower value will decrease the heap overhead of the agent,
while a higher value makes it less likely to lose events in case of a temporary spike in throughput.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `512` | Integer | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.max_queue_size` | `max_queue_size` | `ELASTIC_APM_MAX_QUEUE_SIZE`
|============

[float]
[[config-include-process-args]]
==== `include_process_args`

Whether each transaction should have the process arguments attached.
Disabled by default to save disk space.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.include_process_args` | `include_process_args` | `ELASTIC_APM_INCLUDE_PROCESS_ARGS`
|============

[float]
[[config-api-request-time]]
==== `api_request_time`

Maximum time to keep an HTTP request to the APM Server open for.

NOTE: This value has to be lower than the APM Server's `read_timeout` setting.

Supports the duration suffixes `ms`, `s` and `m`.
Example: `10s`.
The default unit for this option is `s`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `10s` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.api_request_time` | `api_request_time` | `ELASTIC_APM_API_REQUEST_TIME`
|============

[float]
[[config-api-request-size]]
==== `api_request_size`

The maximum total compressed size of the request body which is sent to the APM server intake api via a chunked encoding (HTTP streaming).
Note that a small overshoot is possible.

Allowed byte units are `b`, `kb` and `mb`. `1kb` is equal to `1024b`.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `768kb` | ByteValue | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.api_request_size` | `api_request_size` | `ELASTIC_APM_API_REQUEST_SIZE`
|============

[float]
[[config-metrics-interval]]
==== `metrics_interval` (added[1.3.0])

The interval at which the agent sends metrics to the APM Server.
Must be at least `1s`.
Set to `0s` to deactivate.

Supports the duration suffixes `ms`, `s` and `m`.
Example: `30s`.
The default unit for this option is `s`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `30s` | TimeDuration | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.metrics_interval` | `metrics_interval` | `ELASTIC_APM_METRICS_INTERVAL`
|============

[float]
[[config-disable-metrics]]
==== `disable_metrics` (added[1.3.0])

Disables the collection of certain metrics.
If the name of a metric matches any of the wildcard expressions, it will not be collected.
Example: `foo.*,bar.*`

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.disable_metrics` | `disable_metrics` | `ELASTIC_APM_DISABLE_METRICS`
|============

[[config-stacktrace]]
=== Stacktrace configuration options
[float]
[[config-application-packages]]
==== `application_packages`

Used to determine whether a stack trace frame is an 'in-app frame' or a 'library frame'.
This allows the UI to collapse the stack frames of library code,
and highlight the stack frames that originate from your application.
Multiple root packages can be set as a comma-separated list;
there's no need to configure sub-packages.
Because this setting helps determine which classes to scan on startup,
setting this option can also improve startup time.

You must set this option in order to use the API annotations `@CaptureTransaction` and `@CaptureSpan`.

**Example**

Most Java projects have a root package, e.g. `com.myproject`. You can set the application package using Java system properties:
`-Delastic.apm.application_packages=com.myproject`

If you are only interested in specific subpackages, you can separate them with commas:
`-Delastic.apm.application_packages=com.myproject.api,com.myproject.impl`


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | Collection | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.application_packages` | `application_packages` | `ELASTIC_APM_APPLICATION_PACKAGES`
|============

[float]
[[config-stack-trace-limit]]
==== `stack_trace_limit` (performance)

Setting it to 0 will disable stack trace collection. Any positive integer value will be used as the maximum number of frames to collect. Setting it -1 means that all frames will be collected.


[options="header"]
|============
| Default                          | Type                | Dynamic
| `50` | Integer | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stack_trace_limit` | `stack_trace_limit` | `ELASTIC_APM_STACK_TRACE_LIMIT`
|============

[float]
[[config-span-frames-min-duration]]
==== `span_frames_min_duration` (performance)

In its default settings, the APM agent will collect a stack trace with every recorded span.
While this is very helpful to find the exact place in your code that causes the span, collecting this stack trace does have some overhead. 
When setting this option to a negative value, like `-1ms`, stack traces will be collected for all spans. Setting it to a positive value, e.g. `5ms`, will limit stack trace collection to spans with durations equal to or longer than the given value, e.g. 5 milliseconds.

To disable stack trace collection for spans completely, set the value to `0ms`.

Supports the duration suffixes `ms`, `s` and `m`.
Example: `5ms`.
The default unit for this option is `ms`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `5ms` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.span_frames_min_duration` | `span_frames_min_duration` | `ELASTIC_APM_SPAN_FRAMES_MIN_DURATION`
|============



[[config-reference-properties-file]]
=== Property file reference

[source,properties]
.elasticapm.properties
----
############################################
# Core                                     #
############################################

# A boolean specifying if the agent should be active or not.
# When active, the agent instruments incoming HTTP requests, tracks errors and collects and sends metrics.
# When inactive, the agent works as a noop, not collecting data and not communicating with the APM sever.
# As this is a reversible switch, agent threads are not being killed when inactivated, but they will be 
# mostly idle in this state, so the overhead should be negligible.
# 
# You can use this setting to dynamically disable Elastic APM at runtime.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# active=true

# A boolean specifying if the agent should instrument the application to collect performance metrics for the app. When set to false, Elastic APM will not affect your application at all.
# 
# NOTE: Both active and instrument needs to be true for instrumentation to be running.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# instrument=true

# The name of your service
#
# This is used to keep all the errors and transactions of your service together
# and is the primary filter in the Elastic APM user interface.
# 
# The service name must conform to this regular expression: `^[a-zA-Z0-9 _-]+$`.
# In less regexy terms:
# Your service name must only contain characters from the ASCII alphabet, numbers, dashes, underscores and spaces.
# 
# NOTE: When relying on auto-discovery of the service name in Servlet environments (including Spring Boot),
# there is currently a caveat related to metrics.
# The consequence is that the 'Metrics' tab of a service does not show process-global metrics like CPU utilization.
# The reason is that metrics are reported with the detected default service name for the JVM,
# for example `tomcat-application`.
# That is because there may be multiple web applications deployed to a single JVM/servlet container.
# However, you can view those metrics by selecting the `tomcat-application` service name, for example.
# Future versions of the Elastic APM stack will have better support for that scenario.
# A workaround is to explicitly set the `service_name` which means all applications deployed to the same servlet container will have the same name
# or to disable the corresponding `*-service-name` detecting instrumentations via <<config-disable-instrumentations>>.
# 
# NOTE: Service name auto discovery mechanisms require APM Server 7.0+.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: For Spring-based application, uses the `spring.application.name` property, if set.
# For Servlet-based applications, uses the `display-name` of the `web.xml`, if available.
# Falls back to the servlet context path the application is mapped to (unless mapped to the root context).
# Falls back to the name of the main class or jar file.
# If the service name is set explicitly, it overrides all of the above.
# 
#
# service_name=

# A unique name for the service node
#
# If set, this name is used to distinguish between different nodes of a service, 
# therefore it should be unique for each JVM within a service. 
# If not set, data aggregations will be done based on a container ID (where valid) or on the reported 
# hostname (automatically discovered or manually configured through <<config-hostname, `hostname`>>). 
# 
# NOTE: JVM metrics views rely on aggregations that are based on the service node name. 
# If you have multiple JVMs installed on the same host reporting data for the same service name, 
# you must set a unique node name for each in order to view metrics at the JVM level.
# 
# NOTE: Metrics views can utilize this configuration since APM Server 7.5
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# service_node_name=

# A version string for the currently deployed version of the service. If you donâ€™t version your deployments, the recommended value for this field is the commit identifier of the deployed revision, e.g. the output of git rev-parse HEAD.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# service_version=

# Allows for the reported hostname to be manually specified. If unset the hostname will be looked up.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# hostname=

# The name of the environment this service is deployed in, e.g. "production" or "staging".
# 
# Environments allow you to easily filter data on a global level in the APM UI.
# It's important to be consistent when naming environments across agents.
# See {kibana-ref}/filters.html#environment-selector[environment selector] in the Kibana UI for more information.
# 
# NOTE: This feature is fully supported in the APM UI in Kibana versions >= 7.2.
# You must use the query bar to filter for a specific environment in versions prior to 7.2.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# environment=

# By default, the agent will sample every transaction (e.g. request to your service). To reduce overhead and storage requirements, you can set the sample rate to a value between 0.0 and 1.0. We still record overall time and the result for unsampled transactions, but no context information, labels, or spans.
#
# This setting can be changed at runtime
# Type: Double
# Default value: 1.0
#
# transaction_sample_rate=1.0

# Limits the amount of spans that are recorded per transaction.
# 
# This is helpful in cases where a transaction creates a very high amount of spans (e.g. thousands of SQL queries).
# 
# Setting an upper limit will prevent overloading the agent and the APM server with too much work for such edge cases.
#
# This setting can be changed at runtime
# Type: Integer
# Default value: 500
#
# transaction_max_spans=500

# Sometimes it is necessary to sanitize the data sent to Elastic APM,
# e.g. remove sensitive data.
# 
# Configure a list of wildcard patterns of field names which should be sanitized.
# These apply for example to HTTP headers and `application/x-www-form-urlencoded` data.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
# 
# NOTE: Data in the query string is considered non-sensitive,
# as sensitive information should not be sent in the query string.
# See https://www.owasp.org/index.php/Information_exposure_through_query_strings_in_url for more information
# 
# NOTE: Review the data captured by Elastic APM carefully to make sure it does not capture sensitive information.
# If you do find sensitive data in the Elasticsearch index,
# you should add an additional entry to this list (make sure to also include the default entries).
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: password,passwd,pwd,secret,*key,*token*,*session*,*credit*,*card*,authorization,set-cookie
#
# sanitize_field_names=password,passwd,pwd,secret,*key,*token*,*session*,*credit*,*card*,authorization,set-cookie

# A list of instrumentations which should be disabled.
# Valid options are `annotations`, `apache-httpclient`, `asynchttpclient`, `concurrent`, `elasticsearch-restclient`, `exception-handler`, `executor`, `hibernate-search`, `http-client`, `incubating`, `jax-rs`, `jax-ws`, `jdbc`, `jedis`, `jms`, `jsf`, `logging`, `mule`, `okhttp`, `opentracing`, `public-api`, `quartz`, `redis`, `render`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-input-stream`, `slf4j`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `urlconnection`.
# If you want to try out incubating features,
# set the value to an empty string.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: comma separated list
# Default value: incubating
#
# disable_instrumentations=incubating

# When reporting exceptions,
# un-nests the exceptions matching the wildcard pattern.
# This can come in handy for Spring's `org.springframework.web.util.NestedServletException`,
# for example.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: (?-i)*Nested*Exception
#
# unnest_exceptions=(?-i)*Nested*Exception

# A list of exceptions that should be ignored and not reported as errors.
# This allows to ignore exceptions thrown in regular control flow that are not actual errors
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
# 
# Examples:
# 
#  - `com.mycompany.ExceptionToIgnore`: using fully qualified name
#  - `*ExceptionToIgnore`: using wildcard to avoid package name
#  - `*exceptiontoignore`: case-insensitive by default
# 
# NOTE: Exception inheritance is not supported, thus you have to explicitly list all the thrown exception types
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# ignore_exceptions=

# Labels added to all events, with the format `key=value[,key=value[,...]]`.
# Any labels set by application via the API will override global labels with the same keys.
# 
# NOTE: This feature requires APM Server 7.2+
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Map
# Default value: 
#
# global_labels=

# A list of methods for with to create a transaction or span.
# 
# The syntax is `modifier @fully.qualified.annotation.Name fully.qualified.class.Name#methodName(fully.qualified.parameter.Type)`.
# You can use wildcards for the class name, the annotation name, the method name and the parameter types.
# The `*` wildcard matches zero or more characters.
# That means that a wildcard in a package name also matches sub-packages
# Specifying an annotation is optional.
# When matching for annotations, only classes that are annotated with the specified annotation are considered.
# You can also match for meta-annotations by specifying the annotation with an @@ prefix. This will match classes that are annotated with an annotation that is itself annotated with the given meta-annotation.
# Specifying the parameter types is optional.
# The `modifier` can be omitted or one of `public`, `protected`, `private` or `*`.
# 
# A few examples:
# 
#  - `org.example.*` added[1.4.0,Omitting the method is possible since 1.4.0]
#  - `org.example.*#*` (before 1.4.0, you need to specify a method matcher)
#  - `org.example.MyClass#myMethod`
#  - `org.example.MyClass#myMethod()`
#  - `org.example.MyClass#myMethod(java.lang.String)`
#  - `org.example.MyClass#myMe*od(java.lang.String, int)`
#  - `private org.example.MyClass#myMe*od(java.lang.String, *)`
#  - `* org.example.MyClas*#myMe*od(*.String, int[])`
#  - `public org.example.services.*Service#*`
#  - `public @java.inject.ApplicationScoped org.example.*`
#  - `public @java.inject.* org.example.*`
#  - `public @@javax.enterprise.context.NormalScope org.example.*`
# 
# NOTE: Only use wildcards if necessary.
# The more methods you match the more overhead will be caused by the agent.
# Also note that there is a maximum amount of spans per transaction (see <<config-transaction-max-spans, `transaction_max_spans`>>).
# 
# NOTE: The agent will create stack traces for spans which took longer than
# <<config-span-frames-min-duration, `span_frames_min_duration`>>.
# When tracing a large number of methods (for example by using wildcards),
# this may lead to high overhead.
# Consider increasing the threshold or disabling stack trace collection altogether.
# 
# Common configurations:
# 
# Trace all public methods in CDI-Annotated beans:
# 
# ----
# public @@javax.enterprise.context.NormalScope your.application.package.*
# public @@javax.inject.Scope your.application.package.*
# ----
# 
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: comma separated list
# Default value: 
#
# trace_methods=

# If <<config-trace-methods, `trace_methods`>> config option is set, provides a threshold to limit spans based on 
# duration. When set to a value greater than 0, spans representing methods traced based on `trace_methods` will be discarded by default.
# Such methods will be traced and reported if one of the following applies:
#  - This method's duration crossed the configured threshold.
#  - This method ended with Exception.
#  - A method executed as part of the execution of this method crossed the threshold or ended with Exception.
#  - A "forcibly-traced method" (e.g. DB queries, HTTP exits, custom) was executed during the execution of this method.
# Set to 0 to disable.
# 
# NOTE: Transaction are never discarded, regardless of their duration. This configuration affects only spans.
# In order not to break span references, all spans leading to an async operations are never discarded, regardless 
# of their duration.
# 
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 0ms.
# The default unit for this option is ms.
# Default value: 0ms
#
# trace_methods_duration_threshold=0ms

# A comma-separated list of packages to be appended to the boot delegation system property. 
# If set with an empty string, nothing will be appended to the boot delegation system property.
# Values to set in known environments:
# 
# Nexus:
# 
# ----
# boot_delegation_packages=com.sun.*, javax.transaction, javax.transaction.*, javax.xml.crypto, javax.xml.crypto.*, sun.*,co.elastic.apm.agent.*
# ----
# 
# Pentaho and RedHat JBoss Fuse:
# 
# ----
# boot_delegation_packages=org.apache.karaf.jaas.boot, org.apache.karaf.jaas.boot.principal, org.apache.karaf.management.boot, sun.*, com.sun.*, javax.transaction, javax.transaction.*, javax.xml.crypto, javax.xml.crypto.*, org.apache.xerces.jaxp.datatype, org.apache.xerces.stax, org.apache.xerces.parsers, org.apache.xerces.jaxp, org.apache.xerces.jaxp.validation, org.apache.xerces.dom, co.elastic.apm.agent.*
# ----
# 
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: co.elastic.apm.agent.*
#
# boot_delegation_packages=co.elastic.apm.agent.*

# When enabled, the agent will make periodic requests to the APM Server to fetch updated configuration.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# central_config=true

# Disables the collection of breakdown metrics (`span.self_time`)
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# breakdown_metrics=true

# Sets the path of the agent config file.
# The special value `_AGENT_HOME_` is a placeholder for the folder the elastic-apm-agent.jar is in.
# The location can either be in the classpath of the application (when using the attacher API) or on the file system.
# NOTE: this option can only be set via system properties, environment variables or the attacher options.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: _AGENT_HOME_/elasticapm.properties
#
# config_file=_AGENT_HOME_/elasticapm.properties

############################################
# HTTP                                     #
############################################

# For transactions that are HTTP requests, the Java agent can optionally capture the request body (e.g. POST variables).
# 
# If the request has a body and this setting is disabled, the body will be shown as [REDACTED].
# 
# This option is case-insensitive.
# 
# NOTE: Currently, only UTF-8 encoded plain text content types are supported.
# The option <<config-capture-body-content-types>> determines which content types are captured.
# 
# WARNING: Request bodies often contain sensitive values like passwords, credit card numbers etc.
# If your service handles data like this, we advise to only enable this feature with care.
# Turning on body capturing can also significantly increase the overhead in terms of heap usage,
# network utilisation and Elasticsearch index size.
#
# Valid options: off, errors, transactions, all
# This setting can be changed at runtime
# Type: EventType
# Default value: OFF
#
# capture_body=OFF

# Configures which content types should be recorded.
# 
# The defaults end with a wildcard so that content types like `text/plain; charset=utf-8` are captured as well.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: application/x-www-form-urlencoded*,text/*,application/json*,application/xml*
#
# capture_body_content_types=application/x-www-form-urlencoded*,text/*,application/json*,application/xml*

# If set to `true`,
# the agent will capture request and response headers, including cookies.
# 
# NOTE: Setting this to `false` reduces network bandwidth, disk space and object allocations.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# capture_headers=true

# Used to restrict requests to certain URLs from being instrumented.
# 
# This property should be set to an array containing one or more strings.
# When an incoming HTTP request is detected, its URL will be tested against each element in this list.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
# 
# NOTE: All errors that are captured during a request to an ignored URL are still sent to the APM Server regardless of this setting.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: /VAADIN/*,/heartbeat*,/favicon.ico,*.js,*.css,*.jpg,*.jpeg,*.png,*.gif,*.webp,*.svg,*.woff,*.woff2
#
# ignore_urls=/VAADIN/*,/heartbeat*,/favicon.ico,*.js,*.css,*.jpg,*.jpeg,*.png,*.gif,*.webp,*.svg,*.woff,*.woff2

# Used to restrict requests from certain User-Agents from being instrumented.
# 
# When an incoming HTTP request is detected,
# the User-Agent from the request headers will be tested against each element in this list.
# Example: `curl/*`, `*pingdom*`
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
# 
# NOTE: All errors that are captured during a request by an ignored user agent are still sent to the APM Server regardless of this setting.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# ignore_user_agents=

# If set to `true`,
# transaction names of unsupported Servlet API-based frameworks will be in the form of `$method $path` instead of just `$method`.
# 
# WARNING: If your URLs contain path parameters like `/user/$userId`,
# you should be very careful when enabling this flag,
# as it can lead to an explosion of transaction groups.
# Take a look at the `url_groups` option on how to mitigate this problem by grouping URLs together.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: false
#
# use_path_as_transaction_name=false

# This option is only considered, when `use_path_as_transaction_name` is active.
# 
# With this option, you can group several URL paths together by using a wildcard expression like `/user/*`.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# url_groups=

############################################
# JAX-RS                                   #
############################################

# By default, the agent will scan for @Path annotations on the whole class hierarchy, recognizing a class as a JAX-RS resource if the class or any of its superclasses/interfaces has a class level @Path annotation.
# If your application does not use @Path annotation inheritance, set this property to 'false' to only scan for direct @Path annotations. This can improve the startup time of the agent.
# 
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# enable_jaxrs_annotation_inheritance=true

# By default, the agent will use `ClassName#methodName` for the transaction name of JAX-RS requests.
# If you want to use the URI template from the `@Path` annotation, set the value to `true`.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: false
#
# use_jaxrs_path_as_transaction_name=false

############################################
# JMX                                      #
############################################

# Report metrics from JMX to the APM Server
# 
# Can contain multiple comma separated JMX metric definitions:
# 
# ----
# object_name[<JMX object name pattern>] attribute[<JMX attribute>:metric_name=<optional metric name>]
# ----
# 
# * `object_name`:
# +
# For more information about the JMX object name pattern syntax,
# see the https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName` Javadocs].
# * `attribute`:
# +
# The name of the JMX attribute.
# The JMX value has to be either a `Number` or a composite where the composite items are numbers.
# This element can be defined multiple times.
# An attribute can contain optional properties.
# The syntax for that is the same as for https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName`].
# +
# ** `metric_name`:
# +
# A property within `attribute`.
# This is the name under which the metric will be stored.
# Setting this is optional and will be the same as the `attribute` if not set.
# Note that all JMX metric names will be prefixed with `jvm.jmx.` by the agent.
# 
# The agent creates `labels` for each link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html#getKeyPropertyList()[JMX key property] such as `type` and `name`.
# 
# The link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[JMX object name pattern] supports wildcards.
# In this example, the agent will create a metricset for each memory pool `name` (such as `G1 Old Generation` and `G1 Young Generation`)
# 
# ----
# object_name[java.lang:type=GarbageCollector,name=*] attribute[CollectionCount:metric_name=collection_count] attribute[CollectionTime]
# ----
# 
# The resulting documents in Elasticsearch look similar to these (metadata omitted for brevity):
# 
# [source,json]
# ----
# {
#   "@timestamp": "2019-08-20T16:51:07.512Z",
#   "jvm": {
#     "jmx": {
#       "collection_count": 0,
#       "CollectionTime":   0
#     }
#   },
#   "labels": {
#     "type": "GarbageCollector",
#     "name": "G1 Old Generation"
#   }
# }
# ----
# 
# [source,json]
# ----
# {
#   "@timestamp": "2019-08-20T16:51:07.512Z",
#   "jvm": {
#     "jmx": {
#       "collection_count": 2,
#       "CollectionTime":  11
#     }
#   },
#   "labels": {
#     "type": "GarbageCollector",
#     "name": "G1 Young Generation"
#   }
# }
# ----
# 
# 
# The agent also supports composite values for the attribute value.
# In this example, `HeapMemoryUsage` is a composite value, consisting of `committed`, `init`, `used` and `max`.
# ----
# object_name[java.lang:type=Memory] attribute[HeapMemoryUsage:metric_name=heap] 
# ----
# 
# The resulting documents in Elasticsearch look similar to this:
# 
# [source,json]
# ----
# {
#   "@timestamp": "2019-08-20T16:51:07.512Z",
#   "jvm": {
#     "jmx": {
#       "heap": {
#         "max":      4294967296,
#         "init":      268435456,
#         "committed": 268435456,
#         "used":       22404496
#       }
#     }
#   },
#   "labels": {
#     "type": "Memory"
#   }
# }
# ----
# 
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# capture_jmx_metrics=

############################################
# Logging                                  #
############################################

# Sets the logging level for the agent.
# 
# This option is case-insensitive.
#
# Valid options: ERROR, WARN, INFO, DEBUG, TRACE
# This setting can be changed at runtime
# Type: Level
# Default value: INFO
#
# log_level=INFO

# Sets the path of the agent logs.
# The special value `_AGENT_HOME_` is a placeholder for the folder the elastic-apm-agent.jar is in.
# Example: `_AGENT_HOME_/logs/elastic-apm.log`
# 
# When set to the special value 'System.out',
# the logs are sent to standard out.
# 
# NOTE: When logging to a file,
# it's content is deleted when the application starts.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: System.out
#
# log_file=System.out

# A boolean specifying if the agent should integrate into SLF4J's https://www.slf4j.org/api/org/slf4j/MDC.html[MDC] to enable trace-log correlation.
# If set to `true`, the agent will set the `trace.id` and `transaction.id` for the currently active spans and transactions to the MDC.
# See <<log-correlation>> for more details.
# 
# NOTE: While it's allowed to enable this setting at runtime, you can't disable it without a restart.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: false
#
# enable_log_correlation=false

############################################
# Reporter                                 #
############################################

# This string is used to ensure that only your agents can send data to your APM server.
# 
# Both the agents and the APM server have to be configured with the same secret token.
# Use if APM Server requires a token.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# secret_token=

# The URLs for your APM Servers
#
# The URLs must be fully qualified, including protocol (http or https) and port.
# 
# Fails over to the next APM Server URL in the event of connection errors.
# Achieves load-balancing by shuffling the list of configured URLs.
# When multiple agents are active, they'll tend towards spreading evenly across the set of servers due to randomization.
# 
# If outgoing HTTP traffic has to go through a proxy,you can use the Java system properties `http.proxyHost` and `http.proxyPort` to set that up.
# See also [Java's proxy documentation](https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html) for more information.
# 
# NOTE: This configuration can only be reloaded dynamically as of 1.8.0
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: http://localhost:8200
#
# server_urls=http://localhost:8200

# Server timeout
#
# If a request to the APM server takes longer than the configured timeout,
# the request is cancelled and the event (exception or transaction) is discarded.
# Set to 0 to disable timeouts.
# 
# WARNING: If timeouts are disabled or set to a high value, your app could experience memory issues if the APM server times out.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 5s.
# The default unit for this option is s.
# Default value: 5s
#
# server_timeout=5s

# By default, the agent verifies the SSL certificate if you use an HTTPS connection to the APM server.
# 
# Verification can be disabled by changing this setting to false.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# verify_server_cert=true

# The maximum size of buffered events.
# 
# Events like transactions and spans are buffered when the agent can't keep up with sending them to the APM Server or if the APM server is down.
# 
# If the queue is full, events are rejected which means you will lose transactions and spans in that case.
# This guards the application from crashing in case the APM server is unavailable for a longer period of time.
# 
# A lower value will decrease the heap overhead of the agent,
# while a higher value makes it less likely to lose events in case of a temporary spike in throughput.
#
# This setting can be changed at runtime
# Type: Integer
# Default value: 512
#
# max_queue_size=512

# Whether each transaction should have the process arguments attached.
# Disabled by default to save disk space.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: false
#
# include_process_args=false

# Maximum time to keep an HTTP request to the APM Server open for.
# 
# NOTE: This value has to be lower than the APM Server's `read_timeout` setting.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 10s.
# The default unit for this option is s.
# Default value: 10s
#
# api_request_time=10s

# The maximum total compressed size of the request body which is sent to the APM server intake api via a chunked encoding (HTTP streaming).
# Note that a small overshoot is possible.
# 
# Allowed byte units are `b`, `kb` and `mb`. `1kb` is equal to `1024b`.
#
# This setting can be changed at runtime
# Type: ByteValue
# Default value: 768kb
#
# api_request_size=768kb

# The interval at which the agent sends metrics to the APM Server.
# Must be at least `1s`.
# Set to `0s` to deactivate.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 30s.
# The default unit for this option is s.
# Default value: 30s
#
# metrics_interval=30s

# Disables the collection of certain metrics.
# If the name of a metric matches any of the wildcard expressions, it will not be collected.
# Example: `foo.*,bar.*`
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: comma separated list
# Default value: 
#
# disable_metrics=

############################################
# Stacktrace                               #
############################################

# Used to determine whether a stack trace frame is an 'in-app frame' or a 'library frame'.
# This allows the UI to collapse the stack frames of library code,
# and highlight the stack frames that originate from your application.
# Multiple root packages can be set as a comma-separated list;
# there's no need to configure sub-packages.
# Because this setting helps determine which classes to scan on startup,
# setting this option can also improve startup time.
# 
# You must set this option in order to use the API annotations `@CaptureTransaction` and `@CaptureSpan`.
# 
# **Example**
# 
# Most Java projects have a root package, e.g. `com.myproject`. You can set the application package using Java system properties:
# `-Delastic.apm.application_packages=com.myproject`
# 
# If you are only interested in specific subpackages, you can separate them with commas:
# `-Delastic.apm.application_packages=com.myproject.api,com.myproject.impl`
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# application_packages=

# Setting it to 0 will disable stack trace collection. Any positive integer value will be used as the maximum number of frames to collect. Setting it -1 means that all frames will be collected.
#
# This setting can be changed at runtime
# Type: Integer
# Default value: 50
#
# stack_trace_limit=50

# In its default settings, the APM agent will collect a stack trace with every recorded span.
# While this is very helpful to find the exact place in your code that causes the span, collecting this stack trace does have some overhead. 
# When setting this option to a negative value, like `-1ms`, stack traces will be collected for all spans. Setting it to a positive value, e.g. `5ms`, will limit stack trace collection to spans with durations equal to or longer than the given value, e.g. 5 milliseconds.
# 
# To disable stack trace collection for spans completely, set the value to `0ms`.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 5ms.
# The default unit for this option is ms.
# Default value: 5ms
#
# span_frames_min_duration=5ms

----
