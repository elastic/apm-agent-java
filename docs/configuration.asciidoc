////
This file is auto generated

Please only make changes in configuration.asciidoc.ftl
////
[[configuration]]
== Configuration

To adapt the Elastic APM Java agent to your needs,
you can configure it using one of the methods below, listed in descending order of precedence:

[horizontal]
1) {apm-app-ref}/agent-configuration.html[Central configuration]::
Configure the Agent in the Kibana APM app.
<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

2) Properties file::
The `elasticapm.properties` file is located in the same folder as the agent jar,
or provided through the <<config-config-file,`config_file`>> option.
image:./images/dynamic-config.svg[link=configuration.html#configuration-dynamic]

3) Java system properties::
All configuration keys are prefixed with `elastic.apm.` +
image:./images/dynamic-config.svg[link=configuration.html#configuration-dynamic]

4) Environment variables::
All configuration keys are in uppercase and prefixed with `ELASTIC_APM_`.

5) Runtime attach parameters::
. `--config` parameter. +
See <<setup-attach-cli>>.
. Arguments of `ElasticApmAttacher.attach(...)`. +
See <<setup-attach-api>>.
. `elasticapm.properties` in classpath root with `ElasticApmAttacher.attach()`. +
See <<setup-attach-api>>.

6) Default values::
Defined for each configuration.

[float]
[[configuration-dynamic]]
=== Dynamic configuration image:./images/dynamic-config.svg[]

Configuration options marked with Dynamic true can be changed at runtime when set from supported sources:

- {apm-app-ref}/agent-configuration.html[Central configuration]
- `elasticapm.properties` file
- Java system properties, but only when set from within the application

NOTE: There are two distinct ways to use `elasticapm.properties`: as an external configuration file, and as a classpath resource. +
Only the external file can be used for dynamic configuration.

[float]
[[configuration-minimal]]
=== Minimal configuration

In order to get started with Elastic APM,
the most important configuration options are <<config-service-name>>,
<<config-server-url>> and <<config-application-packages>>.
So a minimal version of a configuration might look like this:

[source,bash]
.System properties
----
-Delastic.apm.service_name=my-cool-service
-Delastic.apm.application_packages=org.example,org.another.example
-Delastic.apm.server_url=http://localhost:8200
----

[source,properties]
.elasticapm.properties
----
service_name=my-cool-service
application_packages=org.example,org.another.example
server_url=http://localhost:8200
----

[source,bash]
.Environment variables
----
ELASTIC_APM_SERVICE_NAME=my-cool-service
ELASTIC_APM_APPLICATION_PACKAGES=org.example,org.another.example
ELASTIC_APM_SERVER_URL=http://localhost:8200
----

[float]
=== Option reference

This is a list of all configuration options grouped by their category.
Click on a key to get more information.

* <<config-circuit-breaker>>
** <<config-circuit-breaker-enabled>>
** <<config-stress-monitoring-interval>>
** <<config-stress-monitor-gc-stress-threshold>>
** <<config-stress-monitor-gc-relief-threshold>>
** <<config-stress-monitor-cpu-duration-threshold>>
** <<config-stress-monitor-system-cpu-stress-threshold>>
** <<config-stress-monitor-system-cpu-relief-threshold>>
* <<config-core>>
** <<config-recording>>
** <<config-enabled>>
** <<config-instrument>>
** <<config-service-name>>
** <<config-service-node-name>>
** <<config-service-version>>
** <<config-hostname>>
** <<config-environment>>
** <<config-transaction-sample-rate>>
** <<config-transaction-max-spans>>
** <<config-sanitize-field-names>>
** <<config-disable-instrumentations>>
** <<config-unnest-exceptions>>
** <<config-ignore-exceptions>>
** <<config-capture-body>>
** <<config-capture-headers>>
** <<config-global-labels>>
** <<config-classes-excluded-from-instrumentation>>
** <<config-trace-methods>>
** <<config-trace-methods-duration-threshold>>
** <<config-central-config>>
** <<config-breakdown-metrics>>
** <<config-config-file>>
** <<config-plugins-dir>>
** <<config-use-elastic-traceparent-header>>
** <<config-span-min-duration>>
** <<config-cloud-provider>>
* <<config-http>>
** <<config-capture-body-content-types>>
** <<config-transaction-ignore-urls>>
** <<config-transaction-ignore-user-agents>>
** <<config-use-path-as-transaction-name>>
** <<config-url-groups>>
* <<config-jax-rs>>
** <<config-enable-jaxrs-annotation-inheritance>>
** <<config-use-jaxrs-path-as-transaction-name>>
* <<config-jmx>>
** <<config-capture-jmx-metrics>>
* <<config-logging>>
** <<config-log-level>>
** <<config-log-file>>
** <<config-enable-log-correlation>>
** <<config-log-ecs-reformatting>>
** <<config-log-ecs-formatter-allow-list>>
** <<config-log-ecs-reformatting-dir>>
** <<config-log-file-size>>
** <<config-log-format-sout>>
** <<config-log-format-file>>
* <<config-messaging>>
** <<config-ignore-message-queues>>
* <<config-metrics>>
** <<config-dedot-custom-metrics>>
* <<config-profiling>>
** <<config-profiling-inferred-spans-enabled>>
** <<config-profiling-inferred-spans-sampling-interval>>
** <<config-profiling-inferred-spans-min-duration>>
** <<config-profiling-inferred-spans-included-classes>>
** <<config-profiling-inferred-spans-excluded-classes>>
** <<config-profiling-inferred-spans-lib-directory>>
* <<config-reporter>>
** <<config-secret-token>>
** <<config-api-key>>
** <<config-server-url>>
** <<config-server-urls>>
** <<config-disable-send>>
** <<config-server-timeout>>
** <<config-verify-server-cert>>
** <<config-max-queue-size>>
** <<config-include-process-args>>
** <<config-api-request-time>>
** <<config-api-request-size>>
** <<config-metrics-interval>>
** <<config-disable-metrics>>
* <<config-stacktrace>>
** <<config-application-packages>>
** <<config-stack-trace-limit>>
** <<config-span-frames-min-duration>>

[[config-circuit-breaker]]
=== Circuit-Breaker configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-circuit-breaker-enabled]]
==== `circuit_breaker_enabled` (added[1.14.0] performance experimental)

NOTE: This feature is currently experimental, which means it is disabled by default and it is not guaranteed to be backwards compatible in future releases.

A boolean specifying whether the circuit breaker should be enabled or not. 
When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. 
If ANY of the monitors detects a stress indication, the agent will become inactive, as if the 
<<config-recording,`recording`>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. 
When inactive, the agent continues polling the same monitors in order to detect whether the stress state 
has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the 
agent will resume and become fully functional.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.circuit_breaker_enabled` | `circuit_breaker_enabled` | `ELASTIC_APM_CIRCUIT_BREAKER_ENABLED`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-stress-monitoring-interval]]
==== `stress_monitoring_interval` (performance)

The interval at which the agent polls the stress monitors. Must be at least `1s`.



Supports the duration suffixes `ms`, `s` and `m`.
Example: `5s`.
The default unit for this option is `s`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `5s` | TimeDuration | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stress_monitoring_interval` | `stress_monitoring_interval` | `ELASTIC_APM_STRESS_MONITORING_INTERVAL`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-stress-monitor-gc-stress-threshold]]
==== `stress_monitor_gc_stress_threshold` (performance)

The threshold used by the GC monitor to rely on for identifying heap stress.
The same threshold will be used for all heap pools, so that if ANY has a usage percentage that crosses it, 
the agent will consider it as a heap stress. The GC monitor relies only on memory consumption measured 
after a recent GC.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `0.95` | Double | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stress_monitor_gc_stress_threshold` | `stress_monitor_gc_stress_threshold` | `ELASTIC_APM_STRESS_MONITOR_GC_STRESS_THRESHOLD`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-stress-monitor-gc-relief-threshold]]
==== `stress_monitor_gc_relief_threshold` (performance)

The threshold used by the GC monitor to rely on for identifying when the heap is not under stress .
If `stress_monitor_gc_stress_threshold` has been crossed, the agent will consider it a heap-stress state. 
In order to determine that the stress state is over, percentage of occupied memory in ALL heap pools should 
be lower than this threshold. The GC monitor relies only on memory consumption measured after a recent GC.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `0.75` | Double | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stress_monitor_gc_relief_threshold` | `stress_monitor_gc_relief_threshold` | `ELASTIC_APM_STRESS_MONITOR_GC_RELIEF_THRESHOLD`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-stress-monitor-cpu-duration-threshold]]
==== `stress_monitor_cpu_duration_threshold` (performance)

The minimal time required in order to determine whether the system is 
either currently under stress, or that the stress detected previously has been relieved. 
All measurements during this time must be consistent in comparison to the relevant threshold in 
order to detect a change of stress state. Must be at least `1m`.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Supports the duration suffixes `ms`, `s` and `m`.
Example: `1m`.
The default unit for this option is `m`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `1m` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stress_monitor_cpu_duration_threshold` | `stress_monitor_cpu_duration_threshold` | `ELASTIC_APM_STRESS_MONITOR_CPU_DURATION_THRESHOLD`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-stress-monitor-system-cpu-stress-threshold]]
==== `stress_monitor_system_cpu_stress_threshold` (performance)

The threshold used by the system CPU monitor to detect system CPU stress. 
If the system CPU crosses this threshold for a duration of at least `stress_monitor_cpu_duration_threshold`, 
the monitor considers this as a stress state.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `0.95` | Double | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stress_monitor_system_cpu_stress_threshold` | `stress_monitor_system_cpu_stress_threshold` | `ELASTIC_APM_STRESS_MONITOR_SYSTEM_CPU_STRESS_THRESHOLD`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-stress-monitor-system-cpu-relief-threshold]]
==== `stress_monitor_system_cpu_relief_threshold` (performance)

The threshold used by the system CPU monitor to determine that the system is 
not under CPU stress. If the monitor detected a CPU stress, the measured system CPU needs to be below 
this threshold for a duration of at least `stress_monitor_cpu_duration_threshold` in order for the 
monitor to decide that the CPU stress has been relieved.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `0.8` | Double | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stress_monitor_system_cpu_relief_threshold` | `stress_monitor_system_cpu_relief_threshold` | `ELASTIC_APM_STRESS_MONITOR_SYSTEM_CPU_RELIEF_THRESHOLD`
|============

[[config-core]]
=== Core configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-recording]]
==== `recording` (added[1.15.0])

NOTE: This option was available in older versions through the `active` key. The old key is still 
supported in newer versions, but it is now deprecated.

A boolean specifying if the agent should be recording or not.
When recording, the agent instruments incoming HTTP requests, tracks errors and collects and sends metrics.
When not recording, the agent works as a noop, not collecting data and not communicating with the APM sever,
except for polling the central configuration endpoint.
As this is a reversible switch, agent threads are not being killed when inactivated, but they will be 
mostly idle in this state, so the overhead should be negligible.

You can use this setting to dynamically disable Elastic APM at runtime.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.recording` | `recording` | `ELASTIC_APM_RECORDING`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-enabled]]
==== `enabled` (added[1.18.0])

Setting to false will completely disable the agent, including instrumentation and remote config polling.
If you want to dynamically change the status of the agent, use <<config-recording,`recording`>> instead.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.enabled` | `enabled` | `ELASTIC_APM_ENABLED`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-instrument]]
==== `instrument` (added[1.0.0,Changing this value at runtime is possible since version 1.15.0])

A boolean specifying if the agent should instrument the application to collect traces for the app.
 When set to `false`, most built-in instrumentation plugins are disabled, which would minimize the effect on 
your application. However, the agent would still apply instrumentation related to manual tracing options and it 
would still collect and send metrics to APM Server.

NOTE: Both active and instrument needs to be true for instrumentation to be running.

NOTE: Changing this value at runtime can slow down the application temporarily.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.instrument` | `instrument` | `ELASTIC_APM_INSTRUMENT`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-service-name]]
==== `service_name`

This is used to keep all the errors and transactions of your service together
and is the primary filter in the Elastic APM user interface.

The service name must conform to this regular expression: `^[a-zA-Z0-9 _-]+$`.
In less regexy terms:
Your service name must only contain characters from the ASCII alphabet, numbers, dashes, underscores and spaces.

NOTE: When relying on auto-discovery of the service name in Servlet environments (including Spring Boot),
there is currently a caveat related to metrics.
The consequence is that the 'Metrics' tab of a service does not show process-global metrics like CPU utilization.
The reason is that metrics are reported with the detected default service name for the JVM,
for example `tomcat-application`.
That is because there may be multiple web applications deployed to a single JVM/servlet container.
However, you can view those metrics by selecting the `tomcat-application` service name, for example.
Future versions of the Elastic APM stack will have better support for that scenario.
A workaround is to explicitly set the `service_name` which means all applications deployed to the same servlet container will have the same name
or to disable the corresponding `*-service-name` detecting instrumentations via <<config-disable-instrumentations>>.

NOTE: Service name auto discovery mechanisms require APM Server 7.0+.




[options="header"]
|============
| Default                          | Type                | Dynamic
| For Spring-based application, uses the `spring.application.name` property, if set.
For Servlet-based applications, uses the `display-name` of the `web.xml`, if available.
Falls back to the servlet context path the application is mapped to (unless mapped to the root context).
Falls back to the name of the main class or jar file.
If the service name is set explicitly, it overrides all of the above.
 | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.service_name` | `service_name` | `ELASTIC_APM_SERVICE_NAME`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-service-node-name]]
==== `service_node_name` (added[1.11.0])

If set, this name is used to distinguish between different nodes of a service, 
therefore it should be unique for each JVM within a service. 
If not set, data aggregations will be done based on a container ID (where valid) or on the reported 
hostname (automatically discovered or manually configured through <<config-hostname, `hostname`>>). 

NOTE: JVM metrics views rely on aggregations that are based on the service node name. 
If you have multiple JVMs installed on the same host reporting data for the same service name, 
you must set a unique node name for each in order to view metrics at the JVM level.

NOTE: Metrics views can utilize this configuration since APM Server 7.5




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.service_node_name` | `service_node_name` | `ELASTIC_APM_SERVICE_NODE_NAME`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-service-version]]
==== `service_version`

A version string for the currently deployed version of the service. If you don’t version your deployments, the recommended value for this field is the commit identifier of the deployed revision, e.g. the output of git rev-parse HEAD.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.service_version` | `service_version` | `ELASTIC_APM_SERVICE_VERSION`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-hostname]]
==== `hostname` (added[1.10.0])

Allows for the reported hostname to be manually specified. If unset the hostname will be looked up.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.hostname` | `hostname` | `ELASTIC_APM_HOSTNAME`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-environment]]
==== `environment`

The name of the environment this service is deployed in, e.g. "production" or "staging".

Environments allow you to easily filter data on a global level in the APM app.
It's important to be consistent when naming environments across agents.
See {apm-app-ref}/filters.html#environment-selector[environment selector] in the APM app for more information.

NOTE: This feature is fully supported in the APM app in Kibana versions >= 7.2.
You must use the query bar to filter for a specific environment in versions prior to 7.2.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.environment` | `environment` | `ELASTIC_APM_ENVIRONMENT`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-transaction-sample-rate]]
==== `transaction_sample_rate` (performance)

By default, the agent will sample every transaction (e.g. request to your service). To reduce overhead and storage requirements, you can set the sample rate to a value between 0.0 and 1.0. We still record overall time and the result for unsampled transactions, but no context information, labels, or spans.

Value will be rounded with 4 significant digits, as an example, value '0.55555' will be rounded to `0.5556`

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `1` | Double | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.transaction_sample_rate` | `transaction_sample_rate` | `ELASTIC_APM_TRANSACTION_SAMPLE_RATE`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-transaction-max-spans]]
==== `transaction_max_spans` (performance)

Limits the amount of spans that are recorded per transaction.

This is helpful in cases where a transaction creates a very high amount of spans (e.g. thousands of SQL queries).

Setting an upper limit will prevent overloading the agent and the APM server with too much work for such edge cases.

A message will be logged when the max number of spans has been exceeded but only at a rate of once every 5 minutes to ensure performance is not impacted.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `500` | Integer | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.transaction_max_spans` | `transaction_max_spans` | `ELASTIC_APM_TRANSACTION_MAX_SPANS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-sanitize-field-names]]
==== `sanitize_field_names` (security)

Sometimes it is necessary to sanitize the data sent to Elastic APM,
e.g. remove sensitive data.

Configure a list of wildcard patterns of field names which should be sanitized.
These apply for example to HTTP headers and `application/x-www-form-urlencoded` data.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

NOTE: Data in the query string is considered non-sensitive,
as sensitive information should not be sent in the query string.
See https://www.owasp.org/index.php/Information_exposure_through_query_strings_in_url for more information

NOTE: Review the data captured by Elastic APM carefully to make sure it does not capture sensitive information.
If you do find sensitive data in the Elasticsearch index,
you should add an additional entry to this list (make sure to also include the default entries).

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `password, passwd, pwd, secret, *key, *token*, *session*, *credit*, *card*, authorization, set-cookie` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.sanitize_field_names` | `sanitize_field_names` | `ELASTIC_APM_SANITIZE_FIELD_NAMES`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-disable-instrumentations]]
==== `disable_instrumentations` (added[1.0.0,Changing this value at runtime is possible since version 1.15.0])

A list of instrumentations which should be disabled.
Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `cassandra`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j1-ecs`, `log4j2-ecs`, `log4j2-error`, `logback-ecs`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j-error`, `spring-amqp`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `struts`, `timer-task`, `urlconnection`, `vertx`, `vertx-web`.
If you want to try out experimental features, set the value to an empty string.

NOTE: Changing this value at runtime can slow down the application temporarily.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `experimental` | Collection | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.disable_instrumentations` | `disable_instrumentations` | `ELASTIC_APM_DISABLE_INSTRUMENTATIONS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-unnest-exceptions]]
==== `unnest_exceptions`

When reporting exceptions,
un-nests the exceptions matching the wildcard pattern.
This can come in handy for Spring's `org.springframework.web.util.NestedServletException`,
for example.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `(?-i)*Nested*Exception` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.unnest_exceptions` | `unnest_exceptions` | `ELASTIC_APM_UNNEST_EXCEPTIONS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-ignore-exceptions]]
==== `ignore_exceptions` (added[1.11.0])

A list of exceptions that should be ignored and not reported as errors.
This allows to ignore exceptions thrown in regular control flow that are not actual errors

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

Examples:

 - `com.mycompany.ExceptionToIgnore`: using fully qualified name
 - `*ExceptionToIgnore`: using wildcard to avoid package name
 - `*exceptiontoignore`: case-insensitive by default

NOTE: Exception inheritance is not supported, thus you have to explicitly list all the thrown exception types

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.ignore_exceptions` | `ignore_exceptions` | `ELASTIC_APM_IGNORE_EXCEPTIONS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-capture-body]]
==== `capture_body` (performance)

For transactions that are HTTP requests, the Java agent can optionally capture the request body (e.g. POST 
variables). For transactions that are initiated by receiving a message from a message broker, the agent can 
capture the textual message body.

If the HTTP request or the message has a body and this setting is disabled, the body will be shown as [REDACTED].

This option is case-insensitive.

NOTE: Currently, only UTF-8 encoded plain text HTTP content types are supported.
The option <<config-capture-body-content-types>> determines which content types are captured.

WARNING: Request bodies often contain sensitive values like passwords, credit card numbers etc.
If your service handles data like this, we advise to only enable this feature with care.
Turning on body capturing can also significantly increase the overhead in terms of heap usage,
network utilisation and Elasticsearch index size.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Valid options: `off`, `errors`, `transactions`, `all`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `OFF` | EventType | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_body` | `capture_body` | `ELASTIC_APM_CAPTURE_BODY`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-capture-headers]]
==== `capture_headers` (performance)

If set to `true`, the agent will capture HTTP request and response headers (including cookies), 
as well as messages' headers/properties when using messaging frameworks like Kafka or JMS.

NOTE: Setting this to `false` reduces network bandwidth, disk space and object allocations.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_headers` | `capture_headers` | `ELASTIC_APM_CAPTURE_HEADERS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-global-labels]]
==== `global_labels` (added[1.7.0, Requires APM Server 7.2+])

Labels added to all events, with the format `key=value[,key=value[,...]]`.
Any labels set by application via the API will override global labels with the same keys.

NOTE: This feature requires APM Server 7.2+




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | Map | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.global_labels` | `global_labels` | `ELASTIC_APM_GLOBAL_LABELS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-classes-excluded-from-instrumentation]]
==== `classes_excluded_from_instrumentation`

Use to exclude specific classes from being instrumented. In order to exclude entire packages, 
use wildcards, as in: `com.project.exclude.*`
This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.classes_excluded_from_instrumentation` | `classes_excluded_from_instrumentation` | `ELASTIC_APM_CLASSES_EXCLUDED_FROM_INSTRUMENTATION`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-trace-methods]]
==== `trace_methods` (added[1.0.0,Changing this value at runtime is possible since version 1.15.0])

A list of methods for which to create a transaction or span.

If you want to monitor a large number of methods,
use  <<config-profiling-inferred-spans-enabled, `profiling_inferred_spans_enabled`>> instead.

This works by instrumenting each matching method to include code that creates a span for the method.
While creating a span is quite cheap in terms of performance,
instrumenting a whole code base or a method which is executed in a tight loop leads to significant overhead.

Using a pointcut-like syntax, you can match based on

 - Method modifier (optional) +
   Example: `public`, `protected`, `private` or `*`
 - Package and class name (wildcards include sub-packages) +
   Example: `org.example.*`
 - Method name (optional since 1.4.0) +
   Example: `myMeth*d`
 - Method argument types (optional) +
   Example: `(*lang.String, int[])`
 - Classes with a specific annotation (optional) +
   Example: `@*ApplicationScoped`
 - Classes with a specific annotation that is itself annotated with the given meta-annotation (optional) +
   Example: `@@javax.enterpr*se.context.NormalScope`

The syntax is `modifier @fully.qualified.AnnotationName fully.qualified.ClassName#methodName(fully.qualified.ParameterType)`.

A few examples:

 - `org.example.*` added[1.4.0,Omitting the method is possible since 1.4.0]
 - `org.example.*#*` (before 1.4.0, you need to specify a method matcher)
 - `org.example.MyClass#myMethod`
 - `org.example.MyClass#myMethod()`
 - `org.example.MyClass#myMethod(java.lang.String)`
 - `org.example.MyClass#myMe*od(java.lang.String, int)`
 - `private org.example.MyClass#myMe*od(java.lang.String, *)`
 - `* org.example.MyClas*#myMe*od(*.String, int[])`
 - `public org.example.services.*Service#*`
 - `public @java.inject.ApplicationScoped org.example.*`
 - `public @java.inject.* org.example.*`
 - `public @@javax.enterprise.context.NormalScope org.example.*`

NOTE: Only use wildcards if necessary.
The more methods you match the more overhead will be caused by the agent.
Also note that there is a maximum amount of spans per transaction (see <<config-transaction-max-spans, `transaction_max_spans`>>).

NOTE: The agent will create stack traces for spans which took longer than
<<config-span-frames-min-duration, `span_frames_min_duration`>>.
When tracing a large number of methods (for example by using wildcards),
this may lead to high overhead.
Consider increasing the threshold or disabling stack trace collection altogether.

Common configurations:

Trace all public methods in CDI-Annotated beans:

----
public @@javax.enterprise.context.NormalScope your.application.package.*
public @@javax.inject.Scope your.application.package.*
----
NOTE: This method is only available in the Elastic APM Java Agent.

NOTE: Changing this value at runtime can slow down the application temporarily.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.trace_methods` | `trace_methods` | `ELASTIC_APM_TRACE_METHODS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-trace-methods-duration-threshold]]
==== `trace_methods_duration_threshold` (added[1.7.0])

If <<config-trace-methods, `trace_methods`>> config option is set, provides a threshold to limit spans based on 
duration. When set to a value greater than 0, spans representing methods traced based on `trace_methods` will be discarded by default.
Such methods will be traced and reported if one of the following applies:

 - This method's duration crossed the configured threshold.
 - This method ended with Exception.
 - A method executed as part of the execution of this method crossed the threshold or ended with Exception.
 - A "forcibly-traced method" (e.g. DB queries, HTTP exits, custom) was executed during the execution of this method.

Set to 0 to disable.

NOTE: Transactions are never discarded, regardless of their duration.
This configuration affects only spans.
In order not to break span references,
all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,
regardless of their duration.

NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured,
the higher of both thresholds will determine which spans will be discarded.



Supports the duration suffixes `ms`, `s` and `m`.
Example: `0ms`.
The default unit for this option is `ms`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `0ms` | TimeDuration | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.trace_methods_duration_threshold` | `trace_methods_duration_threshold` | `ELASTIC_APM_TRACE_METHODS_DURATION_THRESHOLD`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-central-config]]
==== `central_config` (added[1.8.0])

When enabled, the agent will make periodic requests to the APM Server to fetch updated configuration.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.central_config` | `central_config` | `ELASTIC_APM_CENTRAL_CONFIG`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-breakdown-metrics]]
==== `breakdown_metrics` (added[1.8.0])

Disables the collection of breakdown metrics (`span.self_time`)




[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.breakdown_metrics` | `breakdown_metrics` | `ELASTIC_APM_BREAKDOWN_METRICS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-config-file]]
==== `config_file` (added[1.8.0])

Sets the path of the agent config file.
The special value `_AGENT_HOME_` is a placeholder for the folder the `elastic-apm-agent.jar` is in.
The file has to be on the file system.
You can not refer to classpath locations.

NOTE: this option can only be set via system properties, environment variables or the attacher options.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `_AGENT_HOME_/elasticapm.properties` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.config_file` | `config_file` | `ELASTIC_APM_CONFIG_FILE`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-plugins-dir]]
==== `plugins_dir` (experimental)

NOTE: This feature is currently experimental, which means it is disabled by default and it is not guaranteed to be backwards compatible in future releases.

A folder that contains external agent plugins.

Use the `apm-agent-plugin-sdk` and the `apm-agent-api` artifacts to create a jar and place it into the plugins folder.
The agent will load all instrumentations that are declared in the
`META-INF/services/co.elastic.apm.agent.sdk.ElasticApmInstrumentation` service descriptor.
See `integration-tests/external-plugin-test` for an example plugin.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.plugins_dir` | `plugins_dir` | `ELASTIC_APM_PLUGINS_DIR`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-use-elastic-traceparent-header]]
==== `use_elastic_traceparent_header` (added[1.14.0])

To enable {apm-overview-ref-v}/distributed-tracing.html[distributed tracing], the agent
adds trace context headers to outgoing requests (like HTTP requests, Kafka records, gRPC requests etc.).
These headers (`traceparent` and `tracestate`) are defined in the
https://www.w3.org/TR/trace-context-1/[W3C Trace Context] specification.

When this setting is `true`, the agent will also add the header `elastic-apm-traceparent`
for backwards compatibility with older versions of Elastic APM agents.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.use_elastic_traceparent_header` | `use_elastic_traceparent_header` | `ELASTIC_APM_USE_ELASTIC_TRACEPARENT_HEADER`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-span-min-duration]]
==== `span_min_duration` (added[1.16.0])

Sets the minimum duration of spans.
Spans that execute faster than this threshold are attempted to be discarded.

The attempt fails if they lead up to a span that can't be discarded.
Spans that propagate the trace context to downstream services,
such as outgoing HTTP requests,
can't be discarded.
Additionally, spans that lead to an error or that may be a parent of an async operation can't be discarded.

However, external calls that don't propagate context,
such as calls to a database, can be discarded using this threshold.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Supports the duration suffixes `ms`, `s` and `m`.
Example: `0ms`.
The default unit for this option is `ms`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `0ms` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.span_min_duration` | `span_min_duration` | `ELASTIC_APM_SPAN_MIN_DURATION`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-cloud-provider]]
==== `cloud_provider` (added[1.21.0])

This config value allows you to specify which cloud provider should be assumed 
for metadata collection. By default, the agent will attempt to detect the cloud 
provider or, if that fails, will use trial and error to collect the metadata.



Valid options: `AUTO`, `AWS`, `GCP`, `AZURE`, `NONE`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `AUTO` | CloudProvider | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.cloud_provider` | `cloud_provider` | `ELASTIC_APM_CLOUD_PROVIDER`
|============

[[config-http]]
=== HTTP configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-capture-body-content-types]]
==== `capture_body_content_types` (added[1.5.0] performance)

Configures which content types should be recorded.

The defaults end with a wildcard so that content types like `text/plain; charset=utf-8` are captured as well.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `application/x-www-form-urlencoded*, text/*, application/json*, application/xml*` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_body_content_types` | `capture_body_content_types` | `ELASTIC_APM_CAPTURE_BODY_CONTENT_TYPES`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-transaction-ignore-urls]]
==== `transaction_ignore_urls`

Used to restrict requests to certain URLs from being instrumented.

This property should be set to an array containing one or more strings.
When an incoming HTTP request is detected, its URL will be tested against each element in this list.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `/VAADIN/*, /heartbeat*, /favicon.ico, *.js, *.css, *.jpg, *.jpeg, *.png, *.gif, *.webp, *.svg, *.woff, *.woff2` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.transaction_ignore_urls` | `transaction_ignore_urls` | `ELASTIC_APM_TRANSACTION_IGNORE_URLS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-transaction-ignore-user-agents]]
==== `transaction_ignore_user_agents` (added[1.22.0])

Used to restrict requests from certain User-Agents from being instrumented.

When an incoming HTTP request is detected,
the User-Agent from the request headers will be tested against each element in this list.
Example: `curl/*`, `*pingdom*`

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.transaction_ignore_user_agents` | `transaction_ignore_user_agents` | `ELASTIC_APM_TRANSACTION_IGNORE_USER_AGENTS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-use-path-as-transaction-name]]
==== `use_path_as_transaction_name` (experimental added[1.0.0,Changing this value at runtime is possible since version 1.22.0])

NOTE: This feature is currently experimental, which means it is disabled by default and it is not guaranteed to be backwards compatible in future releases.

If set to `true`,
transaction names of unsupported Servlet API-based frameworks will be in the form of `$method $path` instead of just `$method unknown route`.

WARNING: If your URLs contain path parameters like `/user/$userId`,
you should be very careful when enabling this flag,
as it can lead to an explosion of transaction groups.
Take a look at the `url_groups` option on how to mitigate this problem by grouping URLs together.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.use_path_as_transaction_name` | `use_path_as_transaction_name` | `ELASTIC_APM_USE_PATH_AS_TRANSACTION_NAME`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-url-groups]]
==== `url_groups`

This option is only considered, when `use_path_as_transaction_name` is active.

With this option, you can group several URL paths together by using a wildcard expression like `/user/*`.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.url_groups` | `url_groups` | `ELASTIC_APM_URL_GROUPS`
|============

[[config-jax-rs]]
=== JAX-RS configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-enable-jaxrs-annotation-inheritance]]
==== `enable_jaxrs_annotation_inheritance` (performance)

By default, the agent will scan for @Path annotations on the whole class hierarchy, recognizing a class as a JAX-RS resource if the class or any of its superclasses/interfaces has a class level @Path annotation.
If your application does not use @Path annotation inheritance, set this property to 'false' to only scan for direct @Path annotations. This can improve the startup time of the agent.





[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.enable_jaxrs_annotation_inheritance` | `enable_jaxrs_annotation_inheritance` | `ELASTIC_APM_ENABLE_JAXRS_ANNOTATION_INHERITANCE`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-use-jaxrs-path-as-transaction-name]]
==== `use_jaxrs_path_as_transaction_name` (added[1.8.0])

By default, the agent will use `ClassName#methodName` for the transaction name of JAX-RS requests.
If you want to use the URI template from the `@Path` annotation, set the value to `true`.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.use_jaxrs_path_as_transaction_name` | `use_jaxrs_path_as_transaction_name` | `ELASTIC_APM_USE_JAXRS_PATH_AS_TRANSACTION_NAME`
|============

[[config-jmx]]
=== JMX configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-capture-jmx-metrics]]
==== `capture_jmx_metrics` (added[1.11.0])

Report metrics from JMX to the APM Server

Can contain multiple comma separated JMX metric definitions:

----
object_name[<JMX object name pattern>] attribute[<JMX attribute>:metric_name=<optional metric name>]
----

* `object_name`:
+
For more information about the JMX object name pattern syntax,
see the https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName` Javadocs].
* `attribute`:
+
The name of the JMX attribute.
The JMX value has to be either a `Number` or a composite where the composite items are numbers.
This element can be defined multiple times.
An attribute can contain optional properties.
The syntax for that is the same as for https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName`].
+
** `metric_name`:
+
A property within `attribute`.
This is the name under which the metric will be stored.
Setting this is optional and will be the same as the `attribute` if not set.
Note that all JMX metric names will be prefixed with `jvm.jmx.` by the agent.

The agent creates `labels` for each link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html#getKeyPropertyList()[JMX key property] such as `type` and `name`.

The link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[JMX object name pattern] supports wildcards.
In this example, the agent will create a metricset for each memory pool `name` (such as `G1 Old Generation` and `G1 Young Generation`)

----
object_name[java.lang:type=GarbageCollector,name=*] attribute[CollectionCount:metric_name=collection_count] attribute[CollectionTime]
----

The resulting documents in Elasticsearch look similar to these (metadata omitted for brevity):

[source,json]
----
{
  "@timestamp": "2019-08-20T16:51:07.512Z",
  "jvm": {
    "jmx": {
      "collection_count": 0,
      "CollectionTime":   0
    }
  },
  "labels": {
    "type": "GarbageCollector",
    "name": "G1 Old Generation"
  }
}
----

[source,json]
----
{
  "@timestamp": "2019-08-20T16:51:07.512Z",
  "jvm": {
    "jmx": {
      "collection_count": 2,
      "CollectionTime":  11
    }
  },
  "labels": {
    "type": "GarbageCollector",
    "name": "G1 Young Generation"
  }
}
----


The agent also supports composite values for the attribute value.
In this example, `HeapMemoryUsage` is a composite value, consisting of `committed`, `init`, `used` and `max`.
----
object_name[java.lang:type=Memory] attribute[HeapMemoryUsage:metric_name=heap] 
----

The resulting documents in Elasticsearch look similar to this:

[source,json]
----
{
  "@timestamp": "2019-08-20T16:51:07.512Z",
  "jvm": {
    "jmx": {
      "heap": {
        "max":      4294967296,
        "init":      268435456,
        "committed": 268435456,
        "used":       22404496
      }
    }
  },
  "labels": {
    "type": "Memory"
  }
}
----


<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.capture_jmx_metrics` | `capture_jmx_metrics` | `ELASTIC_APM_CAPTURE_JMX_METRICS`
|============

[[config-logging]]
=== Logging configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-level]]
==== `log_level`

Sets the logging level for the agent.
This option is case-insensitive.

NOTE: `CRITICAL` is a valid option, but it is mapped to `ERROR`; `WARN` and `WARNING` are equivalent; 
`OFF` is only available since version 1.16.0

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Valid options: `OFF`, `ERROR`, `CRITICAL`, `WARN`, `WARNING`, `INFO`, `DEBUG`, `TRACE`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `INFO` | LogLevel | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_level` | `log_level` | `ELASTIC_APM_LOG_LEVEL`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-file]]
==== `log_file`

Sets the path of the agent logs.
The special value `_AGENT_HOME_` is a placeholder for the folder the elastic-apm-agent.jar is in.
Example: `_AGENT_HOME_/logs/elastic-apm.log`

When set to the special value 'System.out',
the logs are sent to standard out.

NOTE: When logging to a file,
the log will be formatted in new-line-delimited JSON.
When logging to std out, the log will be formatted as plain-text.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `System.out` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_file` | `log_file` | `ELASTIC_APM_LOG_FILE`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-enable-log-correlation]]
==== `enable_log_correlation`

A boolean specifying if the agent should integrate into SLF4J's https://www.slf4j.org/api/org/slf4j/MDC.html[MDC] to enable trace-log correlation.
If set to `true`, the agent will set the `trace.id` and `transaction.id` for the currently active spans and transactions to the MDC.
Since version 1.16.0, the agent also adds `error.id` of captured error to the MDC just before the error message is logged.
See <<log-correlation>> for more details.

NOTE: While it's allowed to enable this setting at runtime, you can't disable it without a restart.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.enable_log_correlation` | `enable_log_correlation` | `ELASTIC_APM_ENABLE_LOG_CORRELATION`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-ecs-reformatting]]
==== `log_ecs_reformatting` (added[1.22.0] experimental)

NOTE: This feature is currently experimental, which means it is disabled by default and it is not guaranteed to be backwards compatible in future releases.

Specifying whether and how the agent should automatically reformat application logs 
into {ecs-logging-ref}/index.html[ECS-compatible JSON], suitable for ingestion into Elasticsearch for 
further Log analysis. This functionality is available for log4j1, log4j2 and Logback. 
Once this option is enabled with any valid option, log correlation will be activated as well, regardless of the <<config-enable-log-correlation,`enable_log_correlation`>> configuration. 

Available options:

 - OFF - application logs are not reformatted. 
 - SHADE - agent logs are reformatted and "shade" ECS-JSON-formatted logs are automatically created in 
   addition to the original application logs. Shade logs will have the same name as the original logs, 
   but with the ".ecs.json" extension instead of the original extension. Destination directory for the 
   shade logs can be configured through the <<config-log-ecs-reformatting-dir,`log_ecs_reformatting_dir`>> 
   configuration. Shade logs do not inherit file-rollover strategy from the original logs. Instead, they 
   use their own size-based rollover strategy according to the <<config-log-file-size, `log_file_size`>> 
   configuration and while allowing maximum of two shade log files.
 - REPLACE - similar to `SHADE`, but the original logs will not be written. This option is useful if 
   you wish to maintain similar logging-related overhead, but write logs to a different location and/or 
   with a different file extension.
 - OVERRIDE - same log output is used, but in ECS-compatible JSON format instead of the original format. 

NOTE: while `SHADE` and `REPLACE` options are only relevant to file log appenders, the `OVERRIDE` option 
is also valid for other appenders, like System out and console

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Valid options: `OFF`, `SHADE`, `REPLACE`, `OVERRIDE`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `OFF` | LogEcsReformatting | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_ecs_reformatting` | `log_ecs_reformatting` | `ELASTIC_APM_LOG_ECS_REFORMATTING`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-ecs-formatter-allow-list]]
==== `log_ecs_formatter_allow_list`

Only formatters that match an item on this list will be automatically reformatted to ECS when 
<<config-log-ecs-reformatting,`log_ecs_reformatting`>> is set to any option other than `OFF`. 
A formatter is the logging-framework-specific entity that is responsible for the formatting 
of log events. For example, in log4j it would be a `Layout` implementation, whereas in Logback it would 
be an `Encoder` implementation. 

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `*PatternLayout*, org.apache.log4j.SimpleLayout, ch.qos.logback.core.encoder.EchoEncoder` | List | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_ecs_formatter_allow_list` | `log_ecs_formatter_allow_list` | `ELASTIC_APM_LOG_ECS_FORMATTER_ALLOW_LIST`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-ecs-reformatting-dir]]
==== `log_ecs_reformatting_dir`

If <<config-log-ecs-reformatting,`log_ecs_reformatting`>> is set to `SHADE` or `REPLACE`, 
the shade log files will be written alongside the original logs in the same directory by default. 
Use this configuration in order to write the shade logs into an alternative destination. Omitting this 
config or setting it to an empty string will restore the default behavior. If relative path is used, 
this path will be used relative to the original logs directory.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_ecs_reformatting_dir` | `log_ecs_reformatting_dir` | `ELASTIC_APM_LOG_ECS_REFORMATTING_DIR`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-file-size]]
==== `log_file_size` (added[1.17.0])

The size of the log file.

The agent always keeps one history file so that the max total log file size is twice the value of this setting.





[options="header"]
|============
| Default                          | Type                | Dynamic
| `50mb` | ByteValue | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_file_size` | `log_file_size` | `ELASTIC_APM_LOG_FILE_SIZE`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-format-sout]]
==== `log_format_sout` (added[1.17.0])

Defines the log format when logging to `System.out`.

When set to `JSON`, the agent will format the logs in an https://github.com/elastic/ecs-logging-java[ECS-compliant JSON format]
where each log event is serialized as a single line.



Valid options: `PLAIN_TEXT`, `JSON`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `PLAIN_TEXT` | LogFormat | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_format_sout` | `log_format_sout` | `ELASTIC_APM_LOG_FORMAT_SOUT`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-log-format-file]]
==== `log_format_file` (added[1.17.0])

Defines the log format when logging to a file.

When set to `JSON`, the agent will format the logs in an https://github.com/elastic/ecs-logging-java[ECS-compliant JSON format]
where each log event is serialized as a single line.




Valid options: `PLAIN_TEXT`, `JSON`

[options="header"]
|============
| Default                          | Type                | Dynamic
| `PLAIN_TEXT` | LogFormat | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.log_format_file` | `log_format_file` | `ELASTIC_APM_LOG_FORMAT_FILE`
|============

[[config-messaging]]
=== Messaging configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-ignore-message-queues]]
==== `ignore_message_queues`

Used to filter out specific messaging queues/topics from being traced. 

This property should be set to an array containing one or more strings.
When set, sends-to and receives-from the specified queues/topic will be ignored.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.ignore_message_queues` | `ignore_message_queues` | `ELASTIC_APM_IGNORE_MESSAGE_QUEUES`
|============

[[config-metrics]]
=== Metrics configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-dedot-custom-metrics]]
==== `dedot_custom_metrics` (added[1.22.0])

Replaces dots with underscores in the metric names for custom metrics, such as Micrometer metrics.

WARNING: Setting this to `false` can lead to mapping conflicts as dots indicate nesting in Elasticsearch.
An example of when a conflict happens is two metrics with the name `foo` and `foo.bar`.
The first metric maps `foo` to a number and the second metric maps `foo` as an object.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.dedot_custom_metrics` | `dedot_custom_metrics` | `ELASTIC_APM_DEDOT_CUSTOM_METRICS`
|============

[[config-profiling]]
=== Profiling configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-profiling-inferred-spans-enabled]]
==== `profiling_inferred_spans_enabled` (added[1.15.0] experimental)

NOTE: This feature is currently experimental, which means it is disabled by default and it is not guaranteed to be backwards compatible in future releases.

Set to `true` to make the agent create spans for method executions based on
https://github.com/jvm-profiling-tools/async-profiler[async-profiler], a sampling aka statistical profiler.

Due to the nature of how sampling profilers work,
the duration of the inferred spans are not exact, but only estimations.
The <<config-profiling-inferred-spans-sampling-interval, `profiling_inferred_spans_sampling_interval`>> lets you fine tune the trade-off between accuracy and overhead.

The inferred spans are created after a profiling session has ended.
This means there is a delay between the regular and the inferred spans being visible in the UI.

NOTE: This feature is not available on Windows

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.profiling_inferred_spans_enabled` | `profiling_inferred_spans_enabled` | `ELASTIC_APM_PROFILING_INFERRED_SPANS_ENABLED`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-profiling-inferred-spans-sampling-interval]]
==== `profiling_inferred_spans_sampling_interval` (added[1.15.0])

The frequency at which stack traces are gathered within a profiling session.
The lower you set it, the more accurate the durations will be.
This comes at the expense of higher overhead and more spans for potentially irrelevant operations.
The minimal duration of a profiling-inferred span is the same as the value of this setting.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Supports the duration suffixes `ms`, `s` and `m`.
Example: `50ms`.
The default unit for this option is `ms`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `50ms` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.profiling_inferred_spans_sampling_interval` | `profiling_inferred_spans_sampling_interval` | `ELASTIC_APM_PROFILING_INFERRED_SPANS_SAMPLING_INTERVAL`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-profiling-inferred-spans-min-duration]]
==== `profiling_inferred_spans_min_duration` (added[1.15.0])

The minimum duration of an inferred span.
Note that the min duration is also implicitly set by the sampling interval.
However, increasing the sampling interval also decreases the accuracy of the duration of inferred spans.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Supports the duration suffixes `ms`, `s` and `m`.
Example: `0ms`.
The default unit for this option is `ms`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `0ms` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.profiling_inferred_spans_min_duration` | `profiling_inferred_spans_min_duration` | `ELASTIC_APM_PROFILING_INFERRED_SPANS_MIN_DURATION`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-profiling-inferred-spans-included-classes]]
==== `profiling_inferred_spans_included_classes` (added[1.15.0])

If set, the agent will only create inferred spans for methods which match this list.
Setting a value may slightly reduce overhead and can reduce clutter by only creating spans for the classes you are interested in.
Example: `org.example.myapp.*`

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `*` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.profiling_inferred_spans_included_classes` | `profiling_inferred_spans_included_classes` | `ELASTIC_APM_PROFILING_INFERRED_SPANS_INCLUDED_CLASSES`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-profiling-inferred-spans-excluded-classes]]
==== `profiling_inferred_spans_excluded_classes` (added[1.15.0])

Excludes classes for which no profiler-inferred spans should be created.

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `(?-i)java.*, (?-i)javax.*, (?-i)sun.*, (?-i)com.sun.*, (?-i)jdk.*, (?-i)org.apache.tomcat.*, (?-i)org.apache.catalina.*, (?-i)org.apache.coyote.*, (?-i)org.jboss.as.*, (?-i)org.glassfish.*, (?-i)org.eclipse.jetty.*, (?-i)com.ibm.websphere.*, (?-i)io.undertow.*` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.profiling_inferred_spans_excluded_classes` | `profiling_inferred_spans_excluded_classes` | `ELASTIC_APM_PROFILING_INFERRED_SPANS_EXCLUDED_CLASSES`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-profiling-inferred-spans-lib-directory]]
==== `profiling_inferred_spans_lib_directory` (added[1.18.0])

Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library is exported to a temporary location and loaded by the JVM.
The partition backing this location must be executable, however in some server-hardened environments, `noexec` may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.
Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.
If unset, the value of the `java.io.tmpdir` system property will be used.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.profiling_inferred_spans_lib_directory` | `profiling_inferred_spans_lib_directory` | `ELASTIC_APM_PROFILING_INFERRED_SPANS_LIB_DIRECTORY`
|============

[[config-reporter]]
=== Reporter configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-secret-token]]
==== `secret_token`

This string is used to ensure that only your agents can send data to your APM server.

Both the agents and the APM server have to be configured with the same secret token.
Use if APM Server requires a token.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.secret_token` | `secret_token` | `ELASTIC_APM_SECRET_TOKEN`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-api-key]]
==== `api_key`

This string is used to ensure that only your agents can send data to your APM server.

Agents can use API keys as a replacement of secret token, APM server can have multiple API keys.
When both secret token and API key are used, API key has priority and secret token is ignored.
Use if APM Server requires an API key.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | String | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.api_key` | `api_key` | `ELASTIC_APM_API_KEY`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-server-url]]
==== `server_url`

The URL must be fully qualified, including protocol (http or https) and port.

If SSL is enabled on the APM Server, use the `https` protocol. For more information, see 
<<ssl-configuration>>.

If outgoing HTTP traffic has to go through a proxy,
you can use the Java system properties `http.proxyHost` and `http.proxyPort` to set that up.
See also https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html[Java's proxy documentation] 
for more information.

NOTE: This configuration can only be reloaded dynamically as of 1.8.0

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `http://localhost:8200` | URL | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.server_url` | `server_url` | `ELASTIC_APM_SERVER_URL`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-server-urls]]
==== `server_urls`

The URLs must be fully qualified, including protocol (http or https) and port.

Fails over to the next APM Server URL in the event of connection errors.
Achieves load-balancing by shuffling the list of configured URLs.
When multiple agents are active, they'll tend towards spreading evenly across the set of servers due to randomization.

If SSL is enabled on the APM Server, use the `https` protocol. For more information, see 
<<ssl-configuration>>.

If outgoing HTTP traffic has to go through a proxy,
you can use the Java system properties `http.proxyHost` and `http.proxyPort` to set that up.
See also https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html[Java's proxy documentation] 
for more information.

NOTE: This configuration is specific to the Java agent and does not align with any other APM agent. In order 
to use a cross-agent config, use <<config-server-url>> instead, which is the recommended option regardless if you 
are only setting a single URL.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.server_urls` | `server_urls` | `ELASTIC_APM_SERVER_URLS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-disable-send]]
==== `disable_send`

If set to `true`, the agent will work as usual, except from any task requiring communication with 
the APM server. Events will be dropped and the agent won't be able to receive central configuration, which 
means that any other configuration cannot be changed in this state without restarting the service. 
An example use case for this would be maintaining the ability to create traces and log 
trace/transaction/span IDs through the log correlation feature, without setting up an APM Server.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.disable_send` | `disable_send` | `ELASTIC_APM_DISABLE_SEND`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-server-timeout]]
==== `server_timeout`

If a request to the APM server takes longer than the configured timeout,
the request is cancelled and the event (exception or transaction) is discarded.
Set to 0 to disable timeouts.

WARNING: If timeouts are disabled or set to a high value, your app could experience memory issues if the APM server times out.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Supports the duration suffixes `ms`, `s` and `m`.
Example: `5s`.
The default unit for this option is `s`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `5s` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.server_timeout` | `server_timeout` | `ELASTIC_APM_SERVER_TIMEOUT`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-verify-server-cert]]
==== `verify_server_cert`

By default, the agent verifies the SSL certificate if you use an HTTPS connection to the APM server.

Verification can be disabled by changing this setting to false.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `true` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.verify_server_cert` | `verify_server_cert` | `ELASTIC_APM_VERIFY_SERVER_CERT`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-max-queue-size]]
==== `max_queue_size`

The maximum size of buffered events.

Events like transactions and spans are buffered when the agent can't keep up with sending them to the APM Server or if the APM server is down.

If the queue is full, events are rejected which means you will lose transactions and spans in that case.
This guards the application from crashing in case the APM server is unavailable for a longer period of time.

A lower value will decrease the heap overhead of the agent,
while a higher value makes it less likely to lose events in case of a temporary spike in throughput.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `512` | Integer | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.max_queue_size` | `max_queue_size` | `ELASTIC_APM_MAX_QUEUE_SIZE`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-include-process-args]]
==== `include_process_args`

Whether each transaction should have the process arguments attached.
Disabled by default to save disk space.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `false` | Boolean | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.include_process_args` | `include_process_args` | `ELASTIC_APM_INCLUDE_PROCESS_ARGS`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-api-request-time]]
==== `api_request_time`

Maximum time to keep an HTTP request to the APM Server open for.

NOTE: This value has to be lower than the APM Server's `read_timeout` setting.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Supports the duration suffixes `ms`, `s` and `m`.
Example: `10s`.
The default unit for this option is `s`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `10s` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.api_request_time` | `api_request_time` | `ELASTIC_APM_API_REQUEST_TIME`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-api-request-size]]
==== `api_request_size`

The maximum total compressed size of the request body which is sent to the APM server intake api via a chunked encoding (HTTP streaming).
Note that a small overshoot is possible.

Allowed byte units are `b`, `kb` and `mb`. `1kb` is equal to `1024b`.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `768kb` | ByteValue | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.api_request_size` | `api_request_size` | `ELASTIC_APM_API_REQUEST_SIZE`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-metrics-interval]]
==== `metrics_interval` (added[1.3.0])

The interval at which the agent sends metrics to the APM Server.
Must be at least `1s`.
Set to `0s` to deactivate.



Supports the duration suffixes `ms`, `s` and `m`.
Example: `30s`.
The default unit for this option is `s`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `30s` | TimeDuration | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.metrics_interval` | `metrics_interval` | `ELASTIC_APM_METRICS_INTERVAL`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-disable-metrics]]
==== `disable_metrics` (added[1.3.0])

Disables the collection of certain metrics.
If the name of a metric matches any of the wildcard expressions, it will not be collected.
Example: `foo.*,bar.*`

This option supports the wildcard `*`, which matches zero or more characters.
Examples: `/foo/*/bar/*/baz*`, `*foo*`.
Matching is case insensitive by default.
Prepending an element with `(?-i)` makes the matching case sensitive.




[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | List | false
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.disable_metrics` | `disable_metrics` | `ELASTIC_APM_DISABLE_METRICS`
|============

[[config-stacktrace]]
=== Stacktrace configuration options
// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-application-packages]]
==== `application_packages`

Used to determine whether a stack trace frame is an 'in-app frame' or a 'library frame'.
This allows the APM app to collapse the stack frames of library code,
and highlight the stack frames that originate from your application.
Multiple root packages can be set as a comma-separated list;
there's no need to configure sub-packages.
Because this setting helps determine which classes to scan on startup,
setting this option can also improve startup time.

You must set this option in order to use the API annotations `@CaptureTransaction` and `@CaptureSpan`.

**Example**

Most Java projects have a root package, e.g. `com.myproject`. You can set the application package using Java system properties:
`-Delastic.apm.application_packages=com.myproject`

If you are only interested in specific subpackages, you can separate them with commas:
`-Delastic.apm.application_packages=com.myproject.api,com.myproject.impl`

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `<none>` | Collection | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.application_packages` | `application_packages` | `ELASTIC_APM_APPLICATION_PACKAGES`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-stack-trace-limit]]
==== `stack_trace_limit` (performance)

Setting it to 0 will disable stack trace collection. Any positive integer value will be used as the maximum number of frames to collect. Setting it -1 means that all frames will be collected.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>


[options="header"]
|============
| Default                          | Type                | Dynamic
| `50` | Integer | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.stack_trace_limit` | `stack_trace_limit` | `ELASTIC_APM_STACK_TRACE_LIMIT`
|============

// This file is auto generated. Please make your changes in *Configuration.java (for example CoreConfiguration.java) and execute ConfigurationExporter
[float]
[[config-span-frames-min-duration]]
==== `span_frames_min_duration` (performance)

While this is very helpful to find the exact place in your code that causes the span, collecting this stack trace does have some overhead. 
When setting this option to a negative value, like `-1ms`, stack traces will be collected for all spans. Setting it to a positive value, e.g. `5ms`, will limit stack trace collection to spans with durations equal to or longer than the given value, e.g. 5 milliseconds.

To disable stack trace collection for spans completely, set the value to `0ms`.

<<configuration-dynamic, image:./images/dynamic-config.svg[] >>

Supports the duration suffixes `ms`, `s` and `m`.
Example: `5ms`.
The default unit for this option is `ms`.

[options="header"]
|============
| Default                          | Type                | Dynamic
| `5ms` | TimeDuration | true
|============


[options="header"]
|============
| Java System Properties      | Property file   | Environment
| `elastic.apm.span_frames_min_duration` | `span_frames_min_duration` | `ELASTIC_APM_SPAN_FRAMES_MIN_DURATION`
|============



[[config-reference-properties-file]]
=== Property file reference

[source,properties]
.elasticapm.properties
----
############################################
# Circuit-Breaker                          #
############################################

# A boolean specifying whether the circuit breaker should be enabled or not. 
# When enabled, the agent periodically polls stress monitors to detect system/process/JVM stress state. 
# If ANY of the monitors detects a stress indication, the agent will become inactive, as if the 
# <<config-recording,`recording`>> configuration option has been set to `false`, thus reducing resource consumption to a minimum. 
# When inactive, the agent continues polling the same monitors in order to detect whether the stress state 
# has been relieved. If ALL monitors approve that the system/process/JVM is not under stress anymore, the 
# agent will resume and become fully functional.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: false
#
# circuit_breaker_enabled=false

# The interval at which the agent polls the stress monitors. Must be at least `1s`.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 5s.
# The default unit for this option is s.
# Default value: 5s
#
# stress_monitoring_interval=5s

# The threshold used by the GC monitor to rely on for identifying heap stress.
# The same threshold will be used for all heap pools, so that if ANY has a usage percentage that crosses it, 
# the agent will consider it as a heap stress. The GC monitor relies only on memory consumption measured 
# after a recent GC.
#
# This setting can be changed at runtime
# Type: Double
# Default value: 0.95
#
# stress_monitor_gc_stress_threshold=0.95

# The threshold used by the GC monitor to rely on for identifying when the heap is not under stress .
# If `stress_monitor_gc_stress_threshold` has been crossed, the agent will consider it a heap-stress state. 
# In order to determine that the stress state is over, percentage of occupied memory in ALL heap pools should 
# be lower than this threshold. The GC monitor relies only on memory consumption measured after a recent GC.
#
# This setting can be changed at runtime
# Type: Double
# Default value: 0.75
#
# stress_monitor_gc_relief_threshold=0.75

# The minimal time required in order to determine whether the system is 
# either currently under stress, or that the stress detected previously has been relieved. 
# All measurements during this time must be consistent in comparison to the relevant threshold in 
# order to detect a change of stress state. Must be at least `1m`.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 1m.
# The default unit for this option is m.
# Default value: 1m
#
# stress_monitor_cpu_duration_threshold=1m

# The threshold used by the system CPU monitor to detect system CPU stress. 
# If the system CPU crosses this threshold for a duration of at least `stress_monitor_cpu_duration_threshold`, 
# the monitor considers this as a stress state.
#
# This setting can be changed at runtime
# Type: Double
# Default value: 0.95
#
# stress_monitor_system_cpu_stress_threshold=0.95

# The threshold used by the system CPU monitor to determine that the system is 
# not under CPU stress. If the monitor detected a CPU stress, the measured system CPU needs to be below 
# this threshold for a duration of at least `stress_monitor_cpu_duration_threshold` in order for the 
# monitor to decide that the CPU stress has been relieved.
#
# This setting can be changed at runtime
# Type: Double
# Default value: 0.8
#
# stress_monitor_system_cpu_relief_threshold=0.8

############################################
# Core                                     #
############################################

# NOTE: This option was available in older versions through the `active` key. The old key is still 
# supported in newer versions, but it is now deprecated.
# 
# A boolean specifying if the agent should be recording or not.
# When recording, the agent instruments incoming HTTP requests, tracks errors and collects and sends metrics.
# When not recording, the agent works as a noop, not collecting data and not communicating with the APM sever,
# except for polling the central configuration endpoint.
# As this is a reversible switch, agent threads are not being killed when inactivated, but they will be 
# mostly idle in this state, so the overhead should be negligible.
# 
# You can use this setting to dynamically disable Elastic APM at runtime.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# recording=true

# Setting to false will completely disable the agent, including instrumentation and remote config polling.
# If you want to dynamically change the status of the agent, use <<config-recording,`recording`>> instead.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# enabled=true

# A boolean specifying if the agent should instrument the application to collect traces for the app.
#  When set to `false`, most built-in instrumentation plugins are disabled, which would minimize the effect on 
# your application. However, the agent would still apply instrumentation related to manual tracing options and it 
# would still collect and send metrics to APM Server.
# 
# NOTE: Both active and instrument needs to be true for instrumentation to be running.
# 
# NOTE: Changing this value at runtime can slow down the application temporarily.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# instrument=true

# The name of your service
#
# This is used to keep all the errors and transactions of your service together
# and is the primary filter in the Elastic APM user interface.
# 
# The service name must conform to this regular expression: `^[a-zA-Z0-9 _-]+$`.
# In less regexy terms:
# Your service name must only contain characters from the ASCII alphabet, numbers, dashes, underscores and spaces.
# 
# NOTE: When relying on auto-discovery of the service name in Servlet environments (including Spring Boot),
# there is currently a caveat related to metrics.
# The consequence is that the 'Metrics' tab of a service does not show process-global metrics like CPU utilization.
# The reason is that metrics are reported with the detected default service name for the JVM,
# for example `tomcat-application`.
# That is because there may be multiple web applications deployed to a single JVM/servlet container.
# However, you can view those metrics by selecting the `tomcat-application` service name, for example.
# Future versions of the Elastic APM stack will have better support for that scenario.
# A workaround is to explicitly set the `service_name` which means all applications deployed to the same servlet container will have the same name
# or to disable the corresponding `*-service-name` detecting instrumentations via <<config-disable-instrumentations>>.
# 
# NOTE: Service name auto discovery mechanisms require APM Server 7.0+.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: For Spring-based application, uses the `spring.application.name` property, if set.
# For Servlet-based applications, uses the `display-name` of the `web.xml`, if available.
# Falls back to the servlet context path the application is mapped to (unless mapped to the root context).
# Falls back to the name of the main class or jar file.
# If the service name is set explicitly, it overrides all of the above.
# 
#
# service_name=

# A unique name for the service node
#
# If set, this name is used to distinguish between different nodes of a service, 
# therefore it should be unique for each JVM within a service. 
# If not set, data aggregations will be done based on a container ID (where valid) or on the reported 
# hostname (automatically discovered or manually configured through <<config-hostname, `hostname`>>). 
# 
# NOTE: JVM metrics views rely on aggregations that are based on the service node name. 
# If you have multiple JVMs installed on the same host reporting data for the same service name, 
# you must set a unique node name for each in order to view metrics at the JVM level.
# 
# NOTE: Metrics views can utilize this configuration since APM Server 7.5
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# service_node_name=

# A version string for the currently deployed version of the service. If you don’t version your deployments, the recommended value for this field is the commit identifier of the deployed revision, e.g. the output of git rev-parse HEAD.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# service_version=

# Allows for the reported hostname to be manually specified. If unset the hostname will be looked up.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# hostname=

# The name of the environment this service is deployed in, e.g. "production" or "staging".
# 
# Environments allow you to easily filter data on a global level in the APM app.
# It's important to be consistent when naming environments across agents.
# See {apm-app-ref}/filters.html#environment-selector[environment selector] in the APM app for more information.
# 
# NOTE: This feature is fully supported in the APM app in Kibana versions >= 7.2.
# You must use the query bar to filter for a specific environment in versions prior to 7.2.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# environment=

# By default, the agent will sample every transaction (e.g. request to your service). To reduce overhead and storage requirements, you can set the sample rate to a value between 0.0 and 1.0. We still record overall time and the result for unsampled transactions, but no context information, labels, or spans.
# 
# Value will be rounded with 4 significant digits, as an example, value '0.55555' will be rounded to `0.5556`
#
# This setting can be changed at runtime
# Type: Double
# Default value: 1
#
# transaction_sample_rate=1

# Limits the amount of spans that are recorded per transaction.
# 
# This is helpful in cases where a transaction creates a very high amount of spans (e.g. thousands of SQL queries).
# 
# Setting an upper limit will prevent overloading the agent and the APM server with too much work for such edge cases.
# 
# A message will be logged when the max number of spans has been exceeded but only at a rate of once every 5 minutes to ensure performance is not impacted.
#
# This setting can be changed at runtime
# Type: Integer
# Default value: 500
#
# transaction_max_spans=500

# Sometimes it is necessary to sanitize the data sent to Elastic APM,
# e.g. remove sensitive data.
# 
# Configure a list of wildcard patterns of field names which should be sanitized.
# These apply for example to HTTP headers and `application/x-www-form-urlencoded` data.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
# 
# NOTE: Data in the query string is considered non-sensitive,
# as sensitive information should not be sent in the query string.
# See https://www.owasp.org/index.php/Information_exposure_through_query_strings_in_url for more information
# 
# NOTE: Review the data captured by Elastic APM carefully to make sure it does not capture sensitive information.
# If you do find sensitive data in the Elasticsearch index,
# you should add an additional entry to this list (make sure to also include the default entries).
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: password,passwd,pwd,secret,*key,*token*,*session*,*credit*,*card*,authorization,set-cookie
#
# sanitize_field_names=password,passwd,pwd,secret,*key,*token*,*session*,*credit*,*card*,authorization,set-cookie

# A list of instrumentations which should be disabled.
# Valid options are `annotations`, `apache-commons-exec`, `apache-httpclient`, `asynchttpclient`, `bootdelegation`, `cassandra`, `concurrent`, `dubbo`, `elasticsearch-restclient`, `exception-handler`, `executor`, `executor-collection`, `experimental`, `fork-join`, `grails`, `grpc`, `hibernate-search`, `http-client`, `jax-rs`, `jax-ws`, `jdbc`, `jdk-httpclient`, `jedis`, `jms`, `jsf`, `kafka`, `lettuce`, `log4j1-ecs`, `log4j2-ecs`, `log4j2-error`, `logback-ecs`, `logging`, `micrometer`, `mongodb-client`, `okhttp`, `opentracing`, `process`, `public-api`, `quartz`, `rabbitmq`, `redis`, `redisson`, `render`, `scala-future`, `scheduled`, `servlet-api`, `servlet-api-async`, `servlet-api-dispatch`, `servlet-input-stream`, `slf4j-error`, `spring-amqp`, `spring-mvc`, `spring-resttemplate`, `spring-service-name`, `spring-view-render`, `ssl-context`, `struts`, `timer-task`, `urlconnection`, `vertx`, `vertx-web`.
# If you want to try out experimental features, set the value to an empty string.
# 
# NOTE: Changing this value at runtime can slow down the application temporarily.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: experimental
#
# disable_instrumentations=experimental

# When reporting exceptions,
# un-nests the exceptions matching the wildcard pattern.
# This can come in handy for Spring's `org.springframework.web.util.NestedServletException`,
# for example.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: (?-i)*Nested*Exception
#
# unnest_exceptions=(?-i)*Nested*Exception

# A list of exceptions that should be ignored and not reported as errors.
# This allows to ignore exceptions thrown in regular control flow that are not actual errors
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
# 
# Examples:
# 
#  - `com.mycompany.ExceptionToIgnore`: using fully qualified name
#  - `*ExceptionToIgnore`: using wildcard to avoid package name
#  - `*exceptiontoignore`: case-insensitive by default
# 
# NOTE: Exception inheritance is not supported, thus you have to explicitly list all the thrown exception types
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# ignore_exceptions=

# For transactions that are HTTP requests, the Java agent can optionally capture the request body (e.g. POST 
# variables). For transactions that are initiated by receiving a message from a message broker, the agent can 
# capture the textual message body.
# 
# If the HTTP request or the message has a body and this setting is disabled, the body will be shown as [REDACTED].
# 
# This option is case-insensitive.
# 
# NOTE: Currently, only UTF-8 encoded plain text HTTP content types are supported.
# The option <<config-capture-body-content-types>> determines which content types are captured.
# 
# WARNING: Request bodies often contain sensitive values like passwords, credit card numbers etc.
# If your service handles data like this, we advise to only enable this feature with care.
# Turning on body capturing can also significantly increase the overhead in terms of heap usage,
# network utilisation and Elasticsearch index size.
#
# Valid options: off, errors, transactions, all
# This setting can be changed at runtime
# Type: EventType
# Default value: OFF
#
# capture_body=OFF

# If set to `true`, the agent will capture HTTP request and response headers (including cookies), 
# as well as messages' headers/properties when using messaging frameworks like Kafka or JMS.
# 
# NOTE: Setting this to `false` reduces network bandwidth, disk space and object allocations.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# capture_headers=true

# Labels added to all events, with the format `key=value[,key=value[,...]]`.
# Any labels set by application via the API will override global labels with the same keys.
# 
# NOTE: This feature requires APM Server 7.2+
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Map
# Default value: 
#
# global_labels=

# Use to exclude specific classes from being instrumented. In order to exclude entire packages, 
# use wildcards, as in: `com.project.exclude.*`
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: comma separated list
# Default value: 
#
# classes_excluded_from_instrumentation=

# A list of methods for which to create a transaction or span.
# 
# If you want to monitor a large number of methods,
# use  <<config-profiling-inferred-spans-enabled, `profiling_inferred_spans_enabled`>> instead.
# 
# This works by instrumenting each matching method to include code that creates a span for the method.
# While creating a span is quite cheap in terms of performance,
# instrumenting a whole code base or a method which is executed in a tight loop leads to significant overhead.
# 
# Using a pointcut-like syntax, you can match based on
# 
#  - Method modifier (optional) +
#    Example: `public`, `protected`, `private` or `*`
#  - Package and class name (wildcards include sub-packages) +
#    Example: `org.example.*`
#  - Method name (optional since 1.4.0) +
#    Example: `myMeth*d`
#  - Method argument types (optional) +
#    Example: `(*lang.String, int[])`
#  - Classes with a specific annotation (optional) +
#    Example: `@*ApplicationScoped`
#  - Classes with a specific annotation that is itself annotated with the given meta-annotation (optional) +
#    Example: `@@javax.enterpr*se.context.NormalScope`
# 
# The syntax is `modifier @fully.qualified.AnnotationName fully.qualified.ClassName#methodName(fully.qualified.ParameterType)`.
# 
# A few examples:
# 
#  - `org.example.*` added[1.4.0,Omitting the method is possible since 1.4.0]
#  - `org.example.*#*` (before 1.4.0, you need to specify a method matcher)
#  - `org.example.MyClass#myMethod`
#  - `org.example.MyClass#myMethod()`
#  - `org.example.MyClass#myMethod(java.lang.String)`
#  - `org.example.MyClass#myMe*od(java.lang.String, int)`
#  - `private org.example.MyClass#myMe*od(java.lang.String, *)`
#  - `* org.example.MyClas*#myMe*od(*.String, int[])`
#  - `public org.example.services.*Service#*`
#  - `public @java.inject.ApplicationScoped org.example.*`
#  - `public @java.inject.* org.example.*`
#  - `public @@javax.enterprise.context.NormalScope org.example.*`
# 
# NOTE: Only use wildcards if necessary.
# The more methods you match the more overhead will be caused by the agent.
# Also note that there is a maximum amount of spans per transaction (see <<config-transaction-max-spans, `transaction_max_spans`>>).
# 
# NOTE: The agent will create stack traces for spans which took longer than
# <<config-span-frames-min-duration, `span_frames_min_duration`>>.
# When tracing a large number of methods (for example by using wildcards),
# this may lead to high overhead.
# Consider increasing the threshold or disabling stack trace collection altogether.
# 
# Common configurations:
# 
# Trace all public methods in CDI-Annotated beans:
# 
# ----
# public @@javax.enterprise.context.NormalScope your.application.package.*
# public @@javax.inject.Scope your.application.package.*
# ----
# NOTE: This method is only available in the Elastic APM Java Agent.
# 
# NOTE: Changing this value at runtime can slow down the application temporarily.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# trace_methods=

# If <<config-trace-methods, `trace_methods`>> config option is set, provides a threshold to limit spans based on 
# duration. When set to a value greater than 0, spans representing methods traced based on `trace_methods` will be discarded by default.
# Such methods will be traced and reported if one of the following applies:
# 
#  - This method's duration crossed the configured threshold.
#  - This method ended with Exception.
#  - A method executed as part of the execution of this method crossed the threshold or ended with Exception.
#  - A "forcibly-traced method" (e.g. DB queries, HTTP exits, custom) was executed during the execution of this method.
# 
# Set to 0 to disable.
# 
# NOTE: Transactions are never discarded, regardless of their duration.
# This configuration affects only spans.
# In order not to break span references,
# all spans leading to an async operation or an exit span (such as a HTTP request or a DB query) are never discarded,
# regardless of their duration.
# 
# NOTE: If this option and <<config-span-min-duration,`span_min_duration`>> are both configured,
# the higher of both thresholds will determine which spans will be discarded.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 0ms.
# The default unit for this option is ms.
# Default value: 0ms
#
# trace_methods_duration_threshold=0ms

# When enabled, the agent will make periodic requests to the APM Server to fetch updated configuration.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# central_config=true

# Disables the collection of breakdown metrics (`span.self_time`)
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# breakdown_metrics=true

# Sets the path of the agent config file.
# The special value `_AGENT_HOME_` is a placeholder for the folder the `elastic-apm-agent.jar` is in.
# The file has to be on the file system.
# You can not refer to classpath locations.
# 
# NOTE: this option can only be set via system properties, environment variables or the attacher options.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: _AGENT_HOME_/elasticapm.properties
#
# config_file=_AGENT_HOME_/elasticapm.properties

# A folder that contains external agent plugins.
# 
# Use the `apm-agent-plugin-sdk` and the `apm-agent-api` artifacts to create a jar and place it into the plugins folder.
# The agent will load all instrumentations that are declared in the
# `META-INF/services/co.elastic.apm.agent.sdk.ElasticApmInstrumentation` service descriptor.
# See `integration-tests/external-plugin-test` for an example plugin.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# plugins_dir=

# To enable {apm-overview-ref-v}/distributed-tracing.html[distributed tracing], the agent
# adds trace context headers to outgoing requests (like HTTP requests, Kafka records, gRPC requests etc.).
# These headers (`traceparent` and `tracestate`) are defined in the
# https://www.w3.org/TR/trace-context-1/[W3C Trace Context] specification.
# 
# When this setting is `true`, the agent will also add the header `elastic-apm-traceparent`
# for backwards compatibility with older versions of Elastic APM agents.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# use_elastic_traceparent_header=true

# Sets the minimum duration of spans.
# Spans that execute faster than this threshold are attempted to be discarded.
# 
# The attempt fails if they lead up to a span that can't be discarded.
# Spans that propagate the trace context to downstream services,
# such as outgoing HTTP requests,
# can't be discarded.
# Additionally, spans that lead to an error or that may be a parent of an async operation can't be discarded.
# 
# However, external calls that don't propagate context,
# such as calls to a database, can be discarded using this threshold.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 0ms.
# The default unit for this option is ms.
# Default value: 0ms
#
# span_min_duration=0ms

# This config value allows you to specify which cloud provider should be assumed 
# for metadata collection. By default, the agent will attempt to detect the cloud 
# provider or, if that fails, will use trial and error to collect the metadata.
#
# Valid options: AUTO, AWS, GCP, AZURE, NONE
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: CloudProvider
# Default value: AUTO
#
# cloud_provider=AUTO

############################################
# HTTP                                     #
############################################

# Configures which content types should be recorded.
# 
# The defaults end with a wildcard so that content types like `text/plain; charset=utf-8` are captured as well.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: application/x-www-form-urlencoded*,text/*,application/json*,application/xml*
#
# capture_body_content_types=application/x-www-form-urlencoded*,text/*,application/json*,application/xml*

# Used to restrict requests to certain URLs from being instrumented.
# 
# This property should be set to an array containing one or more strings.
# When an incoming HTTP request is detected, its URL will be tested against each element in this list.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: /VAADIN/*,/heartbeat*,/favicon.ico,*.js,*.css,*.jpg,*.jpeg,*.png,*.gif,*.webp,*.svg,*.woff,*.woff2
#
# transaction_ignore_urls=/VAADIN/*,/heartbeat*,/favicon.ico,*.js,*.css,*.jpg,*.jpeg,*.png,*.gif,*.webp,*.svg,*.woff,*.woff2

# Used to restrict requests from certain User-Agents from being instrumented.
# 
# When an incoming HTTP request is detected,
# the User-Agent from the request headers will be tested against each element in this list.
# Example: `curl/*`, `*pingdom*`
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# transaction_ignore_user_agents=

# If set to `true`,
# transaction names of unsupported Servlet API-based frameworks will be in the form of `$method $path` instead of just `$method unknown route`.
# 
# WARNING: If your URLs contain path parameters like `/user/$userId`,
# you should be very careful when enabling this flag,
# as it can lead to an explosion of transaction groups.
# Take a look at the `url_groups` option on how to mitigate this problem by grouping URLs together.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: false
#
# use_path_as_transaction_name=false

# This option is only considered, when `use_path_as_transaction_name` is active.
# 
# With this option, you can group several URL paths together by using a wildcard expression like `/user/*`.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# url_groups=

############################################
# JAX-RS                                   #
############################################

# By default, the agent will scan for @Path annotations on the whole class hierarchy, recognizing a class as a JAX-RS resource if the class or any of its superclasses/interfaces has a class level @Path annotation.
# If your application does not use @Path annotation inheritance, set this property to 'false' to only scan for direct @Path annotations. This can improve the startup time of the agent.
# 
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# enable_jaxrs_annotation_inheritance=true

# By default, the agent will use `ClassName#methodName` for the transaction name of JAX-RS requests.
# If you want to use the URI template from the `@Path` annotation, set the value to `true`.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: false
#
# use_jaxrs_path_as_transaction_name=false

############################################
# JMX                                      #
############################################

# Report metrics from JMX to the APM Server
# 
# Can contain multiple comma separated JMX metric definitions:
# 
# ----
# object_name[<JMX object name pattern>] attribute[<JMX attribute>:metric_name=<optional metric name>]
# ----
# 
# * `object_name`:
# +
# For more information about the JMX object name pattern syntax,
# see the https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName` Javadocs].
# * `attribute`:
# +
# The name of the JMX attribute.
# The JMX value has to be either a `Number` or a composite where the composite items are numbers.
# This element can be defined multiple times.
# An attribute can contain optional properties.
# The syntax for that is the same as for https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[`ObjectName`].
# +
# ** `metric_name`:
# +
# A property within `attribute`.
# This is the name under which the metric will be stored.
# Setting this is optional and will be the same as the `attribute` if not set.
# Note that all JMX metric names will be prefixed with `jvm.jmx.` by the agent.
# 
# The agent creates `labels` for each link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html#getKeyPropertyList()[JMX key property] such as `type` and `name`.
# 
# The link:https://docs.oracle.com/javase/7/docs/api/javax/management/ObjectName.html[JMX object name pattern] supports wildcards.
# In this example, the agent will create a metricset for each memory pool `name` (such as `G1 Old Generation` and `G1 Young Generation`)
# 
# ----
# object_name[java.lang:type=GarbageCollector,name=*] attribute[CollectionCount:metric_name=collection_count] attribute[CollectionTime]
# ----
# 
# The resulting documents in Elasticsearch look similar to these (metadata omitted for brevity):
# 
# [source,json]
# ----
# {
#   "@timestamp": "2019-08-20T16:51:07.512Z",
#   "jvm": {
#     "jmx": {
#       "collection_count": 0,
#       "CollectionTime":   0
#     }
#   },
#   "labels": {
#     "type": "GarbageCollector",
#     "name": "G1 Old Generation"
#   }
# }
# ----
# 
# [source,json]
# ----
# {
#   "@timestamp": "2019-08-20T16:51:07.512Z",
#   "jvm": {
#     "jmx": {
#       "collection_count": 2,
#       "CollectionTime":  11
#     }
#   },
#   "labels": {
#     "type": "GarbageCollector",
#     "name": "G1 Young Generation"
#   }
# }
# ----
# 
# 
# The agent also supports composite values for the attribute value.
# In this example, `HeapMemoryUsage` is a composite value, consisting of `committed`, `init`, `used` and `max`.
# ----
# object_name[java.lang:type=Memory] attribute[HeapMemoryUsage:metric_name=heap] 
# ----
# 
# The resulting documents in Elasticsearch look similar to this:
# 
# [source,json]
# ----
# {
#   "@timestamp": "2019-08-20T16:51:07.512Z",
#   "jvm": {
#     "jmx": {
#       "heap": {
#         "max":      4294967296,
#         "init":      268435456,
#         "committed": 268435456,
#         "used":       22404496
#       }
#     }
#   },
#   "labels": {
#     "type": "Memory"
#   }
# }
# ----
# 
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# capture_jmx_metrics=

############################################
# Logging                                  #
############################################

# Sets the logging level for the agent.
# This option is case-insensitive.
# 
# NOTE: `CRITICAL` is a valid option, but it is mapped to `ERROR`; `WARN` and `WARNING` are equivalent; 
# `OFF` is only available since version 1.16.0
#
# Valid options: OFF, ERROR, CRITICAL, WARN, WARNING, INFO, DEBUG, TRACE
# This setting can be changed at runtime
# Type: LogLevel
# Default value: INFO
#
# log_level=INFO

# Sets the path of the agent logs.
# The special value `_AGENT_HOME_` is a placeholder for the folder the elastic-apm-agent.jar is in.
# Example: `_AGENT_HOME_/logs/elastic-apm.log`
# 
# When set to the special value 'System.out',
# the logs are sent to standard out.
# 
# NOTE: When logging to a file,
# the log will be formatted in new-line-delimited JSON.
# When logging to std out, the log will be formatted as plain-text.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: System.out
#
# log_file=System.out

# A boolean specifying if the agent should integrate into SLF4J's https://www.slf4j.org/api/org/slf4j/MDC.html[MDC] to enable trace-log correlation.
# If set to `true`, the agent will set the `trace.id` and `transaction.id` for the currently active spans and transactions to the MDC.
# Since version 1.16.0, the agent also adds `error.id` of captured error to the MDC just before the error message is logged.
# See <<log-correlation>> for more details.
# 
# NOTE: While it's allowed to enable this setting at runtime, you can't disable it without a restart.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: false
#
# enable_log_correlation=false

# Specifying whether and how the agent should automatically reformat application logs 
# into {ecs-logging-ref}/index.html[ECS-compatible JSON], suitable for ingestion into Elasticsearch for 
# further Log analysis. This functionality is available for log4j1, log4j2 and Logback. 
# Once this option is enabled with any valid option, log correlation will be activated as well, regardless of the <<config-enable-log-correlation,`enable_log_correlation`>> configuration. 
# 
# Available options:
# 
#  - OFF - application logs are not reformatted. 
#  - SHADE - agent logs are reformatted and "shade" ECS-JSON-formatted logs are automatically created in 
#    addition to the original application logs. Shade logs will have the same name as the original logs, 
#    but with the ".ecs.json" extension instead of the original extension. Destination directory for the 
#    shade logs can be configured through the <<config-log-ecs-reformatting-dir,`log_ecs_reformatting_dir`>> 
#    configuration. Shade logs do not inherit file-rollover strategy from the original logs. Instead, they 
#    use their own size-based rollover strategy according to the <<config-log-file-size, `log_file_size`>> 
#    configuration and while allowing maximum of two shade log files.
#  - REPLACE - similar to `SHADE`, but the original logs will not be written. This option is useful if 
#    you wish to maintain similar logging-related overhead, but write logs to a different location and/or 
#    with a different file extension.
#  - OVERRIDE - same log output is used, but in ECS-compatible JSON format instead of the original format. 
# 
# NOTE: while `SHADE` and `REPLACE` options are only relevant to file log appenders, the `OVERRIDE` option 
# is also valid for other appenders, like System out and console
#
# Valid options: OFF, SHADE, REPLACE, OVERRIDE
# This setting can be changed at runtime
# Type: LogEcsReformatting
# Default value: OFF
#
# log_ecs_reformatting=OFF

# Only formatters that match an item on this list will be automatically reformatted to ECS when 
# <<config-log-ecs-reformatting,`log_ecs_reformatting`>> is set to any option other than `OFF`. 
# A formatter is the logging-framework-specific entity that is responsible for the formatting 
# of log events. For example, in log4j it would be a `Layout` implementation, whereas in Logback it would 
# be an `Encoder` implementation. 
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: comma separated list
# Default value: *PatternLayout*,org.apache.log4j.SimpleLayout,ch.qos.logback.core.encoder.EchoEncoder
#
# log_ecs_formatter_allow_list=*PatternLayout*,org.apache.log4j.SimpleLayout,ch.qos.logback.core.encoder.EchoEncoder

# If <<config-log-ecs-reformatting,`log_ecs_reformatting`>> is set to `SHADE` or `REPLACE`, 
# the shade log files will be written alongside the original logs in the same directory by default. 
# Use this configuration in order to write the shade logs into an alternative destination. Omitting this 
# config or setting it to an empty string will restore the default behavior. If relative path is used, 
# this path will be used relative to the original logs directory.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# log_ecs_reformatting_dir=

# The size of the log file.
# 
# The agent always keeps one history file so that the max total log file size is twice the value of this setting.
# 
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: ByteValue
# Default value: 50mb
#
# log_file_size=50mb

# Defines the log format when logging to `System.out`.
# 
# When set to `JSON`, the agent will format the logs in an https://github.com/elastic/ecs-logging-java[ECS-compliant JSON format]
# where each log event is serialized as a single line.
#
# Valid options: PLAIN_TEXT, JSON
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: LogFormat
# Default value: PLAIN_TEXT
#
# log_format_sout=PLAIN_TEXT

# Defines the log format when logging to a file.
# 
# When set to `JSON`, the agent will format the logs in an https://github.com/elastic/ecs-logging-java[ECS-compliant JSON format]
# where each log event is serialized as a single line.
# 
#
# Valid options: PLAIN_TEXT, JSON
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: LogFormat
# Default value: PLAIN_TEXT
#
# log_format_file=PLAIN_TEXT

############################################
# Messaging                                #
############################################

# Used to filter out specific messaging queues/topics from being traced. 
# 
# This property should be set to an array containing one or more strings.
# When set, sends-to and receives-from the specified queues/topic will be ignored.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# ignore_message_queues=

############################################
# Metrics                                  #
############################################

# Replaces dots with underscores in the metric names for custom metrics, such as Micrometer metrics.
# 
# WARNING: Setting this to `false` can lead to mapping conflicts as dots indicate nesting in Elasticsearch.
# An example of when a conflict happens is two metrics with the name `foo` and `foo.bar`.
# The first metric maps `foo` to a number and the second metric maps `foo` as an object.
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: true
#
# dedot_custom_metrics=true

############################################
# Profiling                                #
############################################

# Set to `true` to make the agent create spans for method executions based on
# https://github.com/jvm-profiling-tools/async-profiler[async-profiler], a sampling aka statistical profiler.
# 
# Due to the nature of how sampling profilers work,
# the duration of the inferred spans are not exact, but only estimations.
# The <<config-profiling-inferred-spans-sampling-interval, `profiling_inferred_spans_sampling_interval`>> lets you fine tune the trade-off between accuracy and overhead.
# 
# The inferred spans are created after a profiling session has ended.
# This means there is a delay between the regular and the inferred spans being visible in the UI.
# 
# NOTE: This feature is not available on Windows
#
# This setting can be changed at runtime
# Type: Boolean
# Default value: false
#
# profiling_inferred_spans_enabled=false

# The frequency at which stack traces are gathered within a profiling session.
# The lower you set it, the more accurate the durations will be.
# This comes at the expense of higher overhead and more spans for potentially irrelevant operations.
# The minimal duration of a profiling-inferred span is the same as the value of this setting.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 50ms.
# The default unit for this option is ms.
# Default value: 50ms
#
# profiling_inferred_spans_sampling_interval=50ms

# The minimum duration of an inferred span.
# Note that the min duration is also implicitly set by the sampling interval.
# However, increasing the sampling interval also decreases the accuracy of the duration of inferred spans.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 0ms.
# The default unit for this option is ms.
# Default value: 0ms
#
# profiling_inferred_spans_min_duration=0ms

# If set, the agent will only create inferred spans for methods which match this list.
# Setting a value may slightly reduce overhead and can reduce clutter by only creating spans for the classes you are interested in.
# Example: `org.example.myapp.*`
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: *
#
# profiling_inferred_spans_included_classes=*

# Excludes classes for which no profiler-inferred spans should be created.
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: (?-i)java.*,(?-i)javax.*,(?-i)sun.*,(?-i)com.sun.*,(?-i)jdk.*,(?-i)org.apache.tomcat.*,(?-i)org.apache.catalina.*,(?-i)org.apache.coyote.*,(?-i)org.jboss.as.*,(?-i)org.glassfish.*,(?-i)org.eclipse.jetty.*,(?-i)com.ibm.websphere.*,(?-i)io.undertow.*
#
# profiling_inferred_spans_excluded_classes=(?-i)java.*,(?-i)javax.*,(?-i)sun.*,(?-i)com.sun.*,(?-i)jdk.*,(?-i)org.apache.tomcat.*,(?-i)org.apache.catalina.*,(?-i)org.apache.coyote.*,(?-i)org.jboss.as.*,(?-i)org.glassfish.*,(?-i)org.eclipse.jetty.*,(?-i)com.ibm.websphere.*,(?-i)io.undertow.*

# Profiling requires that the https://github.com/jvm-profiling-tools/async-profiler[async-profiler] shared library is exported to a temporary location and loaded by the JVM.
# The partition backing this location must be executable, however in some server-hardened environments, `noexec` may be set on the standard `/tmp` partition, leading to `java.lang.UnsatisfiedLinkError` errors.
# Set this property to an alternative directory (e.g. `/var/tmp`) to resolve this.
# If unset, the value of the `java.io.tmpdir` system property will be used.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# profiling_inferred_spans_lib_directory=

############################################
# Reporter                                 #
############################################

# This string is used to ensure that only your agents can send data to your APM server.
# 
# Both the agents and the APM server have to be configured with the same secret token.
# Use if APM Server requires a token.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# secret_token=

# This string is used to ensure that only your agents can send data to your APM server.
# 
# Agents can use API keys as a replacement of secret token, APM server can have multiple API keys.
# When both secret token and API key are used, API key has priority and secret token is ignored.
# Use if APM Server requires an API key.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: String
# Default value: 
#
# api_key=

# The URL for your APM Server
#
# The URL must be fully qualified, including protocol (http or https) and port.
# 
# If SSL is enabled on the APM Server, use the `https` protocol. For more information, see 
# <<ssl-configuration>>.
# 
# If outgoing HTTP traffic has to go through a proxy,
# you can use the Java system properties `http.proxyHost` and `http.proxyPort` to set that up.
# See also https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html[Java's proxy documentation] 
# for more information.
# 
# NOTE: This configuration can only be reloaded dynamically as of 1.8.0
#
# This setting can be changed at runtime
# Type: URL
# Default value: http://localhost:8200
#
# server_url=http://localhost:8200

# The URLs for your APM Servers
#
# The URLs must be fully qualified, including protocol (http or https) and port.
# 
# Fails over to the next APM Server URL in the event of connection errors.
# Achieves load-balancing by shuffling the list of configured URLs.
# When multiple agents are active, they'll tend towards spreading evenly across the set of servers due to randomization.
# 
# If SSL is enabled on the APM Server, use the `https` protocol. For more information, see 
# <<ssl-configuration>>.
# 
# If outgoing HTTP traffic has to go through a proxy,
# you can use the Java system properties `http.proxyHost` and `http.proxyPort` to set that up.
# See also https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html[Java's proxy documentation] 
# for more information.
# 
# NOTE: This configuration is specific to the Java agent and does not align with any other APM agent. In order 
# to use a cross-agent config, use <<config-server-url>> instead, which is the recommended option regardless if you 
# are only setting a single URL.
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# server_urls=

# If set to `true`, the agent will work as usual, except from any task requiring communication with 
# the APM server. Events will be dropped and the agent won't be able to receive central configuration, which 
# means that any other configuration cannot be changed in this state without restarting the service. 
# An example use case for this would be maintaining the ability to create traces and log 
# trace/transaction/span IDs through the log correlation feature, without setting up an APM Server.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: false
#
# disable_send=false

# Server timeout
#
# If a request to the APM server takes longer than the configured timeout,
# the request is cancelled and the event (exception or transaction) is discarded.
# Set to 0 to disable timeouts.
# 
# WARNING: If timeouts are disabled or set to a high value, your app could experience memory issues if the APM server times out.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 5s.
# The default unit for this option is s.
# Default value: 5s
#
# server_timeout=5s

# By default, the agent verifies the SSL certificate if you use an HTTPS connection to the APM server.
# 
# Verification can be disabled by changing this setting to false.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: true
#
# verify_server_cert=true

# The maximum size of buffered events.
# 
# Events like transactions and spans are buffered when the agent can't keep up with sending them to the APM Server or if the APM server is down.
# 
# If the queue is full, events are rejected which means you will lose transactions and spans in that case.
# This guards the application from crashing in case the APM server is unavailable for a longer period of time.
# 
# A lower value will decrease the heap overhead of the agent,
# while a higher value makes it less likely to lose events in case of a temporary spike in throughput.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Integer
# Default value: 512
#
# max_queue_size=512

# Whether each transaction should have the process arguments attached.
# Disabled by default to save disk space.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: Boolean
# Default value: false
#
# include_process_args=false

# Maximum time to keep an HTTP request to the APM Server open for.
# 
# NOTE: This value has to be lower than the APM Server's `read_timeout` setting.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 10s.
# The default unit for this option is s.
# Default value: 10s
#
# api_request_time=10s

# The maximum total compressed size of the request body which is sent to the APM server intake api via a chunked encoding (HTTP streaming).
# Note that a small overshoot is possible.
# 
# Allowed byte units are `b`, `kb` and `mb`. `1kb` is equal to `1024b`.
#
# This setting can be changed at runtime
# Type: ByteValue
# Default value: 768kb
#
# api_request_size=768kb

# The interval at which the agent sends metrics to the APM Server.
# Must be at least `1s`.
# Set to `0s` to deactivate.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 30s.
# The default unit for this option is s.
# Default value: 30s
#
# metrics_interval=30s

# Disables the collection of certain metrics.
# If the name of a metric matches any of the wildcard expressions, it will not be collected.
# Example: `foo.*,bar.*`
# 
# This option supports the wildcard `*`, which matches zero or more characters.
# Examples: `/foo/*/bar/*/baz*`, `*foo*`.
# Matching is case insensitive by default.
# Prepending an element with `(?-i)` makes the matching case sensitive.
#
# This setting can not be changed at runtime. Changes require a restart of the application.
# Type: comma separated list
# Default value: 
#
# disable_metrics=

############################################
# Stacktrace                               #
############################################

# Used to determine whether a stack trace frame is an 'in-app frame' or a 'library frame'.
# This allows the APM app to collapse the stack frames of library code,
# and highlight the stack frames that originate from your application.
# Multiple root packages can be set as a comma-separated list;
# there's no need to configure sub-packages.
# Because this setting helps determine which classes to scan on startup,
# setting this option can also improve startup time.
# 
# You must set this option in order to use the API annotations `@CaptureTransaction` and `@CaptureSpan`.
# 
# **Example**
# 
# Most Java projects have a root package, e.g. `com.myproject`. You can set the application package using Java system properties:
# `-Delastic.apm.application_packages=com.myproject`
# 
# If you are only interested in specific subpackages, you can separate them with commas:
# `-Delastic.apm.application_packages=com.myproject.api,com.myproject.impl`
#
# This setting can be changed at runtime
# Type: comma separated list
# Default value: 
#
# application_packages=

# Setting it to 0 will disable stack trace collection. Any positive integer value will be used as the maximum number of frames to collect. Setting it -1 means that all frames will be collected.
#
# This setting can be changed at runtime
# Type: Integer
# Default value: 50
#
# stack_trace_limit=50

# While this is very helpful to find the exact place in your code that causes the span, collecting this stack trace does have some overhead. 
# When setting this option to a negative value, like `-1ms`, stack traces will be collected for all spans. Setting it to a positive value, e.g. `5ms`, will limit stack trace collection to spans with durations equal to or longer than the given value, e.g. 5 milliseconds.
# 
# To disable stack trace collection for spans completely, set the value to `0ms`.
#
# This setting can be changed at runtime
# Type: TimeDuration
# Supports the duration suffixes ms, s and m. Example: 5ms.
# The default unit for this option is ms.
# Default value: 5ms
#
# span_frames_min_duration=5ms

----
