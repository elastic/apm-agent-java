ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/java[elastic.co]
endif::[]

[[opentracing-bridge]]
== Elastic APM OpenTracing bridge

NOTE: Latest supported OpenTracing version: 0.33 (as of agent and OpenTracing-bridge version 1.9.0)

The Elastic APM OpenTracing bridge allows to create Elastic APM `Transactions` and `Spans`,
using the OpenTracing API.
In other words,
it translates the calls to the OpenTracing API to Elastic APM and thus allows for reusing existing instrumentation.

The first span of a service will be converted to an Elastic APM
{apm-overview-ref-v}/transactions.html[`Transaction`],
subsequent spans are mapped to Elastic APM
{apm-overview-ref-v}/transaction-spans.html[`Span`].

[float]
[[operation-modes]]
=== Operation Modes

This bridge allows for different operation modes in combination with the Elastic APM `javaagent`

Noop::
+
--
If the `javaagent` is not specified, the bridge is in noop mode and does not actually record and report spans.
--

Mix and Match::
+
--
If you want to leverage the auto instrumentation of Elastic APM,
but also want do create custom spans or use the OpenTracing API to add custom tags to the spans created by Elastic APM,
you can just do that.
The OpenTracing bridge and the standard Elastic APM API interact seamlessly.
--

Manual instrumentation::
+
--
If you don't want Elastic APM to auto-instrument known frameworks,
but instead only rely on manual instrumentation,
disable the auto instrumentation setting the configuration option <<config-instrument,`instrument`>> to `false`.
--

[float]
[[getting-started]]
=== Getting started
The first step in getting started with the OpenTracing API bridge is to declare a dependency to the API:

[source,xml]
.pom.xml
----
<dependency>
    <groupId>co.elastic.apm</groupId>
    <artifactId>apm-opentracing</artifactId>
    <version>${elastic-apm.version}</version>
</dependency>
----

[source,groovy]
.build.gradle
----
compile "co.elastic.apm:apm-opentracing:$elasticApmVersion"
----

Replace the version placeholders with the
link:https://search.maven.org/search?q=g:co.elastic.apm%20AND%20a:apm-opentracing[
latest version from maven central]:
image:https://img.shields.io/maven-central/v/co.elastic.apm/apm-opentracing.svg[Maven Central]


[float]
[[init-tracer]]
=== Initialize tracer

[source,java]
----
import co.elastic.apm.opentracing.ElasticApmTracer;
import io.opentracing.Tracer

Tracer tracer = new ElasticApmTracer();
----


[float]
[[elastic-apm-tags]]
=== Elastic APM specific tags

Elastic APM defines some tags which are not included in the OpenTracing API but are relevant in the context of Elastic APM.

- `type` - sets the type of the transaction/span,
  for example `request`, `ext` or `db`
- `subtype` - sets the subtype of the span,
  for example `http`, `mysql` or `jsf`
- `action` - sets the action related to a span,
  for example `query`, `execute` or `render`
- `user.id` - sets the user id,
  appears in the "User" tab in the transaction details in the Elastic APM UI
- `user.email` - sets the user email,
  appears in the "User" tab in the transaction details in the Elastic APM UI
- `user.username` - sets the user name,
  appears in the "User" tab in the transaction details in the Elastic APM UI
- `result` - sets the result of the transaction. Overrides the default value of `success`.
  If the `error` tag is set to `true`, the default value is `error`.
  Setting `http.status_code` to `200`, for example, implicitly sets the result to `HTTP 2xx` if not explicitly set otherwise.

[float]
[[unsupported]]
=== Caveats
Not all features of the OpenTracing API are supported.

[float]
[[propagation]]
==== Context propagation
This bridge only supports the formats `Format.Builtin.TEXT_MAP` and `Format.Builtin.HTTP_HEADERS`.
`Format.Builtin.BINARY` is currently not supported.

[float]
[[references]]
==== Span References
Currently, this bridge only supports `child_of` references.
Other references,
like `follows_from` are not supported yet.

[float]
[[baggage]]
==== Baggage
The `Span.setBaggageItem(String, String)` method is not supported.
Baggage items are silently dropped.

[float]
[[logs]]
==== Logs
Only exception logging is supported.
Logging an Exception on the OpenTracing span will create an Elastic APM
{apm-overview-ref-v}/errors.html[`Error`].
Example:

[source,java]
----
Exception e = ...
span.log(
    Map.of(
        "event", "error",
        "error.object", e
    )
)
----

Other logs are silently dropped.
