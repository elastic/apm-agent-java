ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/java[elastic.co]
endif::[]

[[metrics]]
== Metrics

The Java agent tracks certain system and application metrics.
Some of them are have built-in visualizations and some can only be visualized with custom Kibana dashboards.

These metrics will be sent regularly to the APM Server and from there to Elasticsearch.
You can adjust the interval with the setting <<config-metrics-interval>>.

The metrics will be stored in the `apm-*` index and have the `processor.event` property set to `metric`.

[float]
[[metrics-system]]
=== System metrics

As of version 6.6, these metrics will be visualized in the APM UI.

For more system metrics, consider installing {metricbeat-ref}/index.html[metricbeat] on your hosts.

*`system.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time in states other than Idle and IOWait, normalised by the number of cores.
--


*`system.process.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent by the process since the last event.
This value is normalized by the number of CPU cores and it ranges from 0 to 100%.
--


*`system.memory.total`*::
+
--
type: long

format: bytes

Total memory.
--


*`system.memory.actual.free`*::
+
--
type: long

format: bytes

Actual free memory in bytes. It is calculated based on the OS.
On Linux it consists of the free memory plus caches and buffers.
On OSX it is a sum of free memory and the inactive memory.
On Windows, this value does not include memory consumed by system caches and buffers.
--


*`system.process.memory.size`*::
+
--
type: long

format: bytes

The total virtual memory the process has.
--

[float]
[[metrics-jvm]]
=== JVM Metrics

NOTE: As of now, there are no built-in visualizations for these metrics,
so you will need to create custom Kibana dashboards for them.

*`jvm.memory.heap.used`*::
+
--
type: long

format: bytes

The amount of used heap memory in bytes
--


*`jvm.memory.heap.committed`*::
+
--
type: long

format: bytes

The amount of heap memory in bytes that is committed for the Java virtual machine to use.
This amount of memory is guaranteed for the Java virtual machine to use.
--


*`jvm.memory.heap.max`*::
+
--
type: long

format: bytes

The maximum amount of heap memory in bytes that can be used for memory management.
If the maximum memory size is undefined, the value is `-1`.
--


*`jvm.memory.non_heap.used`*::
+
--
type: long

format: bytes

The amount of used non-heap memory in bytes
--


*`jvm.memory.non_heap.committed`*::
+
--
type: long

format: bytes

The amount of non-heap memory in bytes that is committed for the Java virtual machine to use.
This amount of memory is guaranteed for the Java virtual machine to use.
--


*`jvm.memory.non_heap.max`*::
+
--
type: long

format: bytes

The maximum amount of non-heap memory in bytes that can be used for memory management.
If the maximum memory size is undefined, the value is `-1`.
--


*`jvm.gc.count`*::
+
--
type: long

labels

* name: The name representing this memory manager (for example `G1 Young Generation`, `G1 Old Generation`)

The total number of collections that have occurred.
--


*`jvm.gc.time`*::
+
--
type: long

format: ms

labels

* name: The name representing this memory manager (for example `G1 Young Generation`, `G1 Old Generation`)

The approximate accumulated collection elapsed time in milliseconds.
--


*`jvm.gc.alloc`*::
+
--
type: long

format: bytes

An approximation of the total amount of memory,
in bytes, allocated in heap memory.
--

