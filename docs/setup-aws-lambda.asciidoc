[[aws-lambda]]
=== Monitoring AWS Lambda Java Functions
:layer-section-type: with-agent

The Java APM Agent can be used with AWS Lambda to monitor the execution of your AWS Lambda functions.

[float]
[[aws-lambda-java-quick-start]]
=== Quick Start

To get started with APM for your Java AWS Lambda functions, follow the steps below.

[float]
[[aws-lambda-java-prerequisites]]
==== Prerequisites

. You need an APM Server to send APM data to. Follow the {apm-guide-ref}/apm-quick-start.html[APM Quick start] if you have not set one up yet. For the best-possible performance, we recommend setting up APM on {ecloud} in the same AWS region as your AWS Lambda functions.
. Make sure you are using one of the supported AWS Lambda Java runtimes:
+
--
include::supported-technologies.asciidoc[tag=aws-lambda-runtimes]
--

[float]
==== Step 1: Select the AWS Region and Architecture

include::{apm-aws-lambda-root}/docs/lambda-selector/lambda-attributes-selector.asciidoc[]

[float]
==== Step 2: Add the APM Layers to your Lambda function

include::{apm-aws-lambda-root}/docs/lambda-selector/extension-arn-replacement.asciidoc[]
include::./lambda/java-arn-replacement.asciidoc[]

Both the {apm-guide-ref}/aws-lambda-arch.html[APM Lambda Extension] and the Java APM Agent are added to your Lambda function as https://docs.aws.amazon.com/lambda/latest/dg/invocation-layers.html[AWS Lambda Layers]. Therefore, you need to add the corresponding Layer ARNs (identifiers) to your Lambda function.

include::{apm-aws-lambda-root}/docs/add-extension/add-extension-layer-widget.asciidoc[]

[float]
==== Step 3: Configure APM on AWS Lambda

The APM Lambda Extension and the APM Java agent are configured through environment variables on the AWS Lambda function.

For the minimal configuration, you will need the _APM Server URL_ to set the destination for APM data and an _{apm-guide-ref}/secret-token.html[APM Secret Token]_.
If you prefer to use an {apm-guide-ref}/api-key.html[APM API key] instead of the APM secret token, use the `ELASTIC_APM_API_KEY` environment variable instead of `ELASTIC_APM_SECRET_TOKEN` in the following configuration.

For production environments, we recommend {apm-guide-ref}/aws-lambda-secrets-manager.html[using the AWS Secrets Manager to store your APM authentication key] instead of providing the secret value as plaintext in the environment variables.

include::./lambda/configure-lambda-widget.asciidoc[]

You can optionally <<configuration, fine-tune the Java agent >> or the {apm-guide-ref}/aws-lambda-config-options.html[configuration of the APM Lambda Extension].

That's it; After following the steps above, you're ready to go!
Your Lambda function invocations should be traced from now on.

Read on to learn more about the features and limitations of the Java APM Agent on AWS Lambda Functions.

[float]
[[aws-lambda-features-and-caveats]]
=== Features and Caveats

The AWS Lambda as a runtime behaves differently from conventional runtimes.
While most APM and monitoring concepts apply to AWS Lambda, there are a few differences and limitations to be aware of.

[float]
[[aws-lambda-performance-monitoring]]
==== Performance monitoring

Elastic APM automatically measures the performance of your lambda function executions.
It records traces for database queries, external HTTP requests,
and other slow operations that happen during execution.

By default, the agent will trace <<supported-technologies,the usual supported technologies>>.
To trace other events, take a look at <<java-method-monitoring, additional method tracing options>>, however note that
due to its asynchronous nature, the <<method-sampling-based, Sampling Profiler>> is not a valid option for AWS Lambda.

[float]
[[aws-lambda-error-monitoring]]
==== Error monitoring

Whenever an `Exception` is thrown by your function handler method, the agent will send an error event to the APM Server
and the corresponding transaction will be recorded as a failed transaction.
Errors related to traced spans will be sent as well.

[float]
[[aws-lambda-caveats]]
==== Caveats
* System and custom metrics are not collected for Lambda functions. This is both because most of those are irrelevant
and because the interval-based event sending model is not suitable for FaaS environments.
* Cold starts can be significantly slower when the agent is installed. If this is an issue, following are ways to deal with slow code
starts:
** If the only issue with slower cold starts is Lambda timing out, consider increasing the configured timeout.
** The higher memory limit you would allow for your Function, the smaller this effect would be. This is irrelevant for
subsequent Function invocations, it is only relevant for cold starts.
** Much of the startup delay is related to the amount of enabled instrumentations. An enabled instrumentation will contribute to this
overhead regardless of it being applicable for your specific Lambda function. You can considerably reduce the related overhead by
specifying a limited list of enabled instrumentations through the <<config-enable-instrumentations, `enable_instrumentations`>> config.
An automatic way to generate such list is by invoking your Lambda with the agent's default configurations and a <<config-log-level,
`log_level`>> of `INFO` or lower. After the first lambda invocation, the agent would log a message with the following format: `Used
instrumentation groups: [aws-lambda, executor, executor-collection, fork-join, ssl-context, urlconnection]`.
* The <<method-sampling-based,Sampling Profiler>> feature would not work because it relies on profiling sessions and
subsequent asynchronous processing of the collected data.
