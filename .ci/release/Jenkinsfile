#!/usr/bin/env groovy

@Library('apm@current') _
pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-agent-java'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'
    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    NEXUS_SECRET = 'secret/apm-team/ci/nexus'
    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'
    HOME = "${env.WORKSPACE}"
    JAVA_HOME = "${env.HUDSON_HOME}/.java/java10"
    PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
    SLACK_CHANNEL = '#apm-agent-java'
    NOTIFY_TO = 'build-apm+apm-agent-java@elastic.co'
    BRANCH_SPECIFIER = "${params.branch_specifier}"
  }
  options {
    timeout(time: 3, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    durabilityHint('PERFORMANCE_OPTIMIZED')

  }
  parameters {
    string(name: 'branch_specifier', defaultValue: 'stable', description: "What branch to release from?")
    booleanParam(name: 'check_branch_ci_status', defaultValue: true, description: "Check for failing tests in the given branch (if no stable branch)?")
  }
  stages {
    stage('Initializing'){
      options { skipDefaultCheckout() }
      stages {
        stage('Checkout') {
          steps {
            gitCheckout(
                basedir: "${BASE_DIR}",
                branch: "${BRANCH_SPECIFIER}",
                repo: 'git@github.com:elastic/apm-agent-java.git',
                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
                shallow: false
            )
            dir("${BASE_DIR}") {
              setupAPMGitEmail()
            }

            dir("${BASE_DIR}") {
              script {
                env.TAG_BARE = sh(script: "./scripts/jenkins/tags.sh bare", returnStdout: true)
                env.TAG_VER = sh(script: "./scripts/jenkins/tags.sh ver", returnStdout: true)
                env.BRANCH_DOT_X = sh(script: "./scripts/jenkins/tags.sh dot_x", returnStdout: true)
              }
            }
            dir("${BASE_DIR}") {
              withEnv(["BRANCH_NAME=tags/${env.TAG_BARE}"]){
                withGitRelease() {
                  stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)
                }
              }
            }
            deleteDir()
            dir("${BASE_DIR}") {
              unstash 'source'
            }
          }
        }
      }
    }
    stage('Release') {
      options { skipDefaultCheckout () }
      stages{
        stage('Check oss.sonatype.org') {
          when {
            expression { return false }
          }
          steps {
            // If this fails, an exception should be thrown and execution will halt
            dir("${BASE_DIR}"){
              script {
                def r = sh(label: "Check Maven status", script: "./scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH", returnStatus: true)
                if (r == 1) {
                  error("Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.")
                }
              }
            }
          }
        }
        stage('Check build status') {
          when {
            allOf {
              expression { params.check_branch_ci_status }
              not { branch 'stable' }
            }
          }
          steps {
            // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/"${BRANCH_SPECIFIER}"/
            whenTrue(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', "${BRANCH_SPECIFIER}"], return_boolean: true)) {
              input(message: "WARNING! The ${BRANCH_SPECIFIER} build is not passing. Do you wish to continue?")
            }
          }
        }
        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {
          when {
            expression { return false }
          }
          steps {
            input(message: """
            Update CHANGELOG.asciidoc to reflect the new version release:
            Go over PRs or git log and add bug fixes and features.
            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).

            Click 'Proceed' to confirm that this step has been completed and changes have been pushed or Abort to stop the build.
            """
            )
            dir("${BASE_DIR}") {
              git credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba', url: 'git@github.com:elastic/apm-agent-java.git'
            }
          }
        }
        stage('Set release version') {
          when {
            expression { return false }
          }
          steps {
            dir("${BASE_DIR}"){
              script {
                def snapshot_version = mvnVersion(showQualifiers: true)
                def release_version = snapshot_version.minus('-SNAPSHOT')
                def user_release_version = input(message: "Please enter version to release:", parameters: [[
                    $class: 'StringParameterDefinition',
                    name: 'Release version',
                    defaultValue: "${release_version}",
                    description: "Current project version is ${snapshot_version}, will be released as ${release_version} if unchanged. Input release version without '-SNAPSHOT' suffix"
                  ]])
                if( release_version.equals(user_release_version) ) {
                    echo "changing project version '${snapshot_version}' not required to release ${release_version}"
                } else {
                    echo "changing project version from '${snapshot_version}' to '${user_release_version}' to prepare release ${user_release_version}."
                    sh(label: "mavenVersionUpdate", script: "./mvnw --batch-mode release:update-versions -DdevelopmentVersion=${user_release_version}-SNAPSHOT")
                    sh(script: "git commit -a -m 'Version bump ${user_release_version}'")
                    gitPush()
                }
              }
            }
          }
        }
        stage('Wait on internal CI') {
          when {
            expression { return false }
          }
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be pushed",
                          body: "Please go to (<${env.BUILD_URL}input|here>) to approve or reject within 12 hours.")
            input(message: "Start the release job on the internal CI. Click 'Proceed' once the job has succeeded or click 'Abort' if the release has failed and then manually undo the release.")
          }
        }
        stage('Nexus release') {
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be published in Nexus",
                         body: "Please go to (<https://oss.sonatype.org/|here>) to proceed with the manual nexus release. Login details in LastPass")
            input(message: "Go to https://oss.sonatype.org and proceed with the steps to close and release the staging artifact.")
          }
        }
        stage('Major Branch create/update') {
          steps {
            dir("${BASE_DIR}") {
              script {
                def isMajor = "${TAG_VER}".endsWith(".0.0")
                if (isMajor) {
                  // major release, create '.x' branch
                  sh(script: """
                    git checkout ${TAG_BARE}
                    git checkout -b ${BRANCH_DOT_X}
                  """)
                  gitPush()
                  input message: "This was a major version release. Please update the conf.yml in the docs repo before continuing", ok "Continue"
                } else {
                  // minor release, force-update existing '.x' branch. any change applied to '.x' branch, for example to
                  // fix doc or release notes should also have been applied to master/stable branch we are releasing from
                  sh(script: """
                    git fetch origin ${BRANCH_DOT_X} # ensure remote branch is fetched for local checkout
                    git checkout --track origin/${BRANCH_DOT_X}
                    git reset --hard ${TAG_BARE}
                    """)
                  gitPush(args: "-f ${BRANCH_DOT_X}")
                }
              }
            }
          }
          post {
            cleanup {
              dir("${BASE_DIR}") {
                // restore git state before updating .x branch, otherwise later external scripts will use
                // the version when the tag was created, which might not match the release branch state
                sh(script: """
                    git fetch origin ${BRANCH_SPECIFIER} # ensure remote branch is fetched for local checkout
                    git checkout --track origin/${BRANCH_SPECIFIER}
                """)
              }
            }
          }
        }
        stage('Create GitHub release draft') {
          steps {
            dir("${BASE_DIR}"){
              script {
                // Construct the URL with anchor for the release notes
                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0
                def finalUrl = "https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-${BRANCH_DOT_X}.html#release-notes-${TAG_VER}"
                githubEnv()
                def ret = githubReleaseCreate(
                        draft: true,
                        tagName: "${TAG_BARE}",
                        releaseName: "Release ${TAG_VER}",
                        body: "[Release Notes for ${TAG_VER}](${finalUrl})")
                env.RELEASE_ID = ret['id']
                env.RELEASE_NOTES_URL = finalUrl
              }
            }
          }
        }
        stage('Wait for artifact to be available in Maven Central') {
          steps {
            dir("${BASE_DIR}"){
              script {
                def fullUrl = "https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/${TAG_VER}/elastic-apm-agent-${TAG_VER}.pom"
                waitUntil(initialRecurrencePeriod: 60000) {
                  script {
                    def ret = sh(script: "curl -fs '${fullUrl}' >/dev/null 2>&1", returnStatus: true)
                    echo "Waiting for the artifacts to be published on Sonatype"
                    return ret == 0
                  }
                }
              }
            }
          }
        }
        stage('Update Cloudfoundry') {
          steps {
            dir("${BASE_DIR}"){
              sh(script: "./scripts/jenkins/update_cloudfoundry.sh")
              gitPush()
            }
          }
        }
        stage('Publish release on GitHub') {
          steps {
            waitUntil(initialRecurrencePeriod: 60000) {
              dir("${BASE_DIR}"){
                script {
                  echo "Waiting for the release notes to be available"
                  def ret = sh(script: "./scripts/jenkins/docs_check.sh ${TAG_VER}")
                  return ret == 0
                }
              }
            }
            githubEnv()
            githubReleasePublish(id: "${env.RELEASE_ID}")
          }
        }
        stage('Build and push Docker images') {
          steps {
            dir("${BASE_DIR}"){
              sh(label: "Build Docker image", script: "./scripts/jenkins/build_docker.sh")
              // Get Docker registry credentials
              dockerLogin(secret: "${ELASTIC_DOCKER_SECRET}", registry: 'docker.elastic.co')
              sh(label: "Push Docker image", script: "./scripts/jenkins/push_docker.sh")
            }
          }
          post {
            success {
              notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release published", body: "Great news! The release has completed successfully. (<${env.RUN_DISPLAY_URL}|Open>).")
            }
          }
        }
      }
      post {
        failure {
          notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Release failed", body: "(<${env.RUN_DISPLAY_URL}|Open>)")
        }
      }
    }
  }
}

def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}
