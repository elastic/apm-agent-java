#!/usr/bin/env groovy

@Library('apm@current') _
pipeline {
  agent { label 'ubuntu && linux-immutable-docker' }
  environment {
    REPO = 'apm-agent-java'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'
    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    NEXUS_SECRET = 'secret/apm-team/ci/nexus'
    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'
    HOME = "${env.WORKSPACE}"
    JAVA_HOME = "${env.HUDSON_HOME}/.java/java10"
    PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
    SLACK_CHANNEL = '#apm-agent-java'
    NOTIFY_TO = 'build-apm+apm-agent-java@elastic.co'
    BRANCH_SPECIFIER = "${params.branch_specifier}"
    SUFFIX_ARN_FILE = 'arn-file.md'
    JOB_GCS_CREDENTIALS = 'internal-ci-gcs-plugin'
    RELEASE_URL = "https://github.com/elastic/${env.REPO}/releases/tag"
  }
  options {
    timeout(time: 3, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  parameters {
    string(name: 'branch_specifier', defaultValue: 'stable', description: "What branch to release from?")
    booleanParam(name: 'check_branch_ci_status', defaultValue: true, description: "Check for failing tests in the given branch (if no stable branch)?")
    booleanParam(name: 'publish_aws_lambda', defaultValue: true, description: "Whether to upload the AWS lambda")
  }
  stages {
    stage('Initializing'){
      options { skipDefaultCheckout() }
      stages {
        stage('Checkout') {
          steps {
            gitCheckout(
                basedir: "${BASE_DIR}",
                branch: "${BRANCH_SPECIFIER}",
                repo: 'git@github.com:elastic/apm-agent-java.git',
                credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
                shallow: false
            )
            dir("${BASE_DIR}") {
              setupAPMGitEmail()
            }
            dir("${BASE_DIR}") {
              withEnv(["BRANCH_NAME=${BRANCH_SPECIFIER}"]){
                withGitRelease() { // sets up the git release setup (remote branches, current workspace state, ...)
                  stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)
                }
              }
            }
            deleteDir()
            dir("${BASE_DIR}") {
              unstash 'source'
            }
          }
        }
      }
    }
    stage('Release') {
      options { skipDefaultCheckout () }
      stages{
        stage('Check oss.sonatype.org') {
          steps {
            // If this fails, an exception should be thrown and execution will halt
            dir("${BASE_DIR}"){
              script {
                def r = sh(label: "Check Maven status", script: "./scripts/jenkins/check_maven.sh -u https://status.maven.org/api/v2/summary.json --component OSSRH", returnStatus: true)
                if (r == 1) {
                  error("Failing release build because Maven is the OSSRH component is not fully operational. See https://status.maven.org/ for more details.")
                }
              }
            }
          }
        }
        stage('Check build status') {
          when {
            allOf {
              expression { params.check_branch_ci_status }
              expression { env.BRANCH_SPECIFIER != 'stable' }
            }
          }
          steps {
            // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/"${BRANCH_SPECIFIER}"/
            whenTrue(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', "${BRANCH_SPECIFIER}"], return_boolean: true)) {
              notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] The ${BRANCH_SPECIFIER} build is not passing",
                           body: "Please go to (<${env.BUILD_URL}input|here>) to approve or reject within 12 hours.")
              input(message: "WARNING! The ${BRANCH_SPECIFIER} build is not passing. Do you wish to continue?")
            }
          }
        }
        stage('Require confirmation that CHANGELOG.asciidoc has been updated') {
          steps {
            input(message: """
            Update CHANGELOG.asciidoc to reflect the new version release:
            Go over PRs or git log and add bug fixes and features.
            Move release notes from the Unreleased sub-heading to the correct [[release-notes-{major}.x]] sub-heading (Example PR for 1.13.0 release).

            Click 'Proceed' to confirm that this step has been completed and changes have been pushed or Abort to stop the build.
            """
            )
            dir("${BASE_DIR}") {
              git(credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba', url: 'git@github.com:elastic/apm-agent-java.git', branch: 'main')
            }
          }
        }
        stage('Set release version') {
          steps {
            dir("${BASE_DIR}"){
              script {
                def snapshot_version = mvnVersion(showQualifiers: true)
                def release_version = snapshot_version.minus('-SNAPSHOT')
                def user_release_version = input(message: "Please enter version to release:", parameters: [[
                    $class: 'StringParameterDefinition',
                    name: 'Release version',
                    defaultValue: "${release_version}",
                    description: "Current project version is ${snapshot_version}, will be released as ${release_version} if unchanged. Input release version without '-SNAPSHOT' suffix"
                  ]])

                if( release_version.equals(user_release_version) ) {
                    echo "changing project version '${snapshot_version}' not required to release ${release_version}"
                } else {
                    echo "changing project version from '${snapshot_version}' to '${user_release_version}' to prepare release ${user_release_version}."
                    sh(label: "mavenVersionUpdate", script: "./mvnw --batch-mode release:update-versions -DdevelopmentVersion=${user_release_version}-SNAPSHOT")
                    sh(script: "git commit -a -m 'Version bump ${user_release_version}'")
                    gitPush()
                }

                env.RELEASE_TAG = "v" + user_release_version
                env.RELEASE_VERSION = user_release_version
                env.BRANCH_DOT_X = user_release_version.substring(0, user_release_version.indexOf('.'))+'.x'
                env.RELEASE_AWS_LAMBDA_VERSION = '-ver-' + user_release_version.replaceAll('\\.', '-')
              }
            }
          }
        }
        stage('Wait on internal CI') {
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be pushed",
                          body: "Please go to (<${env.BUILD_URL}input|here>) to approve or reject within 12 hours.")
            input(message: "Start the release job on the internal CI. Click 'Proceed' once the job has succeeded or click 'Abort' if the release has failed and then manually undo the release.")
          }
        }
        stage('Nexus release') {
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be published in Nexus",
                         body: "Please go to (<https://oss.sonatype.org/|here>) to proceed with the manual nexus release. Login details in LastPass")
            input(message: "Go to https://oss.sonatype.org and proceed with the steps to close and release the staging artifact.")
          }
        }
        stage('Major Branch create/update') {
          steps {
            dir("${BASE_DIR}") {
              script {
                sh(script: ".ci/release/update_major_branch.sh ${RELEASE_VERSION}")
                gitPush(args: "-f ${BRANCH_DOT_X}")

                def isMajor = env.RELEASE_VERSION.endsWith(".0.0")
                if (isMajor) {
                  input message: "This was a major version release. Please update the conf.yml in the docs repo before continuing", ok "Continue"
                }
              }
            }
          }
        }
        stage('Publish AWS Lambda') {
          when {
            expression { params.publish_aws_lambda }
          }
          environment {
            SOURCE_AWS_FILE = "elastic-apm-java-aws-lambda-layer-${RELEASE_VERSION}.zip"
            PATH_PREFIX = 'jobs/elastic+apm-agent-java+release/src/github.com/elastic/apm-agent-java/target/checkout/elastic-apm-agent/target'
          }
          steps {
            setEnvVar('ELASTIC_LAYER_NAME', "elastic-apm-java${env.RELEASE_AWS_LAMBDA_VERSION}")
            withAWSEnv(secret: 'secret/observability-team/ci/service-account/apm-aws-lambda', role_id: 'apm-vault-role-id', secret_id: 'apm-vault-secret-id',
                       forceInstallation: true, version: '2.4.10') {
              // Fetch lambda file
              googleStorageDownload(bucketUri: "gs://internal-ci-artifacts/${env.PATH_PREFIX}/${env.SOURCE_AWS_FILE}",
                                    credentialsId: "${JOB_GCS_CREDENTIALS}",
                                    localDirectory: "${BASE_DIR}/elastic-apm-agent/target",
                                    pathPrefix: env.PATH_PREFIX)
              dir("${BASE_DIR}"){
                sh(label: 'make publish-in-all-aws-regions', script: 'make -C .ci publish-in-all-aws-regions')
                sh(label: 'make create-arn-file', script: 'make -C .ci create-arn-file')
              }
            }
          }
          post {
            always {
              archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/.ci/${SUFFIX_ARN_FILE}")
            }
          }
        }
        stage('Create GitHub release draft') {
          steps {
            dir("${BASE_DIR}"){
              script {
                def arnFile = ".ci/${SUFFIX_ARN_FILE}"
                setEnvVar('ARN_CONTENT', fileExists(arnFile) ? readFile(arnFile) : '')
                // Construct the URL with anchor for the release notes
                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0
                def finalUrl = "https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-${BRANCH_DOT_X}.html#release-notes-${RELEASE_VERSION}"
                githubEnv()
                def ret = githubReleaseCreate(
                        draft: true,
                        tagName: "${RELEASE_TAG}",
                        releaseName: "Release ${RELEASE_VERSION}",
                        body: "[Release Notes for ${RELEASE_VERSION}](${finalUrl}) \n ${ARN_CONTENT}")
                env.RELEASE_ID = ret['id']
                env.RELEASE_NOTES_URL = finalUrl
              }
            }
          }
        }
        stage('Wait for artifact to be available in Maven Central') {
          steps {
            dir("${BASE_DIR}"){
              script {
                waitUntil(initialRecurrencePeriod: 60000) {
                  script {
                    def ret = sh(script: ".ci/release/wait_maven_artifact_published.sh ${RELEASE_VERSION}", returnStatus: true)
                    echo "Waiting for the artifacts to be published on Sonatype"
                    return ret == 0
                  }
                }
              }
            }
          }
        }
        stage('Update Cloudfoundry') {
          steps {
            dir("${BASE_DIR}"){
              sh(script: ".ci/release/update_cloudfoundry.sh ${RELEASE_VERSION}")
              gitPush()
            }
          }
        }
        stage('Build and push Docker images') {
          steps {
            dir("${BASE_DIR}"){
              // fetch agent artifact from remote repository
              withEnv(["SONATYPE_FALLBACK=1"]) {
                sh(label: "Build Docker image", script: "./scripts/jenkins/build_docker.sh")
                  // Get Docker registry credentials
                  dockerLogin(secret: "${ELASTIC_DOCKER_SECRET}", registry: 'docker.elastic.co', role_id: 'apm-vault-role-id', secret_id: 'apm-vault-secret-id')
                  sh(label: "Push Docker image", script: "./scripts/jenkins/push_docker.sh")
              }
            }
          }
        }
        stage('Publish release on GitHub') {
          steps {
            dir("${BASE_DIR}"){
              waitUntil(initialRecurrencePeriod: 60000) {
                script {
                  echo "Waiting for the release notes to be available"
                    def ret = sh(script: ".ci/release/wait_release_notes_published.sh ${RELEASE_VERSION}", returnStatus: true)
                    return ret == 0
                }
              }
              githubEnv()
              githubReleasePublish(id: "${env.RELEASE_ID}", name: "Release ${RELEASE_VERSION}")
            }
          }
        }
        stage('Opbeans') {
          environment {
            // The gitPush and gitCreateTag steps require this env variable
            REPO_NAME = 'opbeans-java'
          }
          steps {
            deleteDir()
            git(credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
                url: "git@github.com:elastic/${REPO_NAME}.git",
                branch: 'main')
            sh(script: ".ci/bump-version.sh ${RELEASE_VERSION}", label: 'Bump version')
            // The opbeans-java pipeline will trigger a release for the main branch
            gitPush()
            // The opbeans-java pipeline will trigger a release for the release tag
            gitCreateTag(tag: "${RELEASE_TAG}")
          }
        }
      }
      post {
        failure {
          notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Release failed", body: "(<${env.RUN_DISPLAY_URL}|Open>)")
        }
        success {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release published", body: "Great news! The release (<${env.RELEASE_URL}/${env.RELEASE_TAG}|${env.RELEASE_VERSION}>) has completed successfully. (<${env.RUN_DISPLAY_URL}|Open>).")
        }
      }
    }
  }
}

def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}
