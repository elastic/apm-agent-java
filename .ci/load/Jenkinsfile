// For documentation on this pipeline, please see the README.md in this directory
pipeline {
    agent { label 'linux && immutable' }
    environment {
        REPO = 'apm-agent-java'
        APP = 'spring-petclinic'
        APP_BASE_DIR = "src/${APP}"
        METRICS_BASE_DIR="metrics"
        AGENT_BASE_DIR = "src/${REPO}"
        ORCH_URL = 'https://obs-load-orch.app.elstc.co'
        CREDENTIALS_ID = 'f6c7695a-671e-4f4f-a331-acdce44ff9ba'
        // Set below for local development
        // ORCH_URL='10.0.2.2:8000'
        DEBUG_MODE = '0' // set to '0' for production
        LOCUST_RUN_TIME = "${params.duration}"
        LOCUST_USERS = "${params.concurrent_requests}"
        LOCUST_IGNORE_ERRORS = "${params.ignore_application_errors}"
    }
    options {
        timeout(time: 72, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
        timestamps()
        ansiColor('xterm')
        durabilityHint('PERFORMANCE_OPTIMIZED')
    }
    parameters {
        string(name: "apm_version", defaultValue: "master", description: "Java agent version, use git ref or values from curl -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/elastic/apm-agent-java/tags | jq '.[] | .name'")
        string(name: "jvm_version", defaultValue: "adoptopenjdk-8u275-linux", description: "JVM, use values from: curl -s https://jvm-catalog.elastic.co/jdks/tags/linux,x86_64 | jq '.[] | .id'")
        string(name: "jvm_options", defaultValue: "", description: "Extra JVM options")
        string(name: "concurrent_requests", defaultValue: "100", description: "The number of concurrent requests to test with")
        string(name: "duration", defaultValue: "10m", description: "Test duration. Specify with unit. Ex: 30m, 1h")
        // num_of_runs currently unsupported
        // string(name: "num_of_runs", defaultValue: "1", description: "Number of test runs to execute")
        text(name: "agent_config", "defaultValue": "", description: "Custom APM Agent configuration. (WARNING: May echo to console. Do not supply sensitive data.)")
        text(name: "locustfile", "defaultValue": "", description: "Locust load-generator plan")
        booleanParam(name: "local_metrics", description: "Enable local metrics collection?", defaultValue: false)
        booleanParam(name: "ignore_application_errors", description: "Instruct the load generator to ignore non-2xx errors on exit", defaultValue: true)
    }
    stages {
        stage('Pre-flight') {
            steps {
                echo 'Getting authentication information from Vault'
                withSecretVault(secret: 'secret/apm-team/ci/bandstand', user_var_name: 'APP_TOKEN_TYPE', pass_var_name: 'APP_TOKEN') {
                    setEnvVar('SESSION_TOKEN', sh(script: ".ci/load/scripts/start.sh", returnStdout: true).trim())
                }
            }
        }
        stage('Provision JDK') {
            agent { label 'benchmarks' }
            steps {
                echo "Provisioning Java version: ${params.jvm_version}"
                script {
                    def java_home = sh(script: ".ci/load/scripts/fetch_sdk.sh ${params.jvm_version}", returnStdout: true).trim()
                    setEnvVar('JAVA_HOME', java_home)
                    echo("JAVA_HOME = ${env.JAVA_HOME}")
                }
            }
        }
        stage('Build agent') {
            agent { label 'benchmarks' }
            steps {
                echo 'Checking out master branch'
                gitCheckout(
                    basedir: "${AGENT_BASE_DIR}",
                    branch: 'master',
                    repo: "https://github.com/elastic/${REPO}.git",
                    credentialsId: "${CREDENTIALS_ID}",
                    shallow: false
                )

                dir("${AGENT_BASE_DIR}") {
                    echo "Switch to requested agent version = ${params.apm_version}"
                    sh(script: "git checkout ${params.apm_version}")

                    echo 'Building agent with Java 11'
                    sh(script: "JAVA_HOME=${env.HUDSON_HOME}/.java/java11 ./mvnw --batch-mode clean package -DskipTests=true -Dmaven.javadoc.skip=true -Dmaven.sources.skip=true")

                    // copy agent jar to a known filename that don't change with version
                    sh(script: "cp -v \$(find ./elastic-apm-agent/target -name '*.jar' | grep -v sources | grep -v original | grep -v javadoc) ${WORKSPACE}/elastic-apm-agent.jar")

                    archiveArtifacts(
                            artifacts: "${WORKSPACE}/elastic-apm-agent.jar",
                            allowEmptyArchive: true,
                            onlyIfSuccessful: false)
                }

                whenTrue(Boolean.valueOf(params.agent_config)) {
                    echo 'Writing user-supplied agent configuration'
                    dir("${AGENT_BASE_DIR}") {
                        sh script: "echo \"${params.agent_config}\">custom_config.cfg"
                     }
                }
            }
        }
        stage('Build test application') {
            agent { label 'benchmarks' }
            steps {
                script {
                    def app_branch = "main"
                    def build_jdk_path = "${env.JAVA_HOME}"

                    def major_jdk_version = sh(script: ".ci/load/scripts/java_major.sh ${params.jvm_version}", returnStdout: true).trim()
                    if(major_jdk_version == '7'){
                        echo "Java 7.x detected. Installing compliant version of test application and JDK"
                        app_branch = "3450c3d99ecaaf46231feb2c404b72d1727517e1"
                        build_jdk_path = sh(script: ".ci/load/scripts/fetch_sdk.sh zulu-8.0.272-linux", returnStdout: true).trim()
                    }
                    echo "Checkout test application from: ${app_branch}"
                    gitCheckout(
                        basedir: "${APP_BASE_DIR}",
                        branch: "${app_branch}",
                        repo: "https://github.com/spring-projects/${APP}.git",
                        credentialsId: "${CREDENTIALS_ID}",
                        shallow: false
                    )
                    dir("${APP_BASE_DIR}") {
                        echo "Building test application using JDK = ${build_jdk_path}"
                        sh(script: "JAVA_HOME=${build_jdk_path} ./mvnw --batch-mode package -DskipTests=true -Dcheckstyle.skip")

                        archiveArtifacts(
                                artifacts: "target/*.war,target/*.jar",
                                allowEmptyArchive: true,
                                onlyIfSuccessful: false)
                    }
                }
            }
        }
        stage('Provision local metrics collection') {
            agent { label 'benchmarks' }
            when {
                expression {
                    return params.local_metrics
                }
            }
            steps {
                echo 'Enable local metric collection'
                gitCheckout(
                    basedir: "${METRICS_BASE_DIR}",
                    branch: 'master',
                    repo: "https://github.com/pstadler/metrics.sh",
                    credentialsId: "${CREDENTIALS_ID}",
                    shallow: false
                )
                sh(script: "touch metrics.out")
                dir("${METRICS_BASE_DIR}"){
                    withEnv(["FILE_LOCATION=./metrics.out"]) {
                        sh(script: "./metrics.sh -r file &")
                    }
                }
            }
        }
        stage('execute test') {
            parallel {
                stage('Load generation') {
                    agent { label 'metal' }
                    steps {
                        withSecretVault(secret: 'secret/apm-team/ci/bandstand', user_var_name: 'APP_TOKEN_TYPE', pass_var_name: 'APP_TOKEN') {
                            echo 'Preparing load generation..'
                            whenTrue(Boolean.valueOf(params.locustfile)) {
                                echo 'Using user-supplied plan for load-generation with Locust'
                                sh script: "echo \"${params.locustfile}\">.ci/load/scripts/locustfile.py"
                            }
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh(script: ".ci/load/scripts/load_agent.sh")
                            }
                        }
                    }
                }
                stage('Run app') {
                    agent { label 'benchmarks' }
                    steps {
                        echo "Starting test application in background.. with JVM = ${params.jvm_version}"
                        withSecretVault(secret: 'secret/apm-team/ci/apm-load-test-server', user_var_name: 'APM_SERVER_URL', pass_var_name: 'ELASTIC_APM_API_KEY') {
                            echo "start application with JVM options '${params.jvm_options}'"
                            script {
                                def major_jdk_version = sh(script: ".ci/load/scripts/java_major.sh ${params.jvm_version}", returnStdout: true).trim()
                                if (major_jdk_version == '7') {
                                    echo "Detected 7.x Java version. Switching to 7.x compat mode and calling .war"
                                    binaryPath = './target/petclinic.war'
                                } else {
                                    binaryPath = './target/spring-petclinic-*.jar'
                                }

                                dir("${APP_BASE_DIR}") {
                                    def cmd = "${JAVA_HOME}/bin/java "
                                    cmd = "${cmd} -javaagent:${WORKSPACE}/elastic-apm-agent.jar"
                                    cmd = "${cmd} -Delastic.apm.server_urls=${env.APM_SERVER_URL}"
                                    cmd = "${cmd} -Delastic.apm.secret_token=${env.ELASTIC_APM_API_KEY}"
                                    cmd = "${cmd} ${params.jvm_options}"
                                    cmd = "${cmd} -XX:ErrorFile=${APP_BASE_DIR}/hs_err_pid%p.log"
                                    // flight recorder disabled for now as not compatible with older JDKs
                                    // cmd = "${cmd} -XX:+FlightRecorder -XX:StartFlightRecording=filename=flight.jfr"
                                    cmd = "${cmd} -jar ${binaryPath}"
                                    sh(script: "${cmd} > app.log")
                                }

                            }
                            echo 'Starting bandstand client..'
                            // Foreground the orchestrator script for execution control
                            withSecretVault(secret: 'secret/apm-team/ci/bandstand', user_var_name: 'APP_TOKEN_TYPE', pass_var_name: 'APP_TOKEN') {
                                sh(script: ".ci/load/scripts/app.sh")
                            }
                        }
                    }
                }
            }
        }
        stage('Collect results') {
            agent { label 'benchmarks' }
            steps {
                echo "To view results, JMC is required. Get it here: https://jdk.java.net/jmc/"
                archiveArtifacts(
                    artifacts: "${APP_BASE_DIR}/**/*.log,${APP_BASE_DIR}/**/*.jfr,${METRICS_BASE_DIR}/**/*.out",
                    allowEmptyArchive: true,
                    onlyIfSuccessful: false)
            }
        }
    }
}
