[
  {
    "comment": "JDBC escape syntax join",
    "input": "SELECT * FROM {oj Countries JOIN Cities ON (Countries.country_ISO_code=Cities.country_ISO_code)}",
    "output": "SELECT FROM Countries"
  },
  {
    "input": "SELECT *,(SELECT COUNT(*) FROM table2 WHERE table2.field1 = table1.id) AS count FROM schema.table1@\"DBLINK.FQDN.COM@USER\" WHERE table1.field1 = 'value'",
    "output": "SELECT FROM schema.table1"
  },
  {
    "input": "UPDATE IGNORE foo.bar@\"DBLINK.FQDN.COM@USER\" SET bar=1 WHERE baz=2",
    "output": "UPDATE foo.bar"
  },
  {
    "input": "INSERT LOW_PRIORITY IGNORE INTO schema.table1@\"DBLINK.FQDN.COM@USER\" (col) VALUES(?)",
    "output": "INSERT INTO schema.table1"
  },
  {
    "input": "DELETE FROM schema.table1@\"DBLINK.FQDN.COM@USER\"",
    "output": "DELETE FROM schema.table1"
  },
  {
    "input": "MERGE INTO TEST USING (SELECT * FROM DUAL) SOURCE on (TEST.X=SOURCE.DUMMY) WHEN NOT MATCHED THEN INSERT VALUES(SOURCE.DUMMY)",
    "output": "MERGE INTO TEST"
  },
  {
    "input": "MERGE INTO TEST ALIAS USING (SELECT * FROM DUAL) SOURCE on (TEST.X=SOURCE.DUMMY) WHEN NOT MATCHED THEN INSERT VALUES(SOURCE.DUMMY)",
    "output": "MERGE INTO TEST"
  },
  {
    "input": "MERGE INTO SCHEMA.TEST USING (SELECT * FROM DUAL) SOURCE on (TEST.X=SOURCE.DUMMY) WHEN NOT MATCHED THEN INSERT VALUES(SOURCE.DUMMY)",
    "output": "MERGE INTO SCHEMA.TEST"
  },
  {
    "input": "MERGE INTO SCHEMA.TEST@DBLINK USING (SELECT * FROM DUAL) SOURCE on (TEST.X=SOURCE.DUMMY) WHEN NOT MATCHED THEN INSERT VALUES(SOURCE.DUMMY)",
    "output": "MERGE INTO SCHEMA.TEST"
  },
  {
    "input": "MERGE INTO SCHEMA.TEST@\"DBLINK.FQDN.COM\" USING (SELECT * FROM DUAL) SOURCE on (TEST.X=SOURCE.DUMMY) WHEN NOT MATCHED THEN INSERT VALUES(SOURCE.DUMMY)",
    "output": "MERGE INTO SCHEMA.TEST"
  },
  {
    "input": "MERGE INTO SCHEMA.TEST@\"DBLINK.FQDN.COM@USER\" USING (SELECT * FROM DUAL) SOURCE on (TEST.X=SOURCE.DUMMY) WHEN NOT MATCHED THEN INSERT VALUES(SOURCE.DUMMY)",
    "output": "MERGE INTO SCHEMA.TEST"
  },
  {
    "input": "MERGE",
    "output": "MERGE"
  },
  {
    "input": "{ ? = call FUNCTION() }",
    "output": "CALL FUNCTION"
  },
  {
    "input": "{ ? = call oj() }",
    "output": "CALL oj"
  },
  {
    "input": "{ ? = call SCHEMA.FUNCTION() }",
    "output": "CALL SCHEMA.FUNCTION"
  },
  {
    "input": "{ ? = call SCHEMA.FUNCTION@\"DBLINK.FQDN.COM@USER\"() }",
    "output": "CALL SCHEMA.FUNCTION"
  },
  {
    "input": "{ call PROCEDURE() }",
    "output": "CALL PROCEDURE"
  },
  {
    "input": "{call SCHEMA.PROCEDURE() }",
    "output": "CALL SCHEMA.PROCEDURE"
  },
  {
    "input": "{call SCHEMA.PROCEDURE@\"DBLINK.FQDN.COM@USER\"() }",
    "output": "CALL SCHEMA.PROCEDURE"
  },
  {
    "input": "{call PROCEDURE() }",
    "output": "CALL PROCEDURE"
  }
]
